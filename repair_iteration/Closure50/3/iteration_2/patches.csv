bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(first);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	replace
2	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(first);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	replace
3	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedNode);	  n.removeChild(prev);    n.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	6	None	replace
4	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(leftStringNode);	  n.removeChild(prev);    n.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	6	None	replace
5	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(oldStringNode);	  n.removeChild(prev);    n.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	6	None	replace
6	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  leftStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	6	None	replace
7	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	109	None	replace
8	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  int  cannot  be  dereferenced  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
9	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(0).replaceChild(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(0).replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(0).replaceChild(n,  emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	109	None	replace
10	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  arrayFoldedNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  arrayFoldedNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	109	None	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);    n.getParent().removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
12	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    n.getParent().removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
13	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getFunctionName();  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getFunctionName();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getFunctionName();	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
14	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent();  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getParent();	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
15	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getFirstChild();  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getFirstChild();	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
16	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().getFirstChild();  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getParent().getFirstChild();	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
17	[BUG]  [BUGGY]  n.removeChild(functionName);  node.removeChild(functionName);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  node.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    node.removeChild(functionName);	  	non-compiled	[CE]  cannot  find  symbol  node	66	None	add
18	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayNode);    n.removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	41	3	add
19	[BUG]  [BUGGY]  n.removeChild(arrayNode);  n.removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    n.removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	41	3	add
20	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent();  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent();	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
21	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
22	[BUG]  [BUGGY]  n.removeChild(arrayNode);  node.removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  node.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    node.removeChild(arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  node	41	None	add
23	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.remove(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
24	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getFirstChild();  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getFirstChild();	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
25	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
26	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.get(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	replace
27	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	32	None	replace
28	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.get(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	32	None	replace
29	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.get(1);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	32	None	replace
30	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  n  =  arrayFoldedChildren.get(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
31	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldedSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  foldedSize);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
32	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  sb);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  sb);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
33	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
34	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
35	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  leftStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  leftStringNode);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
36	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
37	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [CE]  int  cannot  be  dereferenced  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  int  cannot  be  dereferenced	151	None	replace
38	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(removedStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(removedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(removedStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
39	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
40	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(p);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(p);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(p);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
41	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb,  prev);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb,  prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
42	[BUG]  [BUGGY]  n.removeChild(inlineStringNode);  [CE]  cannot  find  symbol  inlineStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(inlineStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(inlineStringNode);	  n.removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  inlineStringNode	136	None	replace
43	[BUG]  [BUGGY]  n.removeChild(originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(originalSize);	  n.removeChild(left);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
44	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0),  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0),  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0),  foldedSize);	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	115	None	replace
45	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayFoldedChildren.get(1));	  n.removeChild(arrayFoldedChildren.get(0));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	115	3	replace
46	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(1));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(1));	  n.removeChild(arrayFoldedChildren.get(0));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  1  	115	3	replace
47	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)+  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0)+  1);	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	115	None	replace
48	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)+  foldedSize);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)+  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0)+  foldedSize);	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	115	None	replace
49	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0),  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0),  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0),  foldedStringNode);	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	115	None	replace
50	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)-  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0)-  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0)-  1);	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	115	None	replace
51	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	71	2	add
52	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	71	2	add
53	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	71	None	add
54	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  If(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  If(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    If(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	71	None	add
55	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	71	2	add
56	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	71	2	add
57	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	71	2	add
58	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	71	2	add
59	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  wrappedSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  wrappedSize  [FE]              AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  wrappedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  ==  0  ||  wrappedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  wrappedSize	71	None	add
60	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  Node  originalSize  =  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  Node  originalSize  =  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    Node  originalSize  =  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	71	None	add
61	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(n);	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(sb,    n,    foldedSize,    originalSize);    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
62	[BUG]  [BUGGY]  n.getParent().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(n);	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(sb,    n,    foldedSize,    originalSize);    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
63	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.getParent().removeChild(n);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.getParent().removeChild(n);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	37	None	replace
64	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.getParent().removeChild(n);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.getParent().removeChild(n);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	37	None	replace
65	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(n);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.getParent().removeChild(n);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	37	None	replace
66	[BUG]  [BUGGY]  n.removeChild(n);  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);  n.getParent().removeChild(arrayFoldedNode);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	37	None	replace
67	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(0));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
68	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(0));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(0));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
69	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(1));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
70	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(1));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(1));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
71	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  arrayFoldedChildren.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	114	None	add
72	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  arrayFoldedChildren.get(1);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  arrayFoldedChildren.get(1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren  =  arrayFoldedChildren.get(1);	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	114	None	add
73	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  node.removeChild(arrayFoldedChildren.get(0));  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  node.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    node.removeChild(arrayFoldedChildren.get(0));	  	non-compiled	[CE]  cannot  find  symbol  node	114	None	add
74	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren  =  n.getParent();	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	114	None	add
75	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren.get(0);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  ';'  expected	114	None	add
76	[BUG]  [BUGGY]  n.removeChild(labelNode);  [CE]  cannot  find  symbol  labelNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(labelNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  cannot  find  symbol  labelNode	122	None	replace
77	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(labelNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(labelNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	122	None	replace
78	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(labelNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(labelNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	122	None	replace
79	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(labelNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(labelNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	122	None	replace
80	[BUG]  [BUGGY]  Node  labelNode  =  n.removeChild(labelNode);  [CE]  incompatible  types  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  labelNode  =  n.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  labelNode  =  n.removeChild(labelNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  incompatible  types	122	None	replace
81	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.toString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.toString();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.toString();	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
82	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  sb.toString()  +  1;  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  sb.toString()  +  1;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  sb.toString()  +  1;	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
83	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.toString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.toString();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.toString();	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
84	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.toString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.toString();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  arrayFoldedChildren.toString();	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
85	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString());  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString());	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
86	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString(),  foldedSize);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString(),  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  new  StringBuilder(sb.toString(),  foldedSize);	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
87	[BUG]  [BUGGY]  n.getParent().removeChild(partialStringNode);  [CE]  cannot  find  symbol  partialStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(partialStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(partialStringNode);	          n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  partialStringNode	85	None	replace
88	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,  prev);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
89	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  prev);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
90	[BUG]  [BUGGY]  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(parent);	          n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  parent	85	None	replace
91	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(functionName);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
92	[BUG]  [BUGGY]  n.getParent().removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(functionName);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
93	[BUG]  [BUGGY]  n.getParent().removeChild(paramNode);  [CE]  cannot  find  symbol  paramNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(paramNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(paramNode);	          n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  paramNode	85	None	replace
94	[BUG]  [BUGGY]  n.getParent().removeChild(rootNode);  [CE]  cannot  find  symbol  rootNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(rootNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(rootNode);	          n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  rootNode	85	None	replace
95	[BUG]  [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	57	None	replace
96	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[   "a "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[   "a "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[   "a "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	57	None	replace
97	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
98	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
99	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	73	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)	  	compilable	  [FE]  AssertionFailedError  	73	3	add
101	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)	  	compilable	  [FE]  AssertionFailedError  	73	3	add
102	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	73	None	add
103	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {	  	non-compiled	[CE]  orphaned  case	73	None	add
104	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeCh  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeCh  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeCh	  	non-compiled	[CE]  ';'  expected	73	None	add
105	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCode  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCode  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCode	  	non-compiled	[CE]  ';'  expected	73	None	add
106	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  	  	non-compiled	[CE]  ')'  expected	73	None	add
107	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(arrayFoldedNode);	  n.removeChild(prev);    n.removeChild(nameNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	97	None	replace
108	[BUG]  [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  -  1;  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  -  1;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  n.getChildCount()  -  1;	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	92	None	replace
109	[BUG]  [BUGGY]  int  kJoinOverhead  =  arrayFoldedChildren.getChildCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  arrayFoldedChildren.getChildCount();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  arrayFoldedChildren.getChildCount();	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
110	[BUG]  [BUGGY]  int  kJoinOverhead  =  arrayFoldedChildren.size();  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  arrayFoldedChildren.size();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  arrayFoldedChildren.size();	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	92	None	replace
111	[BUG]  [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  -  2;  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  -  2;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  n.getChildCount()  -  2;	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	92	None	replace
112	[BUG]  [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  +  1;  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  n.getChildCount()  +  1;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  n.getChildCount()  +  1;	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	92	None	replace
113	[BUG]  [BUGGY]  int  kJoinOverhead  =  emptyStringNode.getChildCount();  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  emptyStringNode.getChildCount();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  emptyStringNode.getChildCount();	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	92	None	replace
114	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getNext();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.getNext();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
115	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.getParent();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
116	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.clone();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.clone();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.clone();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
117	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getLastChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.getLastChild();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
118	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.getFirstChild();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
119	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.cloneTree();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.cloneTree();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
121	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
122	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
123	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
124	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
125	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
127	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
128	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
129	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
130	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
131	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
132	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
133	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	add
134	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
135	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
136	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	118	None	replace
137	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(prev);  [CE]  cannot  find  symbol  leftStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	118	None	replace
138	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	118	None	replace
139	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(prev);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(parent);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(parent);  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  parent	118	None	replace
140	[BUG]  [BUGGY]  n.removeChild(last);  n.removeChild(prev);  [CE]  cannot  find  symbol  last  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(last);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(last);  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  last	118	None	replace
141	[BUG]  [BUGGY]  n.removeChild(sb.toString());  n.removeChild(prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb.toString());  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString());  n.removeChild(prev);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
142	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  arrayFoldedChildren);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	12	None	replace
143	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  foldedSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  foldedSize);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	12	None	replace
144	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  foldedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  foldedSize);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
145	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  oldStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  oldStringNode);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
146	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  arrayFoldedChildren);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
147	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  oldStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  oldStringNode);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	12	None	replace
148	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  foldedSize);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
149	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  emptyStringNode);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
150	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  left);  [CE]  cannot  find  symbol  left  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  left);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  left);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  left	154	None	replace
151	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  foldedStringNode);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	154	None	replace
152	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  right);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  right);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
153	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  originalSize);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
154	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	155	2	replace
155	[BUG]  [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	155	2	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	155	2	replace
157	[BUG]  [BUGGY]  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >=  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	155	2	replace
158	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
159	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
160	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
161	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
162	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
163	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  <  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
164	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
165	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
166	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
167	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
168	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	60	None	add
169	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
170	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
171	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  initialSize);	  n.removeChild(arrayFoldedChildren,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  initialSize	127	None	replace
172	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  foldedSize);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	125	None	replace
173	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  left);  [CE]  cannot  find  symbol  left  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  left);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  left);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  left	125	None	replace
174	[BUG]  [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren,  prev);  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode,  arrayFoldedChildren,  prev);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	125	None	replace
175	[BUG]  [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  arrayFoldedChildren,  prev);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	125	None	replace
176	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  right);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  right);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	125	None	replace
177	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(foldedSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(foldedSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	99	2	replace
178	[BUG]  [BUGGY]  if(foldedSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(foldedSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(foldedSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	99	2	replace
179	[BUG]  [BUGGY]  if(n!=  0)  {  reportCodeChange();  }  [CE]  incomparable  types:  Node  and  int  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  incomparable  types:  Node  and  int	99	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	InlineCostEstimator.getCost(n);	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	99	3	replace
181	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n);  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n);	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	99	3	replace
182	[BUG]  [BUGGY]  n!=  0)  {  reportCodeChange();  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  not  a  statement	99	None	replace
183	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
184	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
185	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
186	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
187	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
188	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
189	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
190	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
191	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
192	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  Node  prev  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
193	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getNext().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getNext().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
194	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getNext().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  n.getNext().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);  n.getNext().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
195	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right);  n.removeChild(arrayFoldedNode);	  n.removeChild(prev);    n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	10	None	replace
196	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  left  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  n.removeChild(arrayFoldedNode);	  n.removeChild(prev);    n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  left	10	None	replace
197	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(functionName);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(name);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	5	None	replace
198	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	replace
199	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  kJoinOverhead);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  kJoinOverhead);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	replace
200	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  oldStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  oldStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	replace
201	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [CE]  int  cannot  be  dereferenced  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n).replaceChild(n,  n);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
202	[BUG]  [BUGGY]  int  initialSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [CE]  int  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  initialSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  initialSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
203	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
204	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
205	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	30	None	add
206	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(sb.toString());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	add
207	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
208	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
209	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(t);  [CE]  cannot  find  symbol  t  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(t);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(t);	  	non-compiled	[CE]  cannot  find  symbol  t	30	None	add
210	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(r);  [CE]  cannot  find  symbol  r  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(r);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(r);	  	non-compiled	[CE]  cannot  find  symbol  r	30	None	add
211	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  node.removeChild(n);  n.removeChild(n);  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  node.removeChild(n);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    node.removeChild(n);  n.removeChild(n);	  	non-compiled	[CE]  cannot  find  symbol  node	30	None	add
212	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(arrayNode);	  n.removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	42	3	replace
213	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayNode);	  n.removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	42	3	replace
214	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
215	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getNext();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild().getNext();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
216	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().cloneTree();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild().cloneTree();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
217	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getString();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild().getString();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
218	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().removeFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().removeFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild().removeFirstChild();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
219	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	119	None	replace
220	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	119	None	replace
221	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  sb.toString());  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	119	None	replace
222	[BUG]  [BUGGY]  n.removeChild(callTarget,  n);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget,  n);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget,  n);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	119	None	replace
223	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  n);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  n);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  n);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	119	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	138	3	replace
225	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	138	3	replace
226	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	138	3	replace
227	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	138	3	replace
228	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	138	3	replace
229	[BUG]  [BUGGY]  if(originalSize  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	138	3	replace
230	[BUG]  [BUGGY]  n!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	138	None	replace
231	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n)!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n)!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n)!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	138	None	replace
232	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
233	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
234	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
235	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
236	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
237	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
238	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
239	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
240	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	8	None	add
241	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);  n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
242	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);  n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
243	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  Node  prev  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	8	None	add
244	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	116	None	replace
245	[BUG]  [BUGGY]  node.removeChild(n);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  node	116	None	replace
246	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.size();  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.size();  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  arrayFoldedChildren.size();  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	116	None	replace
247	[BUG]  [BUGGY]  node.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  node	116	None	replace
248	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.size();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  arrayFoldedChildren.size();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  arrayFoldedChildren.size();	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	116	None	replace
249	[BUG]  [BUGGY]  Annotation  arrayFoldedNode  =  n.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Annotation  arrayFoldedNode  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Annotation  arrayFoldedNode  =  n.getParent();	  if(originalSize    ==    0)    {    reportCodeChange();    }    If(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
250	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
251	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
252	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  left);  [CE]  cannot  find  symbol  left  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  left);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  left);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  left	139	None	replace
253	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	139	None	replace
254	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
255	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
256	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	148	None	replace
257	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedParent);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedParent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedParent);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	148	None	replace
258	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	148	None	replace
259	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedParent);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedParent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(arrayFoldedParent);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	148	None	replace
260	[BUG]  [BUGGY]  n.removeChild(initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(initialSize);	  n.removeChild(leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  initialSize	55	None	replace
261	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  1);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	123	None	replace
262	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  1);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	123	None	replace
263	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1],  foldedSize  -  1);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1],  foldedSize  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1],  foldedSize  -  1);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1);    	non-compiled	[CE]  ')'  expected	123	None	replace
264	[BUG]  [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(emptyStringNode,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
265	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  foldedSize);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
266	[BUG]  [BUGGY]  n.removeChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode,  emptyStringNode);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
267	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  prev);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
268	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  left);  [CE]  cannot  find  symbol  left  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  left);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  left);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  left	126	None	replace
269	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  emptyStringNode);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
270	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join( "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
271	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
272	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
273	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[ "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
274	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
275	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  ==  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
276	[BUG]  [BUGGY]  n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
277	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
278	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	144	None	replace
279	[BUG]  [BUGGY]  n.removeChild(functionName,  prev);  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  prev);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  prev);  n.removeChild(arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  ==  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
281	[BUG]  [BUGGY]  if(originalSize  ==  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
283	[BUG]  [BUGGY]  if(originalSize!=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  >=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
285	[BUG]  [BUGGY]  if(originalSize  >=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >=  0  &&  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  ==  0  ||  foldedSize  >=  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
287	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >=  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0  ||  foldedSize  >=  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	72	3	replace
288	[BUG]  [BUGGY]  int  foldedSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  foldedSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  foldedSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  foldedSize  =  InlineCostEstimator.getCost(n);	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  foldedSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	72	None	replace
289	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(callTarget);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(functionName);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	replace
290	[BUG]  [BUGGY]  n.removeChild(callTarget);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(functionName);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	replace
291	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(functionName);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(functionName);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	9	None	replace
292	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
293	[BUG]  [BUGGY]  n.removeChild(oldStringNode,  foldedSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode,  foldedSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	11	None	replace
294	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldedSize,  initialSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	11	None	replace
295	[BUG]  [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  arrayFoldedChildren,  foldedSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
296	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(originalSize);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(originalSize);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
297	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(leftStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	153	None	replace
298	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(n);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
299	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(prev,  foldedSize);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(prev,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(prev,  foldedSize);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
300	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(n,  prev);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(n,  prev);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
301	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(new  StringBuilder(prev));  [CE]  no  suitable  constructor  found  for  StringBuilder(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(new  StringBuilder(prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(new  StringBuilder(prev));	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(Node)	153	None	replace
302	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	89	None	replace
303	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	89	None	replace
304	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	89	None	replace
305	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	89	None	replace
306	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  initialSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	89	None	replace
307	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	replace
308	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >=  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(callTarget);	  n.removeChild(functionName);    	compilable	  [FE]  AssertionFailedError  	67	3	replace
310	[BUG]  [BUGGY]  n.removeChild(callTarget);  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget);	  n.removeChild(functionName);    	compilable	  [FE]  AssertionFailedError  	67	3	replace
311	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(first);	  n.removeChild(functionName);    	non-compiled	[CE]  cannot  find  symbol  first	67	None	replace
312	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	141	None	replace
313	[BUG]  [BUGGY]  node.removeChild(prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(prev);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  node	141	None	replace
314	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  prev);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	141	None	replace
315	[BUG]  [BUGGY]  n.removeChild(sb.toString());  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb.toString());  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString());  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	141	None	replace
316	[BUG]  [BUGGY]  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	141	None	replace
317	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size(),  foldedSize);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
318	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  2);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
319	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  1);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
320	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
321	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getNext();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getNext();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
322	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  left.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  left.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  left.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
323	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().getNext();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild().getNext();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
324	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  functionName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  functionName);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
325	[BUG]  [BUGGY]  n.removeChild(functionName,  emptyStringNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  emptyStringNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  emptyStringNode,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
326	[BUG]  [BUGGY]  n.removeChild(functionName,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  emptyStringNode);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
327	[BUG]  [BUGGY]  n.removeChild(functionName,  n,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  n,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  n,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
328	[BUG]  [BUGGY]  n.removeChild(sb,  functionName,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  functionName,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  functionName,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
329	[BUG]  [BUGGY]  n.removeChild(parent,  functionName,  arrayFoldedChildren);  [CE]  cannot  find  symbol  parent  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(parent,  functionName,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(parent,  functionName,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
330	[BUG]  [BUGGY]  n.removeChild(type,  functionName,  arrayFoldedChildren);  [CE]  cannot  find  symbol  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(type,  functionName,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(type,  functionName,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  type	15	None	replace
331	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >=  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >=  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >=  junit.framework.AssertionFailedError:  Expected:  x=[ "	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	19	None	replace
332	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	19	None	replace
333	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	19	None	replace
334	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	                n.getParent().removeChild(prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
335	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
336	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  Node  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    Node  n.getParent().removeChild(prev);	  	non-compiled	[CE]  ';'  expected	84	None	add
337	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	84	None	add
338	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	                n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
339	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
340	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(prettyPrinter);  [CE]  cannot  find  symbol  prettyPrinter  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(prettyPrinter);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(prettyPrinter);	  	non-compiled	[CE]  cannot  find  symbol  prettyPrinter	84	None	add
341	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  node.getParent().removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  node.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    node.getParent().removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  node	84	None	add
342	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(first);  [CE]  cannot  find  symbol  first  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol  first	84	None	add
343	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    <    0)    {    reportCodeChange();    }    if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	69	2	add
344	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	69	2	add
345	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
346	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
347	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).removeFirstChild();  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).removeFirstChild();  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).removeFirstChild();  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
348	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCostIndex(n);  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCostIndex(n);  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCostIndex(n);  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
349	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).removeLastChild();  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).removeLastChild();  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).removeLastChild();  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
350	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  If(originalSize  <  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  If(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    If(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	69	None	add
351	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n,  kJoinOverhead);  [CE]  cannot  find  symbol  kJoinOverhead  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n,  kJoinOverhead);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n,    kJoinOverhead);    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	108	None	replace
352	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n,    kJoinOverhead);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	108	None	replace
353	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldingSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldingSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  foldingSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n,    kJoinOverhead);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	108	None	replace
354	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	152	None	replace
355	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb);  [CE]  no  suitable  method  found  for  getCost(Node,StringBuilder)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,StringBuilder)	152	None	replace
356	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  leftStringNode);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	152	None	replace
357	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [CE]  no  suitable  method  found  for  getCost(Node,List<Node>)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,List<Node>)	152	None	replace
358	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  prev);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  prev);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	152	None	replace
359	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.remove(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.remove(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	34	None	replace
360	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.remove(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.remove(0);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	34	None	replace
361	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  Node  n  =  arrayFoldedChildren.remove(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.remove(0);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	34	None	replace
362	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.remove(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.remove(0);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	34	None	replace
363	[BUG]  [BUGGY]  Node  oldStringNode  =  n.removeChild(oldStringNode);  [CE]  incompatible  types  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  oldStringNode  =  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  oldStringNode  =  n.removeChild(oldStringNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  incompatible  types	33	None	replace
364	[BUG]  [BUGGY]  Node  oldStringNode  =  n.removeChild(n);  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  oldStringNode  =  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  oldStringNode  =  n.removeChild(n);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  incompatible  types	33	None	replace
365	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	75	None	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  <  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    <    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	70	3	replace
367	[BUG]  [BUGGY]  if(originalSize  <  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  <  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    <    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	70	3	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  <=  0)  {  reportCodeChange();  }	  if(originalSize    <    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	70	3	replace
369	[BUG]  [BUGGY]  if(originalSize  <=  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  <=  0)  {  reportCodeChange();  }	  if(originalSize    <    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	70	3	replace
370	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  left);  [CE]  cannot  find  symbol  left  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  left);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  left);	  n.removeChild(arrayFoldedChildren,    first);    	non-compiled	[CE]  cannot  find  symbol  left	128	None	replace
371	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldingSize);  [CE]  cannot  find  symbol  foldingSize  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  foldingSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldingSize);	  n.removeChild(arrayFoldedChildren,    first);    	non-compiled	[CE]  cannot  find  symbol  foldingSize	128	None	replace
372	[BUG]  [BUGGY]  node.removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(prev);	  n.removeChild(prev);    node.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  node	7	None	replace
373	[BUG]  [BUGGY]  Node.removeChild(n);  [CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node.removeChild(n);	  n.removeChild(prev);    node.removeChild(prev);    	non-compiled	[CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context	7	None	replace
374	[BUG]  [BUGGY]  node.removeChild(n);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);	  n.removeChild(prev);    node.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  node	7	None	replace
375	[BUG]  [BUGGY]  n.replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(n,  foldedStringNode);	  n.detachChildren();    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	132	None	replace
376	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  sb);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  sb);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	16	None	replace
377	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  sb);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  sb);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	16	None	replace
378	[BUG]  [BUGGY]  n.removeChild(arrayNode,  sb);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode,  sb);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	16	None	replace
379	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  sb);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  sb);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  sb);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	16	None	replace
380	[BUG]  [BUGGY]  n.removeChild(arrayNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode,  arrayFoldedChildren);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	16	None	replace
381	[BUG]  [BUGGY]  n.removeChild(sb,  emptyStringNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  emptyStringNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  emptyStringNode,  arrayFoldedChildren);	  n.removeChild(sb,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	16	None	replace
382	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
383	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
384	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
385	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
386	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
387	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
388	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
389	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
390	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
391	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
392	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
393	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
394	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
395	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
396	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
397	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
398	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[   "a	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	59	None	replace
399	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  foldedStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	50	None	replace
400	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
401	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(parent,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	50	None	replace
402	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
403	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
404	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getNext().replaceChild(n,  foldedStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	50	None	replace
405	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
406	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(oldStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(oldStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
407	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
408	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb.toString());  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(sb.toString());	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
409	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(initialSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(initialSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
410	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	124	None	replace
411	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  emptyStringNode);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedStringNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	124	None	replace
412	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	124	None	replace
413	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	105	None	replace
414	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getParent();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
415	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getRootNode();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getRootNode();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getRootNode();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
416	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getRawParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getRawParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getRawParent();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
417	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getRoot();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getRoot();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getRoot();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
418	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
419	[BUG]  [BUGGY]  n.removeChild(sb.toString(),  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb.toString(),  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString(),  prev);	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
420	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode.toString());  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	40	None	replace
421	[BUG]  [BUGGY]  n.removeChild(arrayStringNode.toString());  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	40	None	replace
422	[BUG]  [BUGGY]  n.removeChild(sb.toString(),  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb.toString(),  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString(),  foldedSize);	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
423	[BUG]  [BUGGY]  n.removeChild(oldStringNode.toString());  [CE]  cannot  find  symbol  oldStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	40	None	replace
424	[BUG]  [BUGGY]  n.removeChild(callTarget.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
425	[BUG]  [BUGGY]  n.removeChild(arrangeStringNode);  [CE]  cannot  find  symbol  arrangeStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrangeStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrangeStringNode);	  n.removeChild(arrangeFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrangeStringNode	135	None	replace
426	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  leftStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	4	None	replace
427	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
428	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
429	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(arrayFoldedNode);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	4	None	replace
430	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(parent);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	4	None	replace
431	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.getParent().removeChild(parent);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
432	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  prev));  [CE]  no  suitable  constructor  found  for  StringBuilder(String,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString(),  prev));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(String,Node)	68	None	replace
433	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  suffix));  [CE]  cannot  find  symbol  suffix  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  suffix));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString(),  suffix));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  cannot  find  symbol  suffix	68	None	replace
434	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()),  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()),  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()),  prev);	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
435	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  originalSize));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  originalSize));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()  +  originalSize));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
436	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  foldedSize));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  foldedSize));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()  +  foldedSize));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
437	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  foldedSize));  [CE]  no  suitable  constructor  found  for  StringBuilder(String,int)  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  foldedSize));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString(),  foldedSize));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(String,int)	68	None	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(foldedSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(foldedSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
439	[BUG]  [BUGGY]  if(foldedSize  ==  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(foldedSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(foldedSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	110	3	replace
440	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	56	2	add
441	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	56	2	add
442	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
443	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
444	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
445	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
446	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	56	None	add
447	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	56	None	add
448	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
449	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
450	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	56	None	add
451	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >	  	non-compiled	[CE]  ')'  expected	56	None	add
452	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
453	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName,  prev));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName,  prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName,  prev));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
454	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
455	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
456	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
457	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
458	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n,  prev));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n,  prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n,  prev));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
459	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	add
460	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	add
461	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
462	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
463	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
464	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
465	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
466	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
467	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	add
468	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	add
469	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
470	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
471	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
472	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
473	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
474	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
475	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	replace
476	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  cannot  find  symbol  arrayStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	38	None	replace
477	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	38	None	replace
478	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
479	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	replace
480	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
481	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
482	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
483	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
484	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	76	None	add
485	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
486	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
487	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	76	None	add
488	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
489	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
490	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
491	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
492	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
493	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
494	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
495	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
496	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(parent,  prev);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(parent,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(parent,  prev);	  	non-compiled	[CE]  cannot  find  symbol  parent	95	None	add
497	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(labelNode,  prev);  [CE]  cannot  find  symbol  labelNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(labelNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(labelNode,  prev);	  	non-compiled	[CE]  cannot  find  symbol  labelNode	95	None	add
498	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedNode,  prev);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	95	None	add
499	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
500	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
501	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(sb.toString());  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(sb.toString());	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	add
502	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedParent,  prev);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedParent,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(arrayFoldedParent,  prev);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	95	None	add
503	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
504	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
505	[BUG]  [BUGGY]  n.removeChild(alphaNode);  [CE]  cannot  find  symbol  alphaNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(alphaNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(alphaNode);	  n.removeChild(analyzedStringNode);    	non-compiled	[CE]  cannot  find  symbol  alphaNode	134	None	replace
506	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	NodeUtil.removeChild(n,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	replace
507	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	NodeUtil.removeChild(n,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	replace
508	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	NodeUtil.removeChild(n,  emptyStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  RuntimeException  	96	3	replace
509	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  emptyStringNode);  [FE]  RuntimeException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	NodeUtil.removeChild(n,  emptyStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  RuntimeException  	96	3	replace
510	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);  NodeUtil.removeChild(n,  emptyStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	replace
511	[BUG]  [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);  NodeUtil.removeChild(n,  emptyStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	replace
512	[BUG]  [BUGGY]  NodeUtil.removeChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(arrayFoldedNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	NodeUtil.removeChild(arrayFoldedNode,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	96	None	replace
513	[BUG]  [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);  NodeUtil.removeChild(n,  leftStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	96	None	replace
514	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.removeChild(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	NodeUtil.removeChild(n,  arrayFoldedNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	96	None	replace
515	[BUG]  [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);  NodeUtil.removeChild(n,  arrayFoldedNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	96	None	replace
516	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	121	None	replace
517	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
518	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  *  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  *  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  *  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
519	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  kJoinOverhead);  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  kJoinOverhead);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	88	None	replace
520	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
521	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	88	None	replace
522	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  initialSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	88	None	replace
523	[BUG]  [BUGGY]  n.removeChild(oldStringNode,  originalSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode,  originalSize);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	130	None	replace
524	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  originalSize,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  originalSize,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  originalSize,  foldedSize);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
525	[BUG]  [BUGGY]  n.removeChild(initialSize,  arrayFoldedChildren);  [CE]  cannot  find  symbol  initialSize  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(initialSize,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(initialSize,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	130	None	replace
526	[BUG]  [BUGGY]  n.removeChild(originalSize,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(originalSize,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(originalSize,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
527	[BUG]  [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  arrayFoldedChildren,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  arrayFoldedChildren,  originalSize);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
528	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
529	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
530	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
531	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  >=  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
532	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
533	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  ==  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
534	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >>  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >>  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  >>  0)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	137	None	add
535	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  -  2);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	140	None	replace
536	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  2,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  2,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  2,  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	140	None	replace
537	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  2);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	140	None	replace
538	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	31	None	replace
539	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(arrayNode);	  n.removeChild(n);    n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	31	None	replace
540	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);	  n.removeChild(n);    n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	31	None	replace
541	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
542	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
543	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	78	None	add
544	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	78	2	add
545	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	78	2	add
546	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
547	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
548	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
549	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
550	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	78	None	add
551	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
552	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
553	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	78	None	add
554	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(n.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
555	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(leftStringNode.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
556	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(functionName.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
557	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(fontName.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(fontName.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(fontName.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
558	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
559	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(false,  prev.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(false,  prev.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(false,  prev.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
560	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize,  prev.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
561	[BUG]  [BUGGY]  n.removeChild(callTarget);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	142	None	replace
562	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  prev);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  prev);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	142	None	replace
563	[BUG]  [BUGGY]  n.removeChild(rootNode,  prev);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  rootNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(rootNode,  prev);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(rootNode,  prev);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  rootNode	142	None	replace
564	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  leftStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  arrayFoldedChildren);	  n.removeChild(type,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	17	None	replace
565	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
566	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
567	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
568	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
569	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
570	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
571	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
572	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	117	3	add
573	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.getParent().replaceChild(n,  foldedStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	117	None	add
574	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(prev).copyInformationFrom(originalSize);  [CE]  void  cannot  be  dereferenced  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(prev).copyInformationFrom(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.removeChild(prev).copyInformationFrom(originalSize);	  	non-compiled	[CE]  void  cannot  be  dereferenced	117	None	add
575	[BUG]  [BUGGY]  n.getParent().removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayStringNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	133	None	replace
576	[BUG]  [BUGGY]  n.getParent().removeChild(parentNode);  [CE]  cannot  find  symbol  parentNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(parentNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(parentNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  parentNode	133	None	replace
577	[BUG]  [BUGGY]  n.getParent().removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(oldStringNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	133	None	replace
578	[BUG]  [BUGGY]  n.getParent().removeChild(arrangeFoldedNode);  [CE]  cannot  find  symbol  arrangeFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrangeFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrangeFoldedNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrangeFoldedNode	133	None	replace
579	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
580	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
581	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	49	None	add
582	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	49	None	add
583	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
584	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
585	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    node.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	49	None	add
586	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  break;  [CE]  unreachable  statement  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  break;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  break;	  	non-compiled	[CE]  unreachable  statement	49	None	add
587	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  nullNode);  [CE]  cannot  find  symbol  nullNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  nullNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  nullNode);	  	non-compiled	[CE]  cannot  find  symbol  nullNode	49	None	add
588	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);  n.removeChild(prev);	  n.removeChild(prev);    n.removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
589	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(prev);	  n.removeChild(prev);    n.removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
590	[BUG]  [BUGGY]  if(n  >  0)  {  reportCodeChange();  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	106	None	replace
591	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
592	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
593	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	58	2	add
594	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	58	2	add
595	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	58	2	add
596	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	58	2	add
597	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
598	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
599	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	58	None	add
600	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
601	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  1)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
602	[BUG]  [BUGGY]  n.replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(arrayStringNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	47	None	replace
603	[BUG]  [BUGGY]  n.replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(arrayFoldedNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	47	None	replace
604	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.replaceChild(arrayNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
605	[BUG]  [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(arrayNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
606	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.replaceChild(n,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
607	[BUG]  [BUGGY]  n.replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(n,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
608	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(emptyStringNode,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.replaceChild(emptyStringNode,  n);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
609	[BUG]  [BUGGY]  n.replaceChild(emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(emptyStringNode,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(emptyStringNode,  n);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
610	[BUG]  [BUGGY]  node.replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.replaceChild(n,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
611	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	28	None	replace
612	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	28	None	replace
613	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.detachChildren();    n.detachChildren();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	131	2	add
614	[BUG]  [BUGGY]  n.detachChildren();  n.detachChildren();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    n.detachChildren();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	131	2	add
615	[BUG]  [BUGGY]  n.detachChildren();  Node  n.detachChildren();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n.detachChildren();	  	non-compiled	[CE]  ';'  expected	131	None	add
616	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
617	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.remove(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
618	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
619	[BUG]  [BUGGY]  n.detachChildren();  int  kJoinOverhead  =  n.getChildCount();  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  int  kJoinOverhead  =  n.getChildCount();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    int  kJoinOverhead  =  n.getChildCount();	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
620	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(i);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(i);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.get(i);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
621	[BUG]  [BUGGY]  n.detachChildren();  node.detachChildren();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  node.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    node.detachChildren();	  	non-compiled	[CE]  cannot  find  symbol  node	131	None	add
622	[BUG]  [BUGGY]  Node.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node.removeChild(arrayFoldedNode);	  n.removeChild(n);    node.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	39	None	replace
623	[BUG]  [BUGGY]  Node  node  =  n.removeChild(n);  [CE]  incompatible  types  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  node  =  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  node  =  n.removeChild(n);	  n.removeChild(n);    node.removeChild(n);    	non-compiled	[CE]  incompatible  types	39	None	replace
624	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
625	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
626	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  initialSize);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	90	None	replace
627	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	90	None	replace
628	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  kJoinOverhead);  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  kJoinOverhead);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	90	None	replace
629	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
630	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  inlineCostEstimator);  [CE]  cannot  find  symbol  inlineCostEstimator  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  inlineCostEstimator);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize,  inlineCostEstimator);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  inlineCostEstimator	90	None	replace
631	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size());  [CE]  cannot  find  symbol  leftStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.size());	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	145	None	replace
632	[BUG]  [BUGGY]  n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  prev);  n.removeChild(arrayFoldedChildren.size());	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	145	None	replace
633	[BUG]  [BUGGY]  n.removeChild(right,  arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  arrayFoldedChildren.size());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  arrayFoldedChildren.size());	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	145	None	replace
634	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  prev,  arrayFoldedChildren);  [CE]  cannot  find  symbol  leftStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  prev,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  prev,  arrayFoldedChildren);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	13	None	replace
635	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	13	None	replace
636	[BUG]  [BUGGY]  n.removeChild(sb,  prev,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb,  prev,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  prev,  arrayFoldedChildren);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
637	[BUG]  [BUGGY]  n.removeChild(type,  prev,  arrayFoldedChildren);  [CE]  cannot  find  symbol  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(type,  prev,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(type,  prev,  arrayFoldedChildren);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  type	13	None	replace
638	[BUG]  [BUGGY]  n.removeChild(rootNode,  prev,  arrayFoldedChildren);  [CE]  cannot  find  symbol  rootNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(rootNode,  prev,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(rootNode,  prev,  arrayFoldedChildren);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  rootNode	13	None	replace
639	[BUG]  [BUGGY]  n.removeChild(right,  prev,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  prev,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  prev,  arrayFoldedChildren);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
640	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(arrayStringNode);	  n.removeChild(prev);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	143	None	replace
641	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);  n.removeChild(arrayStringNode);	  n.removeChild(prev);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	143	None	replace
642	[BUG]  [BUGGY]  n.removeChild(functionName);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  n.removeChild(oldStringNode);	  n.removeChild(prev);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	143	None	replace
643	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size());  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size());	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	120	None	replace
644	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size());  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(arrayFoldedChildren.size());	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	120	None	replace
645	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
646	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
647	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
648	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
649	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
650	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	44	2	add
651	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	44	None	add
652	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  If(originalSize  >=  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  If(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    If(originalSize  >=  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	44	None	add
653	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  [Delete]  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  [Delete]  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  [Delete]  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ')'  expected	44	None	add
654	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	44	3	add
655	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	44	3	add
656	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(prev);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
657	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
658	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(oldStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(oldStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
659	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
660	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(sb.toString());  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(sb.toString());	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
661	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(initialSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(initialSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
662	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(relativeSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(relativeSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(relativeSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
663	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
664	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
665	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.replaceChild(n);  n.getParent().removeChild(n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.replaceChild(n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.replaceChild(n);  n.getParent().removeChild(n);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	36	None	add
666	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.getParent().removeChild(n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.getParent().removeChild(n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
667	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.getParent().removeChild(n);  n.getParent().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.getParent().removeChild(n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.getParent().removeChild(n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
668	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
669	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
670	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
671	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
672	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(labelNode);  [CE]  cannot  find  symbol  labelNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().removeChild(labelNode);	  	non-compiled	[CE]  cannot  find  symbol  labelNode	36	None	add
673	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getNext().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getNext().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
674	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getNext().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getNext().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getNext().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
675	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	147	None	replace
676	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
677	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
678	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
679	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	1	3	add
681	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	1	3	add
682	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
683	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	add
684	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.getParent().replaceChild(n,  foldedStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	1	None	add
685	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  Node  prev  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	1	None	add
686	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(new  StringBuilder(sb.toString()));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(new  StringBuilder(sb.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(new  StringBuilder(sb.toString()));	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	add
687	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  n.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	35	None	replace
688	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  n.getParent();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  n  =  n.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	35	None	replace
689	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
690	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  n.getParent();  [CE]  cannot  find  symbol  arrayStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  Node  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  Node  n  =  n.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	35	None	replace
691	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);  Node  n  =  arrayFoldedChildren.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	35	None	replace
692	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  emptyStringNode.getParent();  [CE]  cannot  find  symbol  node  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  n  =  emptyStringNode.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
693	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
694	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >=  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
695	[BUG]  [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  0)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  ||  foldedSize  >  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
696	[BUG]  [BUGGY]  parent!=  if(originalSize!=  0)  {  reportError();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  parent!=  if(originalSize!=  0)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	parent!=  if(originalSize!=  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
697	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
698	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
699	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
700	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
701	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
702	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
703	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	24	2	add
704	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	24	2	add
705	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
706	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
707	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
708	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
709	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
710	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
711	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
712	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
713	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	80	None	replace
714	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).size();	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	80	None	replace
715	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	80	None	replace
716	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  1)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  1)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	80	None	replace
717	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  >=  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  >=  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	80	None	replace
718	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n).size();  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n).size();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n).size();	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  int  cannot  be  dereferenced	80	None	replace
719	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
720	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	86	None	replace
721	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  inlineCostEstimator);  [CE]  cannot  find  symbol  inlineCostEstimator  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  inlineCostEstimator);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  inlineCostEstimator);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  inlineCostEstimator	86	None	replace
722	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  oldStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	86	None	replace
723	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
724	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
725	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
726	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
727	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
728	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
729	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
730	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
731	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
732	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
733	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
734	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
735	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
736	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
737	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
738	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
739	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
740	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
741	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
742	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
743	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
744	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
745	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
746	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
747	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
748	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
749	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
750	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
751	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
752	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
753	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	101	None	add
754	[BUG]  [BUGGY]  Node  prev  =  n.getParent();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	98	None	replace
755	[BUG]  [BUGGY]  node.removeChild(n);  Node  prev  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
756	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  prev  =  n.getParent();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	98	None	replace
757	[BUG]  [BUGGY]  n.removeChild(sb.toString());  Node  prev  =  n.getParent();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(sb.toString());  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString());  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
758	[BUG]  [BUGGY]  n.removeChild(n);  Node  prev  =  n.getParent();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	98	None	replace
759	[BUG]  [BUGGY]  node.removeChild(n);  Node  prev  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  prev  =  n.getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  prev  =  n.getNext();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
760	[BUG]  [BUGGY]  if(originalSize!=  0)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(emptyStringNode,    0,    foldedSize,    originalSize);    }    	non-compiled	[CE]  orphaned  case	65	None	replace
761	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(rightStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(rightStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(rightStringNode);	  n.removeChild(prev);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	2	None	replace
762	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  n.removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(callTarget);  n.removeChild(callTarget);	  n.removeChild(prev);    n.removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
763	[BUG]  [BUGGY]  n.removeChild(callTarget);  n.removeChild(callTarget);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(callTarget);  n.removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(callTarget);  n.removeChild(callTarget);	  n.removeChild(prev);    n.removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
764	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedChildren.get(0));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(prev);    n.removeChild(prev);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
765	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(oldStringNode,    0,    foldedSize,    originalSize);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
766	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(oldStringNode,    0,    foldedSize,    originalSize);    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	replace
767	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(emptyStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(oldStringNode,    0,    foldedSize,    originalSize);    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	replace
768	[BUG]  [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  arrayFoldedChildren,  prev);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
769	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  functionName);  [CE]  cannot  find  symbol  leftStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  functionName);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	15	None	replace
770	[BUG]  [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  arrayFoldedChildren,  leftStringNode);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	15	None	replace
771	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
772	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
773	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  node);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().replaceChild(n,  node);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().replaceChild(n,  node);	  	non-compiled	[CE]  cannot  find  symbol  node	36	None	add
774	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.replaceChild(n,  n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);        n.getParent().removeChild(n);    n.replaceChild(n,  n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
775	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.replaceChild(n,  n);  n.getParent().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.replaceChild(n,  n);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.replaceChild(n,  n);  n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	add
776	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	1	None	add
777	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(prev).copyInformationFrom(originalSize);  [CE]  void  cannot  be  dereferenced  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(prev).copyInformationFrom(originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev).copyInformationFrom(originalSize);	  	non-compiled	[CE]  void  cannot  be  dereferenced	1	None	add
778	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
779	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(prev);  n.removeChild(nameNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(prev);  n.removeChild(nameNode);	  	non-compiled	[CE]  cannot  find  symbol  nameNode	1	None	add
780	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	139	None	replace
781	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  first);  [CE]  cannot  find  symbol  first  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  first);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  first	139	None	replace
782	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  wrappedSize);  [CE]  cannot  find  symbol  wrappedSize  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  wrappedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  wrappedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  wrappedSize	139	None	replace
783	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  reverse);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  reverse);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  reverse	139	None	replace
784	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  n);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	121	None	replace
785	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	121	None	replace
786	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
787	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
788	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
789	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
790	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
791	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
792	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(n);  Node  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(n);  Node  n  =  n.getParent();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
793	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
794	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
795	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	73	None	add
796	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if  [CE]  '('  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if	  	non-compiled	[CE]  '('  expected	73	None	add
797	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	73	None	add
798	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  prev);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
799	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  leftStringNode);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	154	None	replace
800	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  parent);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  parent);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  parent	154	None	replace
801	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize,  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
802	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	88	None	replace
803	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  originalSize);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
804	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
805	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	24	2	add
806	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	122	None	replace
807	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren);  n.removeChild(arrayNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren);  n.removeChild(arrayNode);	  n.removeChild(n);    n.removeChild(labelNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	122	None	replace
808	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  Node  originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  Node  originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    Node  originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	71	None	add
809	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  foldSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  foldSize  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  ==  0  ||  foldSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  ==  0  ||  foldSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  foldSize	71	None	add
810	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	71	None	add
811	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(2));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(2));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
812	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(2));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get(2));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get(2));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	114	3	add
813	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get0);  [CE]  cannot  find  symbol  get0  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  n.removeChild(arrayFoldedChildren.get0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    n.removeChild(arrayFoldedChildren.get0);	  	non-compiled	[CE]  cannot  find  symbol  get0	114	None	add
814	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
815	[BUG]  [BUGGY]  if(emptyStringNode  ==  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode  ==  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode  ==  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
816	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(name);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(name);	  n.removeChild(prev);    n.removeChild(name);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
817	[BUG]  [BUGGY]  if(oldStringNode  ==  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  oldStringNode  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	110	None	replace
818	[BUG]  [BUGGY]  if(n  ==  0)  {  reportCodeChange();  }  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  incomparable  types:  Node  and  int	110	None	replace
819	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	152	None	replace
820	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb.toString());  [CE]  no  suitable  method  found  for  getCost(Node,String)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  sb.toString());	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,String)	152	None	replace
821	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  parent);  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  parent);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  parent	152	None	replace
822	[BUG]  [BUGGY]  if(relativeSize!=  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  relativeSize  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(relativeSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(relativeSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  cannot  find  symbol  relativeSize	103	None	replace
823	[BUG]  [BUGGY]  if(emptyStringNode!=  0)  {  reportCodeChange();  }  [CE]  incomparable  types:  Node  and  int  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  incomparable  types:  Node  and  int	103	None	replace
824	[BUG]  [BUGGY]  if(oldStringNode!=  null)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	103	None	replace
825	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  Node.newString( "   ");  n.removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  Node.newString( "   ");  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  Node.newString( "   ");  n.removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
826	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
827	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
828	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
829	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(arrayNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.get(arrayNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
830	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  arrayFoldedChildren);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
831	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  initialSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  initialSize);	  n.removeChild(type,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	17	None	replace
832	[BUG]  [BUGGY]  n.getParent().removeChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(parent,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(parent,  emptyStringNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  parent	133	None	replace
833	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(functionName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(functionName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
834	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(prev);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(prev);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	add
835	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(labelNode);  [CE]  cannot  find  symbol  labelNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(labelNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(labelNode);	  	non-compiled	[CE]  cannot  find  symbol  labelNode	95	None	add
836	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(prev,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(prev,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
837	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(prev,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  n.removeChild(prev);  NodeUtil.removeChild(prev,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    n.removeChild(prev);  NodeUtil.removeChild(prev,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	95	3	add
838	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
839	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
840	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
841	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	60	2	add
842	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  sb.toString());  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  sb.toString());	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
843	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldedStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  foldedStringNode);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
844	[BUG]  [BUGGY]  if(relativeSize  ==  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  relativeSize  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(relativeSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(relativeSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  relativeSize	82	None	replace
845	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	123	None	replace
846	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	                n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
847	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
848	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(partialStringNode);  [CE]  cannot  find  symbol  partialStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(partialStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(partialStringNode);	  	non-compiled	[CE]  cannot  find  symbol  partialStringNode	84	None	add
849	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getNext().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	                n.getParent().removeChild(prev);    n.getNext().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
850	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getNext().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getNext().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getNext().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	add
851	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n)-  1;  if(originalSize  <  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n)-  1;  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n)-  1;  if(originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
852	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
853	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
854	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	69	None	add
855	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	79	None	replace
856	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  if(originalSize  ==  1)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	79	None	replace
857	[BUG]  [BUGGY]  n.removeChild(arrayNode,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
858	[BUG]  [BUGGY]  n.removeChild(arrangementFoldedChildren,  prev);  [CE]  cannot  find  symbol  arrangementFoldedChildren  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrangementFoldedChildren,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrangementFoldedChildren,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrangementFoldedChildren	13	None	replace
859	[BUG]  [BUGGY]  n.removeChild(analyzedStringNode,  prev);  [CE]  cannot  find  symbol  analyzedStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(analyzedStringNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(analyzedStringNode,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  analyzedStringNode	13	None	replace
860	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  leftStringNode);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	125	None	replace
861	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  reverse);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  reverse);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  reverse	125	None	replace
862	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  oldStringNode);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	125	None	replace
863	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  0);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  0);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	replace
864	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  null);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  null);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).replaceChild(n,    n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	replace
865	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	61	None	replace
866	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
867	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	junit.framework.AssertionFailedError:  Expected:  x=[].join(   "!=  junit.framework.AssertionFailedError:  Expected:  x=[].join( "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	61	None	replace
868	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  parent.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  parent.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  parent.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	141	None	replace
869	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
870	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);  n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
871	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
872	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	add
873	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(name);  n.removeChild(functionName);  [CE]  cannot  find  symbol  name  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(name);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(name);  n.removeChild(functionName);	  	non-compiled	[CE]  cannot  find  symbol  name	8	None	add
874	[BUG]  [BUGGY]  n.getParent().removeChild(leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(leftStringNode);	          n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	85	None	replace
875	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(callTarget);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
876	[BUG]  [BUGGY]  n.getParent().removeChild(callTarget);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(callTarget);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(callTarget);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
877	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(right);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
878	[BUG]  [BUGGY]  n.getParent().removeChild(right);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(right);	          n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	85	3	replace
879	[BUG]  [BUGGY]  n.detachChildren();  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
880	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(initialSize);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.get(initialSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.get(initialSize);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
881	[BUG]  [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.remove(arrayStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node  n  =  arrayFoldedChildren.remove(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node  n  =  arrayFoldedChildren.remove(arrayStringNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	add
882	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getParent().cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getParent().cloneTree();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getParent().cloneTree();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
883	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getParent()  +  1;  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getParent()  +  1;  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getParent()  +  1;	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
884	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getPrev();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getPrev();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getPrev();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
885	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
886	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
887	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.replaceChild(prev);  n.getParent().removeChild(prev);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.replaceChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.replaceChild(prev);  n.getParent().removeChild(prev);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	add
888	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  prev);  [CE]  cannot  find  symbol  leftStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	96	None	replace
889	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	96	None	replace
890	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  NodeUtil.removeChild(n,  leftStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	96	None	replace
891	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.getFirstChild());  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.getFirstChild());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.getFirstChild());	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
892	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.getFirstChild();	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	38	None	replace
893	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n).copyInformationFrom(prev);  [CE]  int  cannot  be  dereferenced  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n).copyInformationFrom(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n).copyInformationFrom(prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	149	None	replace
894	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(newSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(newSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(newSize);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
895	[BUG]  [BUGGY]  n.removeChild(nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(nameNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(nameNode);	  n.removeChild(prev);    n.removeChild(nameNode);    	non-compiled	[CE]  cannot  find  symbol  nameNode	97	None	replace
896	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
897	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
898	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
899	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	add
900	[BUG]  [BUGGY]  InlineCostEstimator  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator  n  =  n.getParent();	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	75	None	replace
901	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().removeChild(emptyStringNode);	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize    ==    0)    {    reportCodeChange();    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	75	3	replace
902	[BUG]  [BUGGY]  n.getParent().removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(emptyStringNode);	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    if(originalSize    ==    0)    {    reportCodeChange();    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	75	3	replace
903	[BUG]  [BUGGY]  n.removeChild(right,  prev);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  prev);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  prev);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	142	None	replace
904	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	142	None	replace
905	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.toString());  [CE]  cannot  find  symbol  leftStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.removeChild(arrayFoldedChildren.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	142	None	replace
906	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    junit.framework.AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  not  a  statement	58	None	add
907	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.removeFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.removeFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.removeFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
908	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	53	None	replace
909	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	33	None	replace
910	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(arrayStringNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	33	None	replace
911	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent);  n.removeChild(arrayStringNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	33	None	replace
912	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  Node  prev  =  n.getParent();  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	98	None	replace
913	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  prev  =  n.getParent();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	98	None	replace
914	[BUG]  [BUGGY]  n.removeChild(rootNode);  Node  prev  =  n.getParent();  [CE]  cannot  find  symbol  rootNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(rootNode);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(rootNode);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  rootNode	98	None	replace
915	[BUG]  [BUGGY]  n.removeChild(right);  Node  prev  =  n.getParent();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	98	None	replace
916	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  Node  n  =  arrayFoldedChildren.remove(0);	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.remove(0);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	34	None	replace
917	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(right);	  n.removeChild(left);    	compilable	  [FE]  AssertionFailedError  	136	3	replace
918	[BUG]  [BUGGY]  n.removeChild(right);  [FE]  AssertionFailedError  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right);	  n.removeChild(left);    	compilable	  [FE]  AssertionFailedError  	136	3	replace
919	[BUG]  [BUGGY]  n.removeChild(initialStringNode);  [CE]  cannot  find  symbol  initialStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(initialStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(initialStringNode);	  n.removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  initialStringNode	136	None	replace
920	[BUG]  [BUGGY]  n.removeChild(innerStringNode);  [CE]  cannot  find  symbol  innerStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(innerStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(innerStringNode);	  n.removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  innerStringNode	136	None	replace
921	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
922	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	add
923	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	20	None	add
924	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
925	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(t.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(t.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(t.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
926	[BUG]  [BUGGY]  int  kJoinOverhead  =  arrayFoldedren.getChildCount();  [CE]  cannot  find  symbol  arrayFoldedren  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  arrayFoldedren.getChildCount();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  arrayFoldedren.getChildCount();	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedren	92	None	replace
927	[BUG]  [BUGGY]  int  kJoinOverhead  =  arrayFoldedParent.getChildCount();  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  arrayFoldedParent.getChildCount();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  arrayFoldedParent.getChildCount();	  int    kJoinOverhead    =    n.getChildCount();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	92	None	replace
928	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  node.removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  node.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  node.removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  node	117	None	add
929	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(n);  n.removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(n);  n.removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	117	None	add
930	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  leftStringNode);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	126	None	replace
931	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  emptyStringNode);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	126	None	replace
932	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  first);  [CE]  cannot  find  symbol  first  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  first);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  first	126	None	replace
933	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  reverse);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  reverse);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  reverse	126	None	replace
934	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
935	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent.toString());  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	40	None	replace
936	[BUG]  [BUGGY]  n.removeChild(leftStringNode.toString());  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	40	None	replace
937	[BUG]  [BUGGY]  n.removeChild(arrayNode.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
938	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
939	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	add
940	[BUG]  [BUGGY]  arrayFoldedren.remove(emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedren  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  arrayFoldedren.remove(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	arrayFoldedren.remove(emptyStringNode);	  if(originalSize    ==    0)    {    reportCodeChange();    }    If(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedren	81	None	replace
941	[BUG]  [BUGGY]  if(flaidSize!=  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  flaidSize  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(flaidSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(flaidSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  flaidSize	99	None	replace
942	[BUG]  [BUGGY]  if(oldStringNode!=  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	99	None	replace
943	[BUG]  [BUGGY]  Node  node  =  node.removeChild(prev);  [CE]  incompatible  types  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  node  =  node.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  node  =  node.removeChild(prev);	  n.removeChild(prev);    node.removeChild(prev);    	non-compiled	[CE]  incompatible  types	7	None	replace
944	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  leftStringNode);	  n.removeChild(arrayFoldedChildren,    first);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	128	None	replace
945	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	44	None	add
946	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >=    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).size();	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	44	None	add
947	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(prev,  sb.toString()));  [CE]  no  suitable  constructor  found  for  StringBuilder(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(prev,  sb.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(prev,  sb.toString()));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(Node,String)	68	None	replace
948	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  suffix));  [CE]  cannot  find  symbol  suffix  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()  +  suffix));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()  +  suffix));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  cannot  find  symbol  suffix	68	None	replace
949	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldingStringNode);  [CE]  cannot  find  symbol  foldingStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldingStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldingStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldingStringNode	124	None	replace
950	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
951	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
952	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange	  	non-compiled	[CE]  ';'  expected	76	None	add
953	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
954	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	76	2	add
955	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
956	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
957	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	76	None	add
958	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	76	None	add
959	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(oldStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	153	None	replace
960	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(new  StringBuffer(prev));  [CE]  no  suitable  constructor  found  for  StringBuffer(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(new  StringBuffer(prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(new  StringBuffer(prev));	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuffer(Node)	153	None	replace
961	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
962	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	add
963	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
964	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
965	[BUG]  [BUGGY]  node.removeChild(arrayFoldedChildren);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  node	144	None	replace
966	[BUG]  [BUGGY]  n.removeChild(right,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right,  arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
967	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(oldStringNode);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);  n.removeChild(oldStringNode);	  n.removeChild(prev);    n.removeChild(first);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	6	None	replace
968	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(right);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
969	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(right);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
970	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(oldStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(oldStringNode);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	4	None	replace
971	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(rightStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(rightStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(rightStringNode);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	4	None	replace
972	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(');  [CE]  unclosed  character  literal  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(');  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(');	  	non-compiled	[CE]  unclosed  character  literal	30	None	add
973	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(n);  n.removeChild(new  String(prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(n);  n.removeChild(new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	30	None	add
974	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n)  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  InlineCostEstimator.getCost(n)  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	InlineCostEstimator.getCost(n)  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	138	None	replace
975	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  arrayFoldedNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	50	None	replace
976	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	50	None	replace
977	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
978	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
979	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize!=  1)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  if(originalSize!=  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  if(originalSize!=  1)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	28	None	replace
980	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	119	None	replace
981	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent);  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	31	None	replace
982	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild().getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild().getParent();	  Node    arrayFoldedChildren    =    n.getLastChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	51	None	replace
983	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize  +  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldedSize  +  1);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
984	[BUG]  [BUGGY]  if(emptyStringNode  ==  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode  ==  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode  ==  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	57	None	replace
985	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(n);  [CE]  cannot  find  symbol  leftStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode);  n.getParent().removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);  n.getParent().removeChild(n);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	37	None	replace
986	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayFoldedNode);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	37	None	replace
987	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	90	None	replace
988	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  first);  [CE]  cannot  find  symbol  first  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  first);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize,  first);	  n.removeChild(arrayFoldedChildren.size()    -    1-1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  first	90	None	replace
989	[BUG]  [BUGGY]  if(emptyStringNode  >  0)  {  reportCodeChange();  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	106	None	replace
990	[BUG]  [BUGGY]  if(flaidSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  flaidSize  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(flaidSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(flaidSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  flaidSize	106	None	replace
991	[BUG]  [BUGGY]  if(flippedSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  flippedSize  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(flippedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(flippedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  flippedSize	106	None	replace
992	[BUG]  [BUGGY]  n.replaceChild(arrayFoldedChildren,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(arrayFoldedChildren,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(arrayFoldedChildren,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
993	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.replaceChild(emptyStringNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
994	[BUG]  [BUGGY]  n.replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.replaceChild(emptyStringNode,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
995	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  NodeUtil.replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	NodeUtil.replaceChild(n,  emptyStringNode);	  parent.replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
996	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  AssertionFailedError  	47	3	replace
997	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [FE]  AssertionFailedError  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  AssertionFailedError  	47	3	replace
998	[BUG]  [BUGGY]  if(prev!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(prev!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(prev!=  null)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(sb,    n,    foldedSize,    originalSize);    }    	non-compiled	[CE]  orphaned  case	64	None	replace
999	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1000	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1001	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1002	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1003	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	56	None	add
1004	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1005	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1006	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1007	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  return  n;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  return  n;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	56	2	add
1008	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	56	2	add
1009	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	56	2	add
1010	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayFoldedChildren.size()  -  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayFoldedChildren.size()  -  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  arrayFoldedChildren.size()  -  2);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	140	None	replace
1011	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    int    originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	113	None	replace
1012	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	78	2	add
1013	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	78	2	add
1014	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	78	None	add
1015	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	78	None	add
1016	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  +  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize  +  1);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
1017	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
1018	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  leftStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	86	None	replace
1019	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalStringNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n  =  n.getParent();	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	compilable	  [FE]  AssertionFailedError  	151	3	replace
1021	[BUG]  [BUGGY]  n  =  n.getParent();  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n  =  n.getParent();	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	compilable	  [FE]  AssertionFailedError  	151	3	replace
1022	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(parent);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(parent);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
1023	[BUG]  [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1024	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize  +  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize  +  1);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	89	None	replace
1025	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(parent,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	49	None	add
1026	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	49	None	add
1027	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(  emptyStringNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
1028	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(  emptyStringNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
1029	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
1030	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	49	3	add
1031	[BUG]  [BUGGY]  n.removeChild(rightStringNode);  [CE]  cannot  find  symbol  rightStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(rightStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(rightStringNode);	  n.removeChild(leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  rightStringNode	55	None	replace
1032	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	116	None	replace
1033	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.remove(0);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	116	None	replace
1034	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(n,  arrayFoldedChildren.size()  -  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(n,  arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(n,  arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	116	None	replace
1035	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  n  =  arrayFoldedChildren.get(0);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	116	None	replace
1036	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  ArrayBuilders.toString(arrayFoldedChildren);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  ArrayBuilders.toString(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  ArrayBuilders.toString(arrayFoldedChildren);	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1037	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  sb.toString(prev);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  sb.toString(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  sb.toString(prev);	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1038	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  sb.removeFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  sb.removeFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  sb.removeFirstChild();	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1039	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  parent.toString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  parent.toString();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  parent.toString();	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1040	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(initialSize));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(initialSize));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(initialSize));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
1041	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1042	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1043	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	101	None	add
1044	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  RuntimeException  	101	3	add
1045	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  RuntimeException  	101	3	add
1046	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1047	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1048	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.removeChild(functionName);  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.removeChild(functionName);	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
1049	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().removeChild(functionName);  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getParent().removeChild(functionName);	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
1050	[BUG]  [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().replaceChild(functionName,  n);  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  Node  functionName  =  n.getParent().replaceChild(functionName,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    Node  functionName  =  n.getParent().replaceChild(functionName,  n);	  	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
1051	[BUG]  [BUGGY]  if(n!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	23	None	replace
1052	[BUG]  [BUGGY]  n.removeChild(arrayFoldedren.size()  -  1);  [CE]  cannot  find  symbol  arrayFoldedren  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedren.size()  -  1);	  if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedren	45	None	replace
1053	[BUG]  [BUGGY]  if(oldStringNode!=  0)  {  reportError();  }  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  0)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	46	None	replace
1054	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	57	None	replace
1055	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	57	None	replace
1056	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1057	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1058	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(emptyStringNode!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	replace
1059	[BUG]  [BUGGY]  if(emptyStringNode!=  null)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	replace
1060	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  n.getNext();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  n  =  n.getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  n  =  n.getNext();	  n.removeChild(n);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	35	None	replace
1061	[BUG]  [BUGGY]  x=[].join(   "  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  x=[].join(   "  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	x=[].join(   "	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
1062	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    If(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	62	None	replace
1063	[BUG]  [BUGGY]  n.removeChild(last);  [CE]  cannot  find  symbol  last  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(last);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(last);	  n.removeChild(functionName);    	non-compiled	[CE]  cannot  find  symbol  last	67	None	replace
1064	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(emptyStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1065	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(inemptiveStringNode);  [CE]  cannot  find  symbol  inemptiveStringNode  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  sb.toString().copyInformationFrom(inemptiveStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	sb.toString().copyInformationFrom(inemptiveStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  inemptiveStringNode	153	None	replace
1066	[BUG]  [BUGGY]  if(prev!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(prev!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(prev!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	25	None	replace
1067	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	25	None	replace
1068	[BUG]  [BUGGY]  if(sb!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(sb!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(sb!=  null)  {  if(originalSize!=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	25	None	replace
1069	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  wrappedSize,  originalSize);  [CE]  cannot  find  symbol  wrappedSize  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  wrappedSize,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  wrappedSize,  originalSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  wrappedSize	11	None	replace
1070	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  removedSize);  [CE]  cannot  find  symbol  removedSize  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  removedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  removedSize);	  n.removeChild(arrayFoldedChildren,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  removedSize	11	None	replace
1071	[BUG]  [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  kJoinOverhead)  {  reportError();  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  kJoinOverhead)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  ||  foldedSize  >  kJoinOverhead)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	46	None	replace
1072	[BUG]  [BUGGY]  if(originalSize!=  0  &&  n.getType()  ==  Token.STRING)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  &&  n.getType()  ==  Token.STRING)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  &&  n.getType()  ==  Token.STRING)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
1073	[BUG]  [BUGGY]  if(originalSize!=  0  &&  n.getType()  ==  Token.NAME)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  &&  n.getType()  ==  Token.NAME)  {  reportError();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  &&  n.getType()  ==  Token.NAME)  {  reportError();  }	  if(originalSize!=    0)    {    reportError();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
1074	[BUG]  [BUGGY]  n.removeChild(arrayPoldedNode,  prev);  [CE]  cannot  find  symbol  arrayPoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayPoldedNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayPoldedNode,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayPoldedNode	13	None	replace
1075	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	13	None	replace
1076	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent,  prev);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent,  prev);	  n.removeChild(prev,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	13	None	replace
1077	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size(),  sb.toString());	  n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
1078	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	78	None	add
1079	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
1080	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	78	2	add
1081	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(  FoldedSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  FoldedSize  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(  FoldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(  FoldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  FoldedSize	60	None	add
1082	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
1083	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  1)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  1)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	60	2	add
1084	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	56	None	add
1085	[BUG]  [BUGGY]  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  while(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  while(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	timeout	56	1	add
1086	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  while(originalSize  >  0)  {  reportCodeChange();  }  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  while(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  while(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	timeout	56	1	add
1087	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(arrayFoldedNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(arrayFoldedNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
1088	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(exp);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(exp);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(exp);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	149	None	replace
1089	[BUG]  [BUGGY]  Node  arrayFoldedParent  =  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedParent  =  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedParent  =  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	148	None	replace
1090	[BUG]  [BUGGY]  node.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedNode);	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	148	None	replace
1091	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedParent  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	Node  arrayFoldedParent  =  n.getParent();	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	compilable	  [FE]  AssertionFailedError  	148	3	replace
1092	[BUG]  [BUGGY]  Node  arrayFoldedParent  =  n.getParent();  [FE]  AssertionFailedError  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedParent  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedParent  =  n.getParent();	  n.removeChild(n);    n.removeChild(arrayFoldedParent);    	compilable	  [FE]  AssertionFailedError  	148	3	replace
1093	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(parent,  prev);  [CE]  cannot  find  symbol  parent  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(parent,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(parent,  prev);	  	non-compiled	[CE]  cannot  find  symbol  parent	84	None	add
1094	[BUG]  [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(peekNode);  [CE]  cannot  find  symbol  peekNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]          n.getParent().removeChild(prev);  n.getParent().removeChild(peekNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	                n.getParent().removeChild(prev);    n.getParent().removeChild(peekNode);	  	non-compiled	[CE]  cannot  find  symbol  peekNode	84	None	add
1095	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  {  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  if(originalSize  {  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    if(originalSize  {  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ')'  expected	71	None	add
1096	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	79	None	replace
1097	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	79	None	replace
1098	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	79	None	replace
1099	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  originalSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  originalSize);	  n.removeChild(type,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	17	None	replace
1100	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  wrappedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  wrappedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  wrappedSize);	  n.removeChild(type,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	17	None	replace
1101	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  right);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode,  right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode,  right);	  n.removeChild(arrayFoldedChildren,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
1102	[BUG]  [BUGGY]  Node  node  =  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  node  =  n.removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  node  =  n.removeChild(arrayFoldedNode);	  n.removeChild(n);    node.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	39	None	replace
1103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(n.getType()  ==  Token.STRING)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	74	None	replace
1104	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	74	None	replace
1105	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  if(originalSize  ==  1)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	74	None	replace
1106	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
1107	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	76	2	add
1108	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	76	None	add
1109	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	76	None	add
1110	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();	  	non-compiled	[CE]  orphaned  case	76	None	add
1111	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	76	None	add
1112	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  foldedSize)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=  foldedSize)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(emptyStringNode,    0,    foldedSize,    originalSize);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	65	2	replace
1113	[BUG]  [BUGGY]  if(originalSize!=  foldedSize)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  foldedSize)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  foldedSize)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(emptyStringNode,    0,    foldedSize,    originalSize);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	65	2	replace
1114	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	141	None	replace
1115	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.size();  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.size();  n.removeChild(right,  arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.size();  n.removeChild(right,  arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	141	None	replace
1116	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren.size()  -  1);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren.size()  -  1);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	141	None	replace
1117	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    <    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	69	2	add
1118	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	69	2	add
1119	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  <  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  int  originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    int  originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	69	None	add
1120	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  Node  originalSize  <  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  Node  originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    <    0)    {    reportCodeChange();    }    Node  originalSize  <  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	69	None	add
1121	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(exp);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(exp);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(exp);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	150	None	replace
1122	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize,  oldStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	89	None	replace
1123	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    NodeUtil.removeChild(prev);  NodeUtil.removeChild(n,  prev);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	add
1124	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(prev);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  NodeUtil.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    NodeUtil.removeChild(prev);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	95	None	add
1125	[BUG]  [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    NodeUtil.removeChild(n,  prev);  Node  prev  =  n.getFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        NodeUtil.removeChild(n,    prev);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	95	None	add
1126	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  NodeUtil.removeChild(n,  emptyStringNode);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	96	None	replace
1127	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent);  NodeUtil.removeChild(n,  prev);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent);  NodeUtil.removeChild(n,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent);  NodeUtil.removeChild(n,  prev);	  n.removeChild(prev);    NodeUtil.removeChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	96	None	replace
1128	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(0));  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(0));	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	114	None	add
1129	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(1));  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));    Node  arrayFoldedChildren  =  n.removeChild(arrayFoldedChildren.get(1));	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	114	None	add
1130	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize  +  1));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize  +  1));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize  +  1));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
1131	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(inlineStringNode));	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
1132	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize),  prev);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize),  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(originalSize),  prev);	          StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
1133	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.size()  -  2);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.size()  -  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.size()  -  2);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1134	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  wrappedSize  -  2);  [CE]  cannot  find  symbol  wrappedSize  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  wrappedSize  -  2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  wrappedSize  -  2);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  cannot  find  symbol  wrappedSize	140	None	replace
1135	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.cloneTarget());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.cloneTarget());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode.cloneTarget());	  n.removeChild(arrayFoldedChildren.size()    -    1    -    2);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1136	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(right,  arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	144	None	replace
1137	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.remove(0);  n.removeChild(left,  arrayFoldedChildren);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	144	None	replace
1138	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  type);  [CE]  cannot  find  symbol  type  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  type);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  type);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  type	125	None	replace
1139	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  removedStringNode);  [CE]  cannot  find  symbol  removedStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev,  removedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev,  removedStringNode);	  n.removeChild(arrayFoldedChildren,    prev);    	non-compiled	[CE]  cannot  find  symbol  removedStringNode	125	None	replace
1140	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  1)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
1141	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  1)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  1)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
1142	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  <  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
1143	[BUG]  [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  <  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        >        0)        {        reportCodeChange();        }        if(originalSize    >    0)    {    reportCodeChange();    }    else    if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  <  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	58	2	add
1144	[BUG]  [BUGGY]  n.removeChild(analyzedStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  cannot  find  symbol  analyzedStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(analyzedStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(analyzedStringNode);  n.removeChild(arrayFoldedChildren.size()  -  1);	  n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  analyzedStringNode	116	None	replace
1145	[BUG]  [BUGGY]  n.removeChild(arrayNode,  functionName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode,  functionName);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
1146	[BUG]  [BUGGY]  n.removeChild(leftStringNode,  functionName,  arrayFoldedChildren);  [CE]  cannot  find  symbol  leftStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(leftStringNode,  functionName,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode,  functionName,  arrayFoldedChildren);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	15	None	replace
1147	[BUG]  [BUGGY]  n.removeChild(arrayStringNode,  functionName);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode,  functionName);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	15	None	replace
1148	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent,  functionName);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent,  functionName);	  n.removeChild(functionName,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	15	None	replace
1149	[BUG]  [BUGGY]  n.removeChild(arrayFoldedPoldNode);  [CE]  cannot  find  symbol  arrayFoldedPoldNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedPoldNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedPoldNode);	  n.removeChild(analyzedStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedPoldNode	134	None	replace
1150	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  leftStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  leftStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  leftStringNode);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
1151	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  wrappedStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  wrappedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  wrappedStringNode);	  n.removeChild(oldStringNode,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
1152	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(sb.toString());  n.removeChild(prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(sb.toString());  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(sb.toString());  n.removeChild(prev);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	add
1153	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(name);  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(name);  n.removeChild(name);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(name);  n.removeChild(name);	  	non-compiled	[CE]  cannot  find  symbol  name	1	None	add
1154	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(first);  n.removeChild(prev);  [CE]  cannot  find  symbol  first  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(first);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(first);  n.removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  first	1	None	add
1155	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(name);  n.removeChild(nameNode);  [CE]  cannot  find  symbol  name  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(prev);  n.removeChild(name);  n.removeChild(nameNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(prev);    n.removeChild(name);  n.removeChild(nameNode);	  	non-compiled	[CE]  cannot  find  symbol  name	1	None	add
1156	[BUG]  [BUGGY]  n.detachChild(arrayFoldedChildren.get(0));  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChild(arrayFoldedChildren.get(0));	  n.removeChild(arrayFoldedChildren.get(0));    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1157	[BUG]  [BUGGY]  n.removeChild(arrayPoldedNode);  [CE]  cannot  find  symbol  arrayPoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayPoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayPoldedNode);	  n.removeChild(n);    n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayPoldedNode	147	None	replace
1158	[BUG]  [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  right  =  arrayFoldedChildren.remove(0);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  right  =  arrayFoldedChildren.remove(0);	  n.removeChild(prev);    n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	146	None	replace
1159	[BUG]  [BUGGY]  int  prev  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  prev  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  prev  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
1160	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(arrayFoldedNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(arrayFoldedNode);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	replace
1161	[BUG]  [BUGGY]  node.removeChild(arrayFoldedChildren.getFirstChild());  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedChildren.getFirstChild());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedChildren.getFirstChild());	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1162	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayPoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.removeChild(arrayPoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.removeChild(arrayPoldedNode);	  n.removeChild(n);    n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	118	None	replace
1163	[BUG]  [BUGGY]  Annotation  arrayFoldedren  =  n.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Annotation  arrayFoldedren  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Annotation  arrayFoldedren  =  n.getParent();	  if(originalSize    ==    0)    {    reportCodeChange();    }    If(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1164	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	101	None	add
1165	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1166	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    return    null;    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	add
1167	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  arrayNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  arrayNode);	  n.removeChild(arrayFoldedChildren,    oldStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	129	None	replace
1168	[BUG]  [BUGGY]  n.removeChild(arrayFoldedPildren);  [CE]  cannot  find  symbol  arrayFoldedPildren  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedPildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedPildren);	  n.removeChild(arrayFoldedParent);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedPildren	104	None	replace
1169	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(oldStringNode);  n.getParent().removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(oldStringNode);  n.getParent().removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(oldStringNode);  n.getParent().removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	36	None	add
1170	[BUG]  [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.getParent().removeChild(n);  n.removeChild(n);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.getParent().removeChild(n);    n.removeChild(n);  n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	36	None	add
1171	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  oldStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	86	None	replace
1172	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  arrayNode);	  n.removeChild(arrayFoldedChildren.size()    -    1,    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
1173	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  n);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
1174	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
1175	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
1176	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  null);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(arrayNode,  null);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
1177	[BUG]  [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(parent,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(parent,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	41	None	add
1178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  initialSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	int  initialSize  =  InlineCostEstimator.getCost(n);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	106	3	replace
1179	[BUG]  [BUGGY]  int  initialSize  =  InlineCostEstimator.getCost(n);  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  initialSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  initialSize  =  InlineCostEstimator.getCost(n);	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	106	3	replace
1180	[BUG]  [BUGGY]  node.removeChild(arrayFoldedChildren.get(0));  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(n);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
1181	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);	  int    originalSize    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
1182	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(emptyStringNode.getType()!=  Token.NAME)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	77	None	replace
1183	[BUG]  [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldStringNode!=  null)  {  if(originalSize  ==  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  orphaned  case	77	None	replace
1184	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange()	  	non-compiled	[CE]  ';'  expected	73	None	add
1185	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
1186	[BUG]  [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize        ==        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	73	2	add
1187	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  wrappedSize);  [CE]  cannot  find  symbol  wrappedSize  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  wrappedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  wrappedSize);	  n.removeChild(arrayFoldedChildren,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  wrappedSize	130	None	replace
1188	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayNode.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayNode.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)arrayNode.getParent();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
1189	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.removeFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =(Node)n.removeFirstChild();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.removeFirstChild();	  Node    arrayFoldedChildren    =(Node)n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	54	None	replace
1190	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedNode);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	152	None	replace
1191	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedParent);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedParent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedParent);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	152	None	replace
1192	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  originalSize);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  originalSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  originalSize);	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	152	None	replace
1193	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(functionName);  [CE]  cannot  find  symbol  left  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  n.removeChild(functionName);	  n.removeChild(prev);    n.removeChild(functionName);    	non-compiled	[CE]  cannot  find  symbol  left	9	None	replace
1194	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  emptyStringNode));  [CE]  no  suitable  constructor  found  for  StringBuilder(String,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString(),  emptyStringNode));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString(),  emptyStringNode));	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(String,Node)	68	None	replace
1195	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()),  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()),  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()),  emptyStringNode);	  n.removeChild(new    StringBuilder(sb.toString()));    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
1196	[BUG]  [BUGGY]  if(oldSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  oldSize  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(oldSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(oldSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0    ||    foldedSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  oldSize	72	None	replace
1197	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1198	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1199	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);    n.getParent().replaceChild(n,  functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1200	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(n,  functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    n.getParent().replaceChild(n,  functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1201	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(functionName,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);    n.getParent().replaceChild(functionName,  n);	  	compilable	  [FE]  RuntimeException  	66	3	add
1202	[BUG]  [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(functionName,  n);  [FE]  RuntimeException  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(functionName);  n.getParent().replaceChild(functionName,  n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);    n.getParent().replaceChild(functionName,  n);	  	compilable	  [FE]  RuntimeException  	66	3	add
1203	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayNode);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedParent);  n.removeChild(arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent);  n.removeChild(arrayNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	33	None	replace
1204	[BUG]  [BUGGY]  node.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  node.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	node.removeChild(arrayFoldedNode);  n.removeChild(arrayStringNode);	  n.removeChild(n);    n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	33	None	replace
1205	[BUG]  [BUGGY]  n.removeChild(arrangeFoldedChildren);  [CE]  cannot  find  symbol  arrangeFoldedChildren  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrangeFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrangeFoldedChildren);	  n.removeChild(oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrangeFoldedChildren	14	None	replace
1206	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  left  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  n.getParent().removeChild(prev);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  left	4	None	replace
1207	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().removeChild(right);  [CE]  cannot  find  symbol  left  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  n.getParent().removeChild(right);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  left	4	None	replace
1208	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().removeChild(p);  [CE]  cannot  find  symbol  left  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(p);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  n.getParent().removeChild(p);	  n.removeChild(prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  left	4	None	replace
1209	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(oldStringNode);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(oldStringNode);  n.removeChild(oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(oldStringNode);  n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	30	None	add
1210	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(sb.toString());  n.removeChild(n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(n);  n.removeChild(sb.toString());  n.removeChild(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(n);    n.removeChild(sb.toString());  n.removeChild(n);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	add
1211	[BUG]  [BUGGY]  if(kJoinOverhead  >  0)  {  reportCodeChange();  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(kJoinOverhead  >  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(kJoinOverhead  >  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n,    kJoinOverhead);    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	108	None	replace
1212	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(name);  n.getParent().removeChild(name);  [CE]  cannot  find  symbol  name  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(name);  n.getParent().removeChild(name);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(name);  n.getParent().removeChild(name);	  	non-compiled	[CE]  cannot  find  symbol  name	3	None	add
1213	[BUG]  [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(parent);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.getParent().removeChild(prev);  n.removeChild(parent);  n.getParent().removeChild(parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.getParent().removeChild(prev);    n.removeChild(parent);  n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
1214	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  sb.toString().replaceChild(n,  arrayFoldedChildren);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  sb.toString().replaceChild(n,  arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  sb.toString().replaceChild(n,  arrayFoldedChildren);	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1215	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  Arrays.asList(arrayFoldedChildren);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  Arrays.asList(arrayFoldedChildren);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  Arrays.asList(arrayFoldedChildren);	  Node    arrayFoldedChildren    =    sb.toString();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	52	None	replace
1216	[BUG]  [BUGGY]  n.removeChild(arrangementFoldedNode);  [CE]  cannot  find  symbol  arrangementFoldedNode  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrangementFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrangementFoldedNode);	  n.detachChildren();    	non-compiled	[CE]  cannot  find  symbol  arrangementFoldedNode	132	None	replace
1217	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  oldStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	124	None	replace
1218	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    Node.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	49	None	add
1219	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode));  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode));	  	non-compiled	[CE]  ';'  expected	49	None	add
1220	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	27	None	add
1221	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
1222	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  <  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	27	2	add
1223	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  [Delete]  0)  {  reportCodeChange();  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  [Delete]  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  [Delete]  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ')'  expected	27	None	add
1224	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
1225	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);	  parent.replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	47	3	replace
1226	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    >=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	20	None	add
1227	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev));  n.detachChildren();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev));  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(prev));  n.detachChildren();	  	non-compiled	[CE]  ';'  expected	131	None	add
1228	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev);  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(prev);  n.detachChildren();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	131	3	add
1229	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev);  n.detachChildren();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev);  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(prev);  n.detachChildren();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	131	3	add
1230	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(inlineCostEstimator));  n.detachChildren();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(inlineCostEstimator));  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(inlineCostEstimator));  n.detachChildren();	  	non-compiled	[CE]  ';'  expected	131	None	add
1231	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(originalSize);  n.detachChildren();  [CE]  method  copyInformationFrom  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(originalSize);  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(originalSize);  n.detachChildren();	  	non-compiled	[CE]  method  copyInformationFrom  in  class  Node  cannot  be  applied  to  given  types;	131	None	add
1232	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(originalSize));  n.detachChildren();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(originalSize));  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(originalSize));  n.detachChildren();	  	non-compiled	[CE]  ';'  expected	131	None	add
1233	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(removedStringNode);  n.detachChildren();  [CE]  cannot  find  symbol  removedStringNode  [FE]              AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(removedStringNode);  n.detachChildren();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(removedStringNode);  n.detachChildren();	  	non-compiled	[CE]  cannot  find  symbol  removedStringNode	131	None	add
1234	[BUG]  [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.detachChildren();  Node.newString(sb.toString()).copyInformationFrom(prev));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();    Node.newString(sb.toString()).copyInformationFrom(prev));	  	non-compiled	[CE]  ';'  expected	131	None	add
1235	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  prev  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  prev  -  1);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  prev  -  1);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	123	None	replace
1236	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
1237	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  oldStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  oldStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	88	None	replace
1238	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  +  foldedSize,  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1    +    foldedSize);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
1239	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
1240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(prev!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(prev!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
1241	[BUG]  [BUGGY]  if(prev!=  null)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(prev!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(prev!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize    >=    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
1242	[BUG]  [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(parent);  n.removeChild(functionName);  [CE]  cannot  find  symbol  parent  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(prev);    n.removeChild(functionName);  n.removeChild(parent);  n.removeChild(functionName);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);        n.removeChild(functionName);    n.removeChild(parent);  n.removeChild(functionName);	  	non-compiled	[CE]  cannot  find  symbol  parent	8	None	add
1243	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -1,  n);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -1,  n);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -1,  n);  n.removeChild(sb.toString());	  n.removeChild(n);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	119	None	replace
1244	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedNode.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedNode.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedNode.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
1245	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(sb.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(sb.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(sb.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
1246	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedParent.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedParent.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(arrayFoldedParent.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
1247	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(labelFoldedStringNode.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(labelFoldedStringNode.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(labelFoldedStringNode.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
1248	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(left.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(left.toString()));  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(left.toString()));	  StringBuilder    sb    =    new    StringBuilder(new    StringBuilder(prev.toString()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
1249	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
1250	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	replace
1251	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	50	None	replace
1252	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().replaceChild(n,  parent);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  parent);	  n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	50	None	replace
1253	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  originalSize)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=  0  ||  foldedSize  >  originalSize)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	155	2	replace
1254	[BUG]  [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  originalSize)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=  0  ||  foldedSize  >  originalSize)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0  ||  foldedSize  >  originalSize)  {  reportCodeChange();  }	  if(originalSize    >>    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	155	2	replace
1255	[BUG]  [BUGGY]  n.getParent().removeChild(arrayPoldedNode);  [CE]  cannot  find  symbol  arrayPoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayPoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayPoldedNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayPoldedNode	133	None	replace
1256	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedNode,  foldedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedNode,  foldedSize);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedNode,  foldedSize);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	133	None	replace
1257	[BUG]  [BUGGY]  n.getParent().removeChild(analyzedStringNode);  [CE]  cannot  find  symbol  analyzedStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(analyzedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(analyzedStringNode);	  n.getParent().removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  analyzedStringNode	133	None	replace
1258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(sb!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(sb!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	99	3	replace
1259	[BUG]  [BUGGY]  if(sb!=  null)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(sb!=  null)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(sb!=  null)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    int    originalSize    =    InlineCostEstimator.getCost(n);    	compilable	  [FE]  AssertionFailedError  	99	3	replace
1260	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size(),  prev);	  n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	145	None	replace
1261	[BUG]  [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=        0)        {        reportCodeChange();        }        if(originalSize!=    0)    {    reportCodeChange();    }    else    if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	24	None	add
1262	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  type);  [CE]  cannot  find  symbol  type  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  type);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  emptyStringNode,  type);	  n.removeChild(arrayFoldedChildren.size()    -    1    -    1,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  type	139	None	replace
1263	[BUG]  [BUGGY]  n.removeChild(left);  Node  prev  =  n.getParent();  [CE]  cannot  find  symbol  left  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(left);  Node  prev  =  n.getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);  Node  prev  =  n.getParent();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  left	98	None	replace
1264	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  Node  prev  =  n.getNext();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  Node  prev  =  n.getNext();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  Node  prev  =  n.getNext();	  n.removeChild(prev);    Node    prev    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	98	None	replace
1265	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  else  {  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  else  {  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >  0)  {  reportCodeChange();  }  else  {  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }	  if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize    >    0)    {    reportCodeChange();    System.arraycopy(oldStringNode,    0,    foldedSize,    originalSize);    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	63	None	replace
1266	[BUG]  [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(r);  n.removeChild(prev);  [CE]  cannot  find  symbol  r  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(n);    n.removeChild(prev);  n.removeChild(r);  n.removeChild(prev);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);        n.removeChild(prev);    n.removeChild(r);  n.removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  r	117	None	add
1267	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  arrayNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.getParent().removeChild(arrayFoldedChildren,  arrayNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedChildren,  arrayNode);	          n.getParent().removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
1268	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode,  prev);  n.removeChild(sb.toString());  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode,  prev);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode,  prev);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	142	None	replace
1269	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  prev);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  prev);  n.removeChild(sb.toString());  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size(),  prev);  n.removeChild(sb.toString());	  n.removeChild(prev);    n.removeChild(sb.toString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	142	None	replace
1270	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  removedStringNode);  [CE]  cannot  find  symbol  removedStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedChildren,  removedStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  removedStringNode);	  n.removeChild(arrayFoldedChildren,    first);    	non-compiled	[CE]  cannot  find  symbol  removedStringNode	128	None	replace
1271	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getParent().getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getParent().getParent();  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getParent().getParent();	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
1272	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getAncestor(2);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  Node  arrayFoldedChildren  =  n.getAncestor(2);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getAncestor(2);	  Node    arrayFoldedChildren    =    n.getParent();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	48	None	replace
1273	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayStringNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayStringNode);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	37	None	replace
1274	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayStringNode);  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayStringNode);  n.getParent().removeChild(arrayFoldedNode);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	37	None	replace
1275	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayPoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");  n.getParent().replaceChild(n,  emptyStringNode);      [BUGGY]  n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayPoldedNode);  [BUGGY]      return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedNode);  n.getParent().removeChild(arrayPoldedNode);	  n.removeChild(n);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	37	None	replace
