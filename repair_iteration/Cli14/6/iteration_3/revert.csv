projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(options!=null){this.options=Collections.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap==null){this.options=Collections.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78This.options=Collections.unmodifiableList(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.remove();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(j);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(j);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(newPrefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(prefixes!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!prefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstanceMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newEmptyMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextToken();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.optionMap=OptionMap.newInstance();}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78optionMap=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(defaultOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(optionMap);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,triggers);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=this.options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption("option");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option",null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option",true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionMap.getOption(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=selections.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(description!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefix);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=this.options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=options.keySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newOptionMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption("option");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Lists.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes,triggers);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j!=null?null:j.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j=j.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkArgument(description!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.description!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option",false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(optionMap);}else{finalSortedMapoptionMap=newTreeMap(ReverseStringComparator.getInstance());options.addAll(optionMap);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newTreeMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(prefixes==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.remove();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.set(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.j.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkArgument(description==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkArgument(this.description!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newPrefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(prefix);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Lists.unmodifiableList(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78This.options=Lists.unmodifiableList(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Lists.unmodifiableList(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newEmptyMap(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,defaultOptions);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(this.optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=this.options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=this.options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalIterator<Option>i=this.options.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(name,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description,minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=newAnonymous.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=this.optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(defaultOptionMap,defaultOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(defaultOptionMap,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(this.defaultOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option","true");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(description==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(name!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!prefixes.isEmpty()||!prefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!prefixes.isEmpty()&&!prefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!prefixes.isEmpty()||prefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.prefixes==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(newPrefixes==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(prefix);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(this.option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=this.optionMap.getOption(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=this.description.getOption(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=allOptions.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.j.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.j.getValue();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(name,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(this.defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option","false");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.prefixes!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(newPrefixes!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(newPrefixes!=maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(defaultValue);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(default);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.defaultName,this.maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.defaultName,this.minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption("options");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption("option",null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption("option",description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option","null");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption("option,",null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(newPrefixes,triggers);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes,minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(options!=null){This.options=Collections.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78This.options=Collections.unmodifiableList(options,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalSortedMapnewOptionMap=newTreeMap(ReverseStringComparator.getInstance());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78This.options=Collections.unmodifiableList(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstanceMap(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstanceMap(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstanceMap(defaultOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(prefix!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.removeChangeListener(this);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.removeChild(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.removeChild(this);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.removeChangeListener(this);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.removeChild(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.selections.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.prefixes.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.selectedSelections.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextToken()+1;
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newOptionMap,triggers);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newOptionMap,prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newAnonymous);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalSortedMapoptionMap=newTreeMap(ReverseStringComparator.getInstance());options.addAll(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalSortedMapoptionMap=newTreeMap(ReverseStringComparator.getInstance());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalSortedMapoptions=newTreeMap(ReverseStringComparator.getInstance());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,maximum,minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,minimum,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap(defaultPrefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap(prefixes,triggers);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap(this.prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78This.optionMap=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78OptionMapoptionMap=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newOptionMap(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78optionMap=OptionMap.newOptionMap();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j==null?null:j.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.set(default);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.set(maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=options.getOption(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionMap.getOption(name,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionMap.getOption(defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newTreeMap(prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=this.optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=newOptionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j=this.optionMap.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j=i.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j=j.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=this.options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=options.keySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=description.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextInt();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption("option",null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption("options");
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption("option",true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78OptionoptionMap=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=OptionMap.newInstance();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=options.entrySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=options.keySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(options,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(options,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.description==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.description!=null&&this.description.equals(""));
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.description>=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap,false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap,null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=options.getOption("option",true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(optionMap,options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.remove(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.remove(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionsMap.getOption(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionMap.getOption(this.defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.set(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.set(description,null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newTreeMap(defaultOptionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newOptionMap(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newOptionMap(option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newOptionMap(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkArgument(prefix!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=allOptions.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(prefixes!=null&&!prefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(optionMap);}else{finalSortedMapoptionMap=newTreeMap(ReverseStringComparator.getInstance());options.addAll
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=optionMap.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description-1);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description+1);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstanceMap(optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=this.optionMap.getOption(this.defaultName);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.j!=null?this.j.next():1;
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkNotNull(prefixes,newPrefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(options,true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>i=optionMap.keySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextEntry();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j=j.nextIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(this.description!=null&&this.description.length()>0);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,optionMap);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unmodifiableList(optionMap,newOptionMap);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.optionMap.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.options.getIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption(option);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=options.entities().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.nextElement();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=options.values().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=options.keySet().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkArgument(newPrefixes!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!newPrefixes.isEmpty());
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.remove(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.remove(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.setAnonymous(false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(name);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.removeChild(this.description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption(name,maximum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(defaultPrefixes!=null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(defaultPrefixes==null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=description.next();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(optionMap,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,description,null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i.remove(0);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78finalOptionoption=optionMap.getOption(name,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iterator<Option>j=optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratori=this.optionMap.iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){This.options=Collections.unmodifiableList(options);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.description,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(options,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap!=null){this.options=Collections.unemodifiableList(optionMap);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(this.defaultName,this.prefixes);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newArray();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78if(optionMap==null){this.options=Collections.unmodifiableList(optionMap);}else{finalSortedMapoptionMap=newTreeMap(ReverseStringComparator.getInstance());options.addAll(optionMap);}
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionsMap.getOption("option",false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newHashMap(options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,newOptionMap,options);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(defaultName,false);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(defaultName,true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.removeChild(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78j.removeChild(this);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(!prefix.equals(""));
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Iteratorj=options.entities().iterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.removeChild(description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78ij.setAnonymous(true);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Optionoption=optionMap.getOption(name,maximum-minimum);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.optionMap.nextIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=this.j.nextIterator();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,null);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.optionMap=OptionMap.newInstance(OptionMap.DEFAULT,1);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78this.options=Collections.unmodifiableList(optionMap,description);
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78i=j.getCurrentToken();
projects/Cli14/src/java/org/apache/commons/cli2/option/GroupImpl.java78Preconditions.checkState(i.hasNext());
