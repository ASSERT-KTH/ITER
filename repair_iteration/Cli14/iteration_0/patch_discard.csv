compilation error,73,add,[CE] variable options might already have been assigned,,  this.options = Collections.unmodifiableList(options);
compilation error,73,add,[CE] incompatible types,,  this.optionMap = Collections.unmodifiableList(options);
compilation error,73,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes);
compilation error,73,add,[CE] variable options might already have been assigned,,  this.options = Collections.emptyList();
compilation error,73,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to SortedMap,,  this.optionMap = Collections.emptyList();
compilation error,72,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes);
compilation error,72,add,[CE] cannot find symbol prefix,,  this.prefix = Collections.unmodifiableList(prefixes);
compilation error,72,add,[CE] incompatible types,,  this.optionMap = Collections.unmodifiableList(options);
compilation error,72,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes); Preconditions.checkNotNull(prefixes);
compilation error,72,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes); Preconditions.checkNotNull(name);
compilation error,87,add,[CE] illegal start of expression,,  if(newAnonymous.contains(name)) { for(final Iterator i = options.iterator(); i.hasNext();) { newAnonymous.add(newAnonymous); }
compilation error,87,add,[CE] illegal start of expression,,  if(newAnonymous.contains(name)) { for(final Iterator i = options.iterator(); i.hasNext();) { newAnonymous.put(name, newAnonymous); }
compilation error,87,add,[CE] cannot find symbol,,  newAnonymous.put(newAnonymous, newOptionMap);
compilation error,84,add,[CE] illegal start of expression,,  if(newAnonymous!= null) { for(final Iterator i = options.iterator(); i.hasNext();) { final SortedMap newAnonymous = newAnonymous.iterator(); }
compilation error,84,add,[CE] method get in interface List<E> cannot be applied to given types;,,  this.name = newAnonymous.get(newAnonymous);
compilation error,84,add,[CE] illegal start of expression,,  if(newAnonymous.size() > minimum) { for(final Iterator i = options.iterator(); i.hasNext();) { final Option option =(Option)options.iterator(); i.hasNext(); }
compilation error,84,add,[CE] variable minimum might already have been assigned,,  newAnonymous.add(newAnonymous); this.minimum = minimum;
compilation error,73,replace,[CE] cannot find symbol minimal,this.minimum = minimum; ,this.minimum = minimal;
compilation error,73,replace,[CE] cannot find symbol minim,this.minimum = minimum; ,this.minimum = minim;
compilation error,81,replace,[CE] cannot find symbol,final List newAnonymous = new ArrayList(); ,final List newAnonymous = new LinkedList();
compilation error,81,replace,[CE] cannot find symbol,final List newAnonymous = new ArrayList(); ,final List newAnonymous = new TreeList();
compilation error,81,replace,[CE] cannot find symbol newAnonymous,final List newAnonymous = new ArrayList(); , 
compilation error,74,add,[CE] variable options might already have been assigned,,  this.options = Collections.unmodifiableList(options);
compilation error,74,add,[CE] cannot find symbol prefix,,  this.prefix = Collections.unmodifiableList(prefixes);
compilation error,74,add,[CE] variable maximum might already have been assigned,,  this.maximum = minimum;
compilation error,74,add,[CE] cannot find symbol option,,  this.option = Collections.unmodifiableList(options);
compilation error,74,add,[CE] cannot find symbol prefix,,  this.prefix = Collections.unmodifiableList(prefix);
compilation error,90,replace,[CE] variable prefixes might not have been initialized,for (final Iterator i = options.iterator(); i.hasNext();) { ,for(final Iterator i = prefixes.iterator(); i.hasNext();) {
compilation error,90,replace,[CE] illegal start of type,for (final Iterator i = options.iterator(); i.hasNext();) { , 
compilation error,81,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes);
compilation error,81,add,[CE] variable prefixes might not have been initialized,,  final List prefixes = Collections.unmodifiableList(prefixes);
compilation error,81,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to Set,,  this.prefixes = Collections.emptyList();
compilation error,81,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes); Preconditions.checkNotNull(name);
compilation error,81,add,[CE] cannot find symbol prefix,,  final List prefixes = Collections.unmodifiableList(prefixes); Preconditions.checkNotNull(prefix);
compilation error,87,replace,[CE] incompatible types,final Set newPrefixes = new HashSet(); ,final List newPrefixes = new HashSet();
compilation error,87,replace,[CE] incompatible types,final Set newPrefixes = new HashSet(); ,final ArrayList newPrefixes = new HashSet();
compilation error,78,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList(prefixes);
compilation error,78,add,[CE] variable options might already have been assigned,,  this.options = Collections.unmodifiableList(options);
compilation error,78,add,[CE] cannot find symbol prefix,,  this.prefix = Collections.unmodifiableList(prefixes);
compilation error,78,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to Set,,  this.prefixes = Collections.emptyList();
compilation error,78,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.prefixes = Collections.unmodifiableList();
compilation error,72,replace,[CE] bad operand types for binary operator '-',this.description = description; ,this.description = description - 1;
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  List < String> options = Lists.newArrayList();
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkNotNull(maximum);
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkState(!OptionMap.isEmpty());
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  List < String> options = Lists.newArrayList(); i.hasOptionalArg(name);
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkNotNull(minimum);
compilation error,71,add,[CE] cannot find symbol Lists,,  List < String> newAnonymous = Lists.newArrayList();
compilation error,71,add,[CE] cannot find symbol OptionMap,,  Preconditions.checkState(!OptionMap.isEmpty());
compilation error,71,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkNotNull(maximum);
compilation error,71,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkState(minimum, maximum);
compilation error,71,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkNotNull(minimum);
compilation error,78,replace,[CE] method unmodifiableList in class Collections cannot be applied to given types;,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options, maximum);
compilation error,78,replace,[CE] illegal start of expression,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options, default);
compilation error,78,replace,[CE] bad operand types for binary operator '+',this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options + 1);
compilation error,84,replace,[CE] no suitable constructor found for TreeMap(Comparator,List),final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance(), newAnonymous);
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstanceType());
compilation error,84,replace,[CE] bad operand types for binary operator '+',final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance() + 1);
compilation error,69,replace,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,super(0, false); ,super(0, maximum);
compilation error,69,replace,[CE] cannot find symbol maximal,super(0, false); ,super(0, maximal);
compilation error,69,replace,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,super(0, false); ,super(0);
compilation error,90,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkState(newPrefixes!= null);
compilation error,90,add,[CE] variable options is already defined in constructor GroupImpl(List,String,String,int,int),,  List options = newAnonymous.get(newPrefixes);
compilation error,73,add,[CE] cannot find symbol Lists,,  this.optionMap = Lists.newArrayList();
compilation error,73,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.optionMap = Collections.unmodifiableList();
compilation error,87,replace,[CE] incompatible types,final Set newPrefixes = new HashSet(); ,final Set newPrefixes = new ArrayList();
compilation error,87,replace,[CE] variable newPrefixes might not have been initialized,final Set newPrefixes = new HashSet(); ,final Set newPrefixes = new HashSet(newPrefixes);
compilation error,87,replace,[CE] cannot find symbol,final Set newPrefixes = new HashSet(); ,final Set newPrefixes = new TreeSet();
compilation error,71,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkNotNull(minimum); Preconditions.checkNotNull(maximum);
compilation error,71,add,[CE] cannot find symbol OptionMap,,  Preconditions.checkArgument(!OptionMap.isEmpty());
compilation error,71,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkArgument(!this.optionMap.containsKey(minimum));
compilation error,71,add,[CE] cannot find symbol major,,  Preconditions.checkArgument(!OptionMap.containsKey(major));
compilation error,69,replace,[CE] cannot find symbol real,super(0, false); ,super(0, real);
compilation error,74,add,[CE] incompatible types,,  this.optionMap = Collections.unmodifiableList(options);
compilation error,74,add,[CE] variable options might already have been assigned,,  this.options = Collections.emptyList();
compilation error,74,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to SortedMap,,  this.optionMap = Collections.emptyList();
compilation error,74,replace,[CE] ';' expected,this.maximum = maximum; ,this.maximum = maximum, 0;
compilation error,84,add,[CE] variable anonymous might not have been initialized,,  anonymous.addAll(newAnonymous);
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final SortedMap newAnonymous = newAnonymous.get(newAnonymous.get(0));
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final SortedMap newAnonymous = newAnonymous.get(newAnonymous.getName());
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final SortedMap newAnonymous = newAnonymous.get(newAnonymous.first);
compilation error,72,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to SortedMap,,  this.optionMap = Collections.emptyList();
compilation error,72,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to String,,  this.description = Collections.emptyList();
compilation error,72,add,[CE] cannot find symbol Lists,,  this.optionMap = Lists.newArrayList();
compilation error,72,add,[CE] variable options might already have been assigned,,  this.options = Collections.emptyList();
compilation error,72,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.description = Collections.unmodifiableList(description);
compilation error,78,replace,[CE] cannot find symbol,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableArrayList(options);
compilation error,78,replace,[CE] cannot find symbol defaultAnonymous,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options, defaultAnonymous);
compilation error,87,add,[CE] incompatible types,,  this.options = newOptionMap.get(newAnonymous);
compilation error,87,add,[CE] ';' expected,,  final SortedMap optionMap.put(newAnonymous, newOptionMap);
compilation error,87,add,[CE] ';' expected,,  final SortedMap optionMap.put(name, newAnonymous);
compilation error,87,add,[CE] incompatible types,,  final List anonymous = newOptionMap.get(newAnonymous);
compilation error,87,add,[CE] variable j is already defined in constructor GroupImpl(List,String,String,int,int),,  final Iterator j = options.iterator();
compilation error,81,add,[CE] incompatible types,,  final List anonymous = new TreeMap(ReverseStringComparator.getInstance());
compilation error,81,add,[CE] no suitable constructor found for ArrayList(Comparator),,  final List anonymous = new ArrayList(ReverseStringComparator.getInstance());
compilation error,73,replace,[CE] cannot find symbol minimal,this.minimum = minimum; ,this.minimum = minimal - 1;
compilation error,81,replace,[CE] cannot find symbol,final List newAnonymous = new ArrayList(); ,final List newAnonymous = new LinkedHashList();
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkNotNull(minimum); Preconditions.checkNotNull(maximum);
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkArgument(!OptionMap.containsKey(minimum));
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Iterator i = options.iterator();
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Preconditions.checkArgument(!OptionMap.isEmpty());
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getDefault());
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getAnonymousClass());
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getName());
compilation error,90,add,[CE] method get in interface List<E> cannot be applied to given types;,,  List optionMap = newAnonymous.get(newPrefixes);
compilation error,90,add,[CE] cannot find symbol,,  final List optionMap = newArrayList(newPrefixes.size());
compilation error,90,add,[CE] cannot find symbol,,  List optionMap = newArrayList(newPrefixes.size());
compilation error,90,add,[CE] variable options is already defined in constructor GroupImpl(List,String,String,int,int),,  List options = newAnonymous.getAll();
compilation error,90,add,[CE] cannot find symbol,,  final List optionMap = newArrayList(newPrefixes);
compilation error,78,add,[CE] variable options might already have been assigned,,  this.options = Collections.emptyList();
compilation error,78,add,[CE] incompatible types; no instance(s) of type variable(s) T exist so that List<T> conforms to SortedMap,,  this.optionMap = Collections.emptyList();
compilation error,78,add,[CE] incompatible types,,  this.optionMap = Collections.unmodifiableList(options);
compilation error,78,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.options = Collections.unmodifiableList();
compilation error,90,replace,[CE] incompatible types,for (final Iterator i = options.iterator(); i.hasNext();) { ,for(final Iterator i = options.iterator(); i.next();) {
compilation error,90,replace,[CE] cannot find symbol,for (final Iterator i = options.iterator(); i.hasNext();) { ,for(final Iterator i = newOptionMap.iterator(); i.hasNext();) {
compilation error,78,replace,[CE] method unmodifiableList in class Collections cannot be applied to given types;,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options, options);
compilation error,78,replace,[CE] method unmodifiableList in class Collections cannot be applied to given types;,this.options = Collections.unmodifiableList(options); ,this.options = Collections.unmodifiableList(options, false);
compilation error,74,replace,[CE] ';' expected,this.maximum = maximum; ,this.maximum = maximum, minimum + 1;
compilation error,74,replace,[CE] ';' expected,this.maximum = maximum; ,this.maximum = maximum, minimum);
compilation error,87,add,[CE] variable j is already defined in constructor GroupImpl(List,String,String,int,int),,  final Iterator < Option> j = options.iterator();
compilation error,87,add,[CE] > expected,,  final Iterator < Map.Entry < String> j = newOptionMap.entrySet().iterator();
compilation error,87,add,[CE] > expected,,  final Iterator < Map.Entry < String> j = optionMap.entrySet().iterator();
compilation error,78,add,[CE] cannot find symbol,,  this.optionMap = new HashMap(ReverseStringComparator.getInstance());
compilation error,78,add,[CE] cannot find symbol Maps,,  this.optionMap = Maps.newHashMap();
compilation error,78,add,[CE] variable optionMap might already have been assigned,,  this.optionMap = new TreeMap(ReverseStringComparator.getInstance());
compilation error,78,add,[CE] cannot find symbol Sets,,  this.optionMap = Sets.newHashSet();
compilation error,78,add,[CE] cannot find symbol Sets,,  this.optionMap = Sets.newHashSet(options);
compilation error,74,add,[CE] variable minimum might already have been assigned,,  this.minimum = maximum;
compilation error,74,add,[CE] variable minimum might already have been assigned,,  this.minimum = minimum; this.maximum = maximum;
compilation error,74,add,[CE] variable minimum might already have been assigned,,  this.minimum = minimum;
compilation error,81,add,[CE] variable j is already defined in constructor GroupImpl(List,String,String,int,int),,  final Iterator < String> j = options.iterator();
compilation error,81,add,[CE] > expected,,  final Iterator < Map.Entry < String> j = options.iterator();
compilation error,81,add,[CE] variable j is already defined in constructor GroupImpl(List,String,String,int,int),,  final Iterator < Option> j = options.iterator();
compilation error,81,add,[CE] variable j is already defined in constructor GroupImpl(List,String,String,int,int),,  final Integer j =(( Integer)options.get(0));
compilation error,81,add,[CE] inconvertible types,,  final Integer j =(( Integer)options).getAll();
compilation error,71,add,[CE] variable i is already defined in constructor GroupImpl(List,String,String,int,int),,  Iterator < GroupImpl> i = options.iterator();
compilation error,71,add,[CE] cannot find symbol Maps,,  this.optionMap = Maps.newHashMap();
compilation error,71,add,[CE] cannot find symbol,,  Iterator < GroupImpl> i = optionMap.iterator();
compilation error,71,add,[CE] cannot find symbol,,  Iterator < GroupImpl> optionMap = createOptionMap();
compilation error,71,add,[CE] cannot find symbol,,  Iterator < String> optionMap = createOptionMap();
compilation error,72,replace,[CE] ,this.description = description; ,this.description = description &&"goog".equals(requiresActivation()?"true" :"false";
compilation error,72,replace,[CE] cannot find symbol,this.description = description; ,this.description = description &&"goog".equals(requiresActivation()?"true" :"false");
compilation error,72,replace,[CE] ,this.description = description; ,this.description = description &&"goog".equals(requiresActivation()? getDescription() : description;
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstanceName());
compilation error,84,replace,[CE] cannot find symbol,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance()); ,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstanceClass());
compilation error,84,add,[CE] cannot find symbol Anonymous,,  Anonymous.addAll(newAnonymous);
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final Map.Entry < K, V> optionMap = new HashMap(reverseStringComparator.getInstance());
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final Map.Entry < K, V> optionMap = new HashMap(reverseStringComparator.getInstance()); anonymous.addAll(newAnonymous);
compilation error,84,add,[CE] illegal start of expression,,  for(final Iterator j = options.iterator(); j.hasNext();) { final Map.Entry < String,Integer> anonym = newAnonymous.entrySet(); j.hasNext();) {
compilation error,69,add,[CE] illegal start of expression,,  if(!OptionMap.containsKey(name)) { for(Iterator < Option> i = options.iterator(); i.hasNext();) { this.optionMap.put(name, i.next()); }
compilation error,69,add,[CE] illegal start of expression,,  if(!OptionMap.containsKey(name)) { for(Iterator < Option> i = options.iterator(); i.hasNext();) { this.optionMap.putAll(i.next); }
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Iterator < String> i = options.iterator();
compilation error,69,add,[CE] illegal start of expression,,  if(!OptionMap.containsKey(name)) { for(Iterator < Option> j = options.iterator(); i.hasNext();) { this.optionMap.put(name, j.next()); }
compilation error,69,add,[CE] constructor OptionImpl in class OptionImpl cannot be applied to given types;,,  Iterator < String> optionMap = createOptionMap();
compilation error,71,replace,[CE] cannot find symbol,this.name = name; ,this.name = name &&"jscompiler".addOption("jscompiler");
compilation error,71,replace,[CE] bad operand types for binary operator ,this.name = name; ,this.name = name &&"goog".equals(name);
compilation error,71,replace,[CE] unclosed string literal,this.name = name; ,this.name = name &&"goog".equals(Name.String.valueOf("xmlns")");
compilation error,72,add,[CE] cannot find symbol Maps,,  this.optionMap = Maps.newHashMap();
compilation error,72,add,[CE] cannot find symbol HashMap,,  this.optionMap = HashMap.create();
compilation error,72,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.optionMap = Collections.unmodifiableList(optionMap);
compilation error,72,add,[CE] cannot find symbol OptionMap,,  this.optionMap = OptionMap.getOptionMap();
compilation error,73,add,[CE] cannot find symbol Maps,,  this.optionMap = Maps.newHashMap();
compilation error,73,add,[CE] method unmodifiableList in class Collections cannot be applied to given types;,,  this.optionMap = Collections.unmodifiableList(optionMap);
compilation error,73,add,[CE] cannot find symbol Sets,,  this.optionMap = Sets.newHashSet();
compilation error,73,add,[CE] cannot find symbol HashMap,,  this.optionMap = HashMap.create();
compilation error,90,add,[CE] variable newAnonymous is already defined in constructor GroupImpl(List,String,String,int,int),,  final List newAnonymous = newArrayList(newAnonymous);
