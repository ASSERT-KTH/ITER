bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
2	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
3	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
4	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
5	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
6	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
7	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
8	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
9	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
10	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
11	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
12	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
13	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
14	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsZip64For(ze);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
15	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64For(entry);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
16	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsZip64For(ze);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
17	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(ae);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64For(ae);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
18	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
19	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsUnicodeExtraFieldsFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsZip64For(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsUseUnicodeExtraFields(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsFileDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsFieldDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  &&  supportsEntryDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsEntryDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsEntryDataDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsZip64For(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
28	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  supportsUnicodeExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
29	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
30	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
31	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
32	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
33	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsZip64For(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
34	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64For(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
35	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
36	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze,  ae);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze,  ae);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
37	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
42	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
43	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry,  ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry,  ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry,  ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
46	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
47	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
48	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
49	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
50	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
51	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
52	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
53	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
54	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
55	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
56	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "Archive "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "Archive "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
59	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( ".Archive "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( ".Archive "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
60	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
61	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
62	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ae);	  return    ZipUtil.canHandleEntryData(ze)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
63	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(zipEncoding);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
66	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(z);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(z);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
67	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
68	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
69	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  }	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
70	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
71	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
72	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
73	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
74	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsZip64For(ze);	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
75	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsZip64For(ze.getValue());  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsZip64For(ze.getValue());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsZip64For(ze.getValue());	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
76	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
77	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
78	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
79	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
80	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
81	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsZip64(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
82	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
83	[BUG]  [BUGGY]  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
84	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
85	[BUG]  [BUGGY]  if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
86	[BUG]  [BUGGY]  if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
87	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
88	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding  ==  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding  ==  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
89	[BUG]  [BUGGY]  return  hasDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
90	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
91	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsUseUnicodeExtraFields(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
92	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsDataDescriptorFor(ze.getValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsDataDescriptorFor(ze.getValue());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsDataDescriptorFor(ze.getValue());	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
93	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
94	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
95	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
96	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
97	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
98	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
99	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
100	[BUG]  [BUGGY]  return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
101	[BUG]  [BUGGY]  return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding  &&  hasDataDescriptor.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
102	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
103	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
104	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
105	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsZip64For(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
106	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze)||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
107	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
108	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
109	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
110	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
111	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
112	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
113	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
114	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
115	[BUG]  [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
116	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
117	[BUG]  [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
118	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
119	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze.canHandleEntryData())||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze.canHandleEntryData())||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze.canHandleEntryData())||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
123	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
124	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
125	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
126	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ae);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
127	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
128	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
129	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
130	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
131	[BUG]  [BUGGY]  if(ze.canHandleEntryData())  {  return  canStoredEntriesWithDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.canHandleEntryData())  {  return  canStoredEntriesWithDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.canHandleEntryData())  {  return  canStoredEntriesWithDataDescriptorFor(ze);  }	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
132	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ae);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
133	[BUG]  [BUGGY]  return  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
134	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
135	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
136	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
137	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
138	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
139	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(entry);	  return    ze.canHandleEntryData()    &&    supportsFieldDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsFieldDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ae);	  return    ze.canHandleEntryData()    &&    supportsFieldDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
142	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsFieldDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
143	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsFieldDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
144	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
145	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
146	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
147	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  }  else  {  return  true;  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
148	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(entry);	  return    entry.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
149	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    entry.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
150	[BUG]  [BUGGY]  return  entry.canReadEntryData()  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canReadEntryData()  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canReadEntryData()  &&  supportsDataDescriptorFor(ze);	  return    entry.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
151	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entry.canHandleEntryData();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entry.canHandleEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entry.canHandleEntryData();	  return    entry.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
152	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
153	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
154	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
155	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
156	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  false;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
157	[BUG]  [BUGGY]  if(entry.getMethod()!=  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getMethod()!=  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getMethod()!=  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
158	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
159	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
160	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
161	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
162	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
163	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  false;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
164	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
165	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
166	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
167	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
168	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
169	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
170	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
171	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
172	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
173	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
174	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
175	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
176	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
177	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
178	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
179	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
180	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
181	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ ")||  ze.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ ")||  ze.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ ")||  ze.getName().startsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
182	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ ")||  entry.getName().startsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
183	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
184	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
185	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
186	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
187	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
188	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
189	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  hasDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  hasDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  hasDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
190	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry,  ae)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
191	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
192	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
193	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
194	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze,  entryEncoding);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
195	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
196	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
197	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUseUnicodeExtraFields(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
198	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUTF8Flag(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUTF8Flag(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUTF8Flag(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
199	[BUG]  [BUGGY]  return  hasFlag  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  supportsDataDescriptorFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
200	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUTF8Flag;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUTF8Flag;	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
201	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
202	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
203	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
204	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ae);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
205	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
206	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
207	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
208	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
209	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
210	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
211	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
212	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
213	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
214	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsZip64For(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
215	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
216	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsUseUnicodeExtraFields(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
217	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsReadEntryFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsReadEntryFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsReadEntryFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
218	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
219	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entry);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
220	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  ae);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  ae);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
221	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
222	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64For(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
223	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
224	[BUG]  [BUGGY]  if(ze.canHandleEntryData())  {  return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.canHandleEntryData())  {  return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.canHandleEntryData())  {  return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  }	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
225	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
226	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsZip64(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
227	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
228	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
229	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
230	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ae)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
231	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(entry);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
232	[BUG]  [BUGGY]  Inflater  inf  =  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ae.getInputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ae.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
233	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entry.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
234	[BUG]  [BUGGY]  Inflater  inf  =  ze.getFileInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.getFileInputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getFileInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
235	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.getInputStream()  +  1;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getInputStream()  +  1;	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
236	[BUG]  [BUGGY]  Inflater  inf  =  z.getInputStream();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  z.getInputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  z.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
237	[BUG]  [BUGGY]  Inflater  inf  =  ze.getEntry();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.getEntry();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getEntry();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
238	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
239	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFieldDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
240	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
241	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
242	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFullDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFullDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFullDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
243	[BUG]  [BUGGY]  return  hasZip64  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  ||  supportsDataDescriptorFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
244	[BUG]  [BUGGY]  return  hasZip64  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
245	[BUG]  [BUGGY]  return  hasZip64  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
246	[BUG]  [BUGGY]  return  hasZip64  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsUseUnicodeExtraFields(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
247	[BUG]  [BUGGY]  return  hasEntryData  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryData  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryData  &&  supportsDataDescriptorFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
248	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
249	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
250	[BUG]  [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
251	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
252	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
253	[BUG]  [BUGGY]  ||  ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  ||  ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	||  ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
254	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
255	[BUG]  [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
256	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
257	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
258	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
259	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
260	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
261	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)&&  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
262	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)&&  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
263	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsFieldsFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
264	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
265	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
266	[BUG]  [BUGGY]  if(entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.hasDataDescriptor())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
267	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
268	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.hasDataDescriptor())  {  return  false;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
269	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(!entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(!entry.hasDataDescriptor())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
270	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
271	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
272	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
273	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
274	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
275	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
276	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
277	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
278	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
279	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
280	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
281	[BUG]  [BUGGY]  return  hasValueDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
282	[BUG]  [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
283	[BUG]  [BUGGY]  return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
284	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze);	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
285	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getEntry());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getEntry());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getEntry());	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
286	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
287	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getValue());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getValue());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getValue());	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
288	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze,  entry);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze,  entry);	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
289	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ae);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
290	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
291	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  }	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
292	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
293	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
294	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ae);	  return    ZipUtil.canReadEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
295	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
296	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
297	[BUG]  [BUGGY]  return  ze.canReadEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
298	[BUG]  [BUGGY]  return  entryEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
299	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
300	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
301	[BUG]  [BUGGY]  For(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
302	[BUG]  [BUGGY]  For(ZipArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ZipArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ZipArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
303	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
304	[BUG]  [BUGGY]  For(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ArchiveEntry  ze  :  ae.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
305	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(entry)||    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
306	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  supportsDataDescriptorFor(ze);	  return    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
307	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsFieldDescriptorFor(ze);	  return    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
308	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)||  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
309	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
310	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
311	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
312	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)||  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
313	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)||  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
314	[BUG]  [BUGGY]  if(entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
315	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
316	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
317	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
318	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
319	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().length()!=  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().length()!=  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().length()!=  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
320	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
321	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
322	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
323	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze,  ae);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze,  ae);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
324	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
325	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
326	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
327	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ae);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
328	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
329	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
330	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
331	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
332	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
333	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsZip64For(ze);	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
334	[BUG]  [BUGGY]  if(ze.canReadEntryData())  {  return  hasDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.canReadEntryData())  {  return  hasDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.canReadEntryData())  {  return  hasDataDescriptorFor(ze);  }	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
335	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsFileDescriptorFor(ze);	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
336	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);	  return    ZipUtil.canReadEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
337	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(entry)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
338	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(entry);	  return    ZipUtil.canReadEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
339	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(entry);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
340	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canReadEntryData(ze);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
341	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canReadEntryData(entry);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
342	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entry);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
343	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ae);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ae);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
344	[BUG]  [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  ZipUtil.canHandleEntryData(ze);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
345	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
346	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
347	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
348	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsZip64;	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
349	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ae);	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
350	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFields(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
351	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
352	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ae);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
353	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(entry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(entry);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
354	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFields(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFields(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
355	[BUG]  [BUGGY]  For(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
356	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
357	[BUG]  [BUGGY]  For(ZipArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ZipArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ZipArchiveEntry  ze  :  entry.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
358	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
359	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsDescriptorFor(entry);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
360	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ae);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
361	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
362	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
363	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
364	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
365	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze.getEntry());	  return    hasDataDescriptor    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
366	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
367	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
368	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
369	[BUG]  [BUGGY]  return  hasDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
370	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFieldDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
371	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
372	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFunctionDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
373	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
374	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
375	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
376	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
377	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
378	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
379	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHaveSideEffects(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHaveSideEffects(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHaveSideEffects(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
380	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
381	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
382	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(entry);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
383	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ae);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ae);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
384	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
385	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entry);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
386	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry);	  return    hasDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
387	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);	  return    hasDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
388	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ae);	  return    hasDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
389	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canReadEntryData(entry);	  return    hasDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
390	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
391	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
392	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
393	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
394	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadArchiveEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
395	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ae);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ae);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
396	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entry);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
397	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  ae);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  ae);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
398	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
399	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
400	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
401	[BUG]  [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
402	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
403	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
404	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
405	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
406	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ae);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ae);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
407	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
408	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  }	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
409	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  }	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
410	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
411	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
412	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze,  entryEncoding);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
413	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
414	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
415	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ae);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
416	[BUG]  [BUGGY]  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
417	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
418	[BUG]  [BUGGY]  if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
419	[BUG]  [BUGGY]  if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
420	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
421	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  final  String  encoding  =  ae.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
422	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ae);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ae);	  return    ZipUtil.canReadEntryData(ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
423	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
424	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
425	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
426	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
427	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
428	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze)&&  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze)&&  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze)&&  zipEncoding.canHandleEntryData(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
429	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);	  return    ZipUtil.canHandleEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
430	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
431	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsZip64For(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
432	[BUG]  [BUGGY]  return  ze.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
433	[BUG]  [BUGGY]  return  ze.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
434	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsFieldDescriptorFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
435	[BUG]  [BUGGY]  return  entry.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canReadEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
436	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsFieldsFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
437	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
438	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
439	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
440	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  ae)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
441	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDataDescriptorFor(entry);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
442	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
443	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry,  ae)&&  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
444	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldsFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
445	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(z);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsUnicodeExtraFieldsFor(z);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
446	[BUG]  [BUGGY]  return  ze.canHandleEntryData(encoding)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(encoding)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(encoding)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
447	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(entry);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
448	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(zipEncoding);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
449	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ae);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
450	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
451	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
452	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ae);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
453	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
454	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
455	[BUG]  [BUGGY]  for(ArchiveEntry  ze  :  ae.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  ze  :  ae.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  ze  :  ae.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
456	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
457	[BUG]  [BUGGY]  For(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
458	[BUG]  [BUGGY]  For(ZipArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  For(ZipArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	For(ZipArchiveEntry  ze  :  entry.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
459	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
460	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
461	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
462	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".zip "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( ".zip "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( ".zip "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
463	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
464	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
465	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
466	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
467	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
468	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( ".zip "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
469	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
470	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
471	[BUG]  [BUGGY]  if(entry.getName().equals(encoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().equals(encoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().equals(encoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
472	[BUG]  [BUGGY]  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
473	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
474	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(entry.getName().equals(ze))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(zipEncoding!=  null)  {  if(entry.getName().equals(ze))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(zipEncoding!=  null)  {  if(entry.getName().equals(ze))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
475	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().equals(encoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
476	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
477	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
478	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
479	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
480	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
481	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
482	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  ze.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
483	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsZip64;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
484	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
485	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zip64)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zip64)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zip64)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
486	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFields;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFields;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFields;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
487	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64  +  1;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64  +  1;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
488	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
489	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
490	[BUG]  [BUGGY]  if(ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.canHandleEntryData(entryEncoding)&&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
491	[BUG]  [BUGGY]  return  ze.canHandleEntryData(encoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(encoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(encoding)&&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
492	[BUG]  [BUGGY]  return  hasValueDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
493	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
494	[BUG]  [BUGGY]  return  hasEntryDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
495	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
496	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
497	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
498	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
499	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
500	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  }  else  {  return  true;  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
501	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
502	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
503	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  ae);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  ae);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
504	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze,  entryEncoding);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
505	[BUG]  [BUGGY]  int  pos  =  entryEncoding.lastIndexOf(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.lastIndexOf(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.lastIndexOf(ze);	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
506	[BUG]  [BUGGY]  int  pos  =  entryEncoding.indexOf(ze)+  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.indexOf(ze)+  1;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.indexOf(ze)+  1;	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
507	[BUG]  [BUGGY]  int  pos  =  entryEncoding.indexOf(ze)-  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.indexOf(ze)-  1;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.indexOf(ze)-  1;	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
508	[BUG]  [BUGGY]  int  pos  =  entryEncoding.indexOf(ze.getKey());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.indexOf(ze.getKey());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.indexOf(ze.getKey());	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
509	[BUG]  [BUGGY]  int  pos  =  entryEncoding.indexOf(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.indexOf(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.indexOf(zipEncoding);	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
510	[BUG]  [BUGGY]  int  pos  =  ze.indexOf(entryEncoding);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  ze.indexOf(entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  ze.indexOf(entryEncoding);	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
511	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry()?  ze.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry()?  ze.getInputStream()  :  null;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntry()?  ze.getInputStream()  :  null;	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
512	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData()?  ze.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData()?  ze.getInputStream()  :  null;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntryData()?  ze.getInputStream()  :  null;	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
513	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntry();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
514	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntryData(ze);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
515	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
516	[BUG]  [BUGGY]  return  entryEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
517	[BUG]  [BUGGY]  return  ze.canReadEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData(zipEncoding)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
518	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
519	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsFieldDescriptorFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
520	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(z);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(z);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
521	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsZip64(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
522	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
523	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
524	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
525	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsZip64Fields(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsZip64Fields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsZip64Fields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
526	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.canRead())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.canRead())  {  return  true;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
527	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.canRead())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.canRead())  {  return  true;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
528	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.canRead())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.canRead())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.canRead())  {  return  false;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
529	[BUG]  [BUGGY]  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.canRead())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.canRead())  {  return  true;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
530	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.canRead())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(entry.canRead())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.canRead())  {  return  false;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
531	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.canRead())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.canRead())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.canRead())  {  return  false;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
532	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
533	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
534	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ze.canHandleEntryData();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ze.canHandleEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ze.canHandleEntryData();	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
535	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
536	[BUG]  [BUGGY]  return  ae.canHandleEntryData()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ae.canHandleEntryData()  &&  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ae.canHandleEntryData()  &&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
537	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
538	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae);	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
539	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
540	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFields(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
541	[BUG]  [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptorFor(ze)&&  supportsUnicodeExtraFields(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
542	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  entryEncoding);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
543	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  ae);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze,  ae);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
544	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
545	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze,  entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze,  entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze,    entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
546	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze,    entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
547	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry.getValue());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry.getValue());	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze,    entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
548	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(entry,  ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze,    entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
549	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsZip64For(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
550	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsUseUnicodeExtraFields(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
551	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsFieldDescriptorFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
552	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsReadEntryData(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
553	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsReadEntryFor(ze);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsReadEntryFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsReadEntryFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
554	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
555	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
556	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
557	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsZip64For(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
558	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
559	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsUseUnicodeExtraFields(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
560	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsReadEntryFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsReadEntryFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsReadEntryFor(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
561	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
562	[BUG]  [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
563	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
564	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
565	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
566	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
567	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
568	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64  +  1;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64  +  1;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
569	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
570	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
571	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ae);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ae);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
572	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
573	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
574	[BUG]  [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
575	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
576	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
577	[BUG]  [BUGGY]  return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
578	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
579	[BUG]  [BUGGY]  return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFunctionDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFunctionDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
580	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
581	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
582	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
583	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
584	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
585	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
586	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
587	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
588	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
589	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
590	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
591	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
592	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
593	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
594	[BUG]  [BUGGY]  return  ze.canReadEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
595	[BUG]  [BUGGY]  return  entryEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
596	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
597	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
598	[BUG]  [BUGGY]  if(entry.getName()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
599	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entryEnd;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entryEnd;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0,  len  =  entryEnd;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
600	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUTF8FlagFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUTF8FlagFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUTF8FlagFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
601	[BUG]  [BUGGY]  return  hasFlag  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsZip64For(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
602	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
603	[BUG]  [BUGGY]  return  ze.hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);	  return    hasUTF8Flag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
604	[BUG]  [BUGGY]  return  hasDirectoryDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDirectoryDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDirectoryDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
605	[BUG]  [BUGGY]  return  hasFlags  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlags  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlags  &&  supportsDataDescriptorFor(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
606	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze,  entryEncoding);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
607	[BUG]  [BUGGY]  return  ze.canHandleEntryData(lockEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(lockEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(lockEncoding)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
608	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(zipEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(zipEncoding);	  return    zipEncoding.canHandleEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
609	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
610	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
611	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
612	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(z);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(z);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
613	[BUG]  [BUGGY]  return  hasUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUseUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
614	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
615	[BUG]  [BUGGY]  if(ze.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
616	[BUG]  [BUGGY]  if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
617	[BUG]  [BUGGY]  Pentru(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Pentru(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Pentru(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
618	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  isUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  isUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  isUseUnicodeExtraFields(ze);	  return    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
619	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
620	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(z);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(z);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
621	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
622	[BUG]  [BUGGY]  return  hasZip64(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64(ze)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64(ze)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
623	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields();	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
624	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsUnicodeExtraFields();	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
625	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
626	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
627	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
628	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.canRead())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.canRead())  {  return  true;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
629	[BUG]  [BUGGY]  return  accessZipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  accessZipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  accessZipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
630	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(entry);	  return    entry.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
631	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
632	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
633	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
634	[BUG]  [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
635	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
636	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
637	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
638	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
639	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(entry);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
640	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
641	[BUG]  [BUGGY]  return  hasFlag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
642	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
643	[BUG]  [BUGGY]  return  hasZip64  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
644	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
645	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
646	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.getInputStream(bis);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getInputStream(bis);	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
647	[BUG]  [BUGGY]  Inflater  inf  =  ze.canReadEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.canReadEntry();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.canReadEntry();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
648	[BUG]  [BUGGY]  Inflater  inf  =  ze!=  null?  ze.getInputStream()  :  bis;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze!=  null?  ze.getInputStream()  :  bis;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze!=  null?  ze.getInputStream()  :  bis;	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
649	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
650	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFields();	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
651	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
652	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
653	[BUG]  [BUGGY]  return  hasZip64  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
654	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
655	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
656	[BUG]  [BUGGY]  return  hasZip64  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
657	[BUG]  [BUGGY]  return  hasUseUnicodeExtraFields  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUseUnicodeExtraFields  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUseUnicodeExtraFields  &&  supportsDataDescriptorFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
658	[BUG]  [BUGGY]  return  hasZip64  &&  isUseUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  isUseUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  isUseUnicodeExtraFields(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
659	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
660	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
661	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsZip64(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
662	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
663	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
664	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
665	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
666	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
667	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
668	[BUG]  [BUGGY]  return  hasFileExtraFields  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFileExtraFields  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFileExtraFields  &&  ZipUtil.canHandleEntryData(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
669	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
670	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsFileDescriptorFor(ze);	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
671	[BUG]  [BUGGY]  final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
672	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
673	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
674	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
675	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
676	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
677	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
678	[BUG]  [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
679	[BUG]  [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
680	[BUG]  [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
681	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
682	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
683	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
684	[BUG]  [BUGGY]  if(entry.getMethod()!=  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getMethod()!=  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getMethod()!=  ZipEncoding.UTF8)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.UTF8)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
685	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64(entry);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
686	[BUG]  [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entry.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData(ze)&&  supportsZip64;	  return    ze.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
687	[BUG]  [BUGGY]  final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	final  ZipEncoding  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
688	[BUG]  [BUGGY]  if(entry!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
689	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
690	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
691	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
692	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
693	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUTF8FlagFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsUTF8FlagFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUTF8FlagFor(ze);	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
694	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
695	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canReadEntryData();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canReadEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canReadEntryData();	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
696	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsFileDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
697	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
698	[BUG]  [BUGGY]  return  entryEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    zipEncoding.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
699	[BUG]  [BUGGY]  &&  hasDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  hasDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  hasDataDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
700	[BUG]  [BUGGY]  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsUnicodeExtraFields(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
701	[BUG]  [BUGGY]  &&  hasUTF8Flag  &&  hasDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  hasUTF8Flag  &&  hasDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  hasUTF8Flag  &&  hasDataDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
702	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
703	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
704	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
705	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
706	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  false;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
707	[BUG]  [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
708	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
709	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
710	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
711	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsZip64For(entry);	  return    ZipUtil.canReadEntryData(entry)||    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
712	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
713	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
714	[BUG]  [BUGGY]  if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
715	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
716	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
717	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
718	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
719	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
720	[BUG]  [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
721	[BUG]  [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
722	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
723	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
724	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
725	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
726	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
727	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
728	[BUG]  [BUGGY]  return  hasDirectoryDataDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDirectoryDataDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDirectoryDataDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
729	[BUG]  [BUGGY]  return  hasZip64  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
730	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64;	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
731	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsZip64(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
732	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(entry.getName().endsWith( "Archive   "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
733	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
734	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
735	[BUG]  [BUGGY]  return  hasZip64For(ze)&&  entryEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64For(ze)&&  entryEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64For(ze)&&  entryEncoding.canHandleEntryData(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
736	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze,  entryEncoding);	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
737	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze.getName());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze.getName());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFields(ze.getName());	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
738	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getName());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getName());  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze.getName());	  return    hasUTF8Flag    &&    supportsUseUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
739	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null)  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
740	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.getName().endsWith( ".zip "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
741	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
742	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
743	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
744	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
745	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
746	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(zipEncoding);	  return    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
747	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
748	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
749	[BUG]  [BUGGY]  return  hasZip64  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
750	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canReadArchiveEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
751	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canReadArchiveEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
752	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze,  entryEncoding);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
753	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
754	[BUG]  [BUGGY]  return  hasFileDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFileDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFileDescriptor  &&  ZipUtil.canHandleEntryData(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
755	[BUG]  [BUGGY]  int  pos  =  zipEncoding.indexOf(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  zipEncoding.indexOf(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  zipEncoding.indexOf(ze);	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
756	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
757	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  canReadEntryData(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
758	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
759	[BUG]  [BUGGY]  return  hasDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
760	[BUG]  [BUGGY]  return  hasDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
761	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsUnicodeExtraFields(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
762	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ae);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ae);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(ae);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
763	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  ze.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null  ||  ze.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null  ||  ze.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
764	[BUG]  [BUGGY]  if(entry.getName()  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()  ==  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()  ==  null)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
765	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
766	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    entryEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
767	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64;	  return    entryEncoding.canHandleEntryData(ze)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
768	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
769	[BUG]  [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  zipEncoding.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  zipEncoding.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
770	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsZip64(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
771	[BUG]  [BUGGY]  return  ze.hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
772	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsZip64AndExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsZip64AndExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsZip64AndExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
773	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
774	[BUG]  [BUGGY]  return  hasFlag  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
775	[BUG]  [BUGGY]  return  hasZip64  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
776	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  &&  supportsUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  &&  supportsUnicodeExtraFields();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  &&  supportsUnicodeExtraFields();	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
777	[BUG]  [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
778	[BUG]  [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
779	[BUG]  [BUGGY]  return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
780	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
781	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)&&  supportsDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
782	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
783	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsZip64;	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
784	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntry(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntry(ze);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
785	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.canReadEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.canReadEntryData();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
786	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(ze);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  entryEncoding.encode(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.encode(ze);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
787	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
788	[BUG]  [BUGGY]  return  ze!=  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze!=  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze!=  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
789	[BUG]  [BUGGY]  return  ze  ==  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze  ==  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze  ==  null  ||  ZipUtil.canHandleEntryData(hasDataDescriptor);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
790	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
791	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
792	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
793	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
794	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
795	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);	  return    hasFlag    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
796	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entryEncoding);	  return    hasDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
797	[BUG]  [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
798	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
799	[BUG]  [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
800	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
801	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntryData(ze))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntryData(ze))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.canReadEntryData(ze))  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
802	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
803	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntry())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntry())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.canReadEntry())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
804	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptor;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptor;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptor;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
805	[BUG]  [BUGGY]  return  ZipUtil.hasHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.hasHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.hasHandleEntryData(ze)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
806	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData();	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
807	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  entryEncoding.canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  entryEncoding.canReadEntryData(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
808	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
809	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
810	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsFileDescriptorFor(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
811	[BUG]  [BUGGY]  return  hasDescriptor  &&  canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDescriptor  &&  canReadEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  canReadEntryData(ze);	  return    hasDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
812	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
813	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsBoundedInputStream(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsBoundedInputStream(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsBoundedInputStream(ze);	  return    hasDataDescriptor    ||    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
814	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ce);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ce);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ce);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
815	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ ")||  ze.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
816	[BUG]  [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().startsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().startsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().startsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
817	[BUG]  [BUGGY]  if(entry.canReadEntry())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.canReadEntry())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.canReadEntry())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
818	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntryData())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry!=  null)  {  if(entry.canReadEntryData())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry!=  null)  {  if(entry.canReadEntryData())  {  return  true;  }	  if(ze!=    null)    {    if(entry.hasDataDescriptor())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
819	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  supportsUicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
820	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze,  ae)||  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
821	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ze)||  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry,  ze)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry,    ae)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
822	[BUG]  [BUGGY]  &&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsFileDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsFileDataDescriptorFor(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
823	[BUG]  [BUGGY]  &&  supportsZip64Entry(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsZip64Entry(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsZip64Entry(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
824	[BUG]  [BUGGY]  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsZip64(ze);	  &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
825	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
826	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
827	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsDescriptorFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
828	[BUG]  [BUGGY]  return  hasZip64  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasZip64  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasZip64    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
829	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64Fields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64Fields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsZip64Fields(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
830	[BUG]  [BUGGY]  &&  entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getMethod()    ==    ZipEncoding.DEFAULT)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
831	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
832	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
833	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(entry);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
834	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  canStoredEntriesWithDataDescriptorFor(e);	  return    ze.canHandleEntryData()    &&    canStoredEntriesWithDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
835	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsBoundedDirectory(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsBoundedDirectory(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsBoundedDirectory(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
836	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64DescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64DescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64DescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsFileDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
837	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValues())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValues())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
838	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsZip64;	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
839	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
840	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&!hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  &&!hasUTF8Flag;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&!hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
841	[BUG]  [BUGGY]  return  ze.canHandleEntryData();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData();	  return    ze.canHandleEntryData()    &&    hasUTF8Flag;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
842	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
843	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsUnicodeExtraFields(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
844	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsZip64(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
845	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasValueDescriptor  &&  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsFileDescriptorFor(ze);	  return    hasValueDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
846	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(e);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(e);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
847	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsUnicodeExtraFields(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
848	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasEntryDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
849	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  supportsFileDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsFileDescriptorFor(ze);	  return    hasDataDescriptor    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
850	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsUicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsUicodeExtraFieldsFor(ze);	  return    hasEntryDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
851	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
852	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsZip64(ze);	  return    ze.canReadEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
853	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
854	[BUG]  [BUGGY]  if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  ==  null)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
855	[BUG]  [BUGGY]  int  pos  =  this.entryEncoding.indexOf(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  this.entryEncoding.indexOf(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  this.entryEncoding.indexOf(ze);	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
856	[BUG]  [BUGGY]  int  pos  =  entryEncoding.length();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  int  pos  =  entryEncoding.length();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.length();	  int    pos    =    entryEncoding.indexOf(ze);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
857	[BUG]  [BUGGY]  return  hasFlag  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsFieldDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsFieldDescriptorFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
858	[BUG]  [BUGGY]  return  hasFlag  &&  supportsEntryDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasFlag  &&  supportsEntryDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsEntryDescriptorFor(ze);	  return    hasFlag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
859	[BUG]  [BUGGY]  Inflater  inf  =  ze.inputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.inputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.inputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
860	[BUG]  [BUGGY]  Inflater  inf  =  ze.getDataInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  Inflater  inf  =  ze.getDataInputStream();  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getDataInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
861	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(e);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(e);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
862	[BUG]  [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(z);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(ae)&&  supportsDataDescriptorFor(z);	  return    zipEncoding.canHandleEntryData(ae)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
863	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
864	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
865	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData()  ||  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsZip64(ze);	  return    ze.canHandleEntryData()    ||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
866	[BUG]  [BUGGY]  if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  false;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    ze.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
867	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
868	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
869	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
870	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ce);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ce);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ce);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
871	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
872	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
873	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
874	[BUG]  [BUGGY]  if(ze!=  null  &&  entry.getName().endsWith( "/   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null  &&  entry.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null  &&  entry.getName().endsWith( "/   "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
875	[BUG]  [BUGGY]  &&  entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  entry.getName().endsWith( "/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
876	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
877	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(z);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(z);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsDataDescriptorFor(z);	  return    zipEncoding.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
878	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(zipEncoding);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(zipEncoding);	  return    zipEncoding.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
879	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsArchiveEntry(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsArchiveEntry(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsArchiveEntry(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
880	[BUG]  [BUGGY]  if(ze!=  null  &&  entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze!=  null  &&  entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null  &&  entry.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
881	[BUG]  [BUGGY]  if(ze.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getName().equals(zipEncoding))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().equals(zipEncoding))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
882	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsBoundedInputStream(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsBoundedInputStream(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsBoundedInputStream(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
883	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsZip64;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsZip64;	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
884	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  supportsExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsExtraFieldsFor(ze);	  return    hasUTF8Flag    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
885	[BUG]  [BUGGY]  for(ArchiveEntry  e  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  for(ArchiveEntry  e  :  ze.getValue())  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	for(ArchiveEntry  e  :  ze.getValue())  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(ArchiveEntry    ze    :    entry.getValue())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
886	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFileExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsFileExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
887	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entryEncoding)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entryEncoding)&&  supportsFileExtraFieldsFor(ze);	  return    ze.canHandleEntryData(zipEncoding)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
888	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
889	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()!=  null)  {  final  ZipEncoding  entryEncoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	  if(entry.getValue()    ==    null)    {    final    String    encoding    =    ze.getEncoding();    if(encoding!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
890	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsZip64;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsZip64;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsZip64;	  return    ze.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
891	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsZip64(ze);	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
892	[BUG]  [BUGGY]  return  ze.canReadEntry()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntry()  ||  supportsDataDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntry()  ||  supportsDataDescriptorFor(ze);	  return    ze.canReadEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
893	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasEntryDescriptor  &&  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
894	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64For(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsZip64For(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsZip64For(entry);	  return    ze.canHandleEntryData()    &&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
895	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDirectoryDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDirectoryDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsDirectoryDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsFileDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
896	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(ze!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(ze!=  null)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(ze!=  null)  {  return  true;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
897	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(ze!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry  ==  null)  {  if(ze!=  null)  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry  ==  null)  {  if(ze!=  null)  {  return  false;  }	  if(ze!=    null)    {    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
898	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "Archive_ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "Archive_ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
899	[BUG]  [BUGGY]  &&  entry.getName().endsWith( "Archive "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  entry.getName().endsWith( "Archive "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  entry.getName().endsWith( "Archive "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
900	[BUG]  [BUGGY]  if(entry.getName().endsWith( "Archive/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "Archive/ "))  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "Archive/ "))  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "Archive   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
901	[BUG]  [BUGGY]  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsDescriptorFor(ze);	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
902	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDescriptorFor(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
903	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptor;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDataDescriptor;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
904	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptor;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptor;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptor;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
905	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream;  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream;	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
906	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsInputStream(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64(ze);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
907	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(e);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(e);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
908	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canReadArchiveEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadArchiveEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
909	[BUG]  [BUGGY]  if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null  ||  entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
910	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()  ==  null  ||  entry.getName().length()  ==  0)  {  return  true;  }	  if(ze!=    null)    {    if(entry.getName().length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
911	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
912	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsUnicodeExtraFields(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
913	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHandlerFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHandlerFor(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsHandlerFor(ze);	  return    hasDataDescriptor    &&    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
914	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry.getValue())&&  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
915	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)||  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)||  supportsDataDescriptorFor(ze);  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(entry,  ze)||  supportsDataDescriptorFor(ze);  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
916	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64Fields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64Fields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64Fields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsFileExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
917	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  isEntryData(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  isEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  isEntryData(ze);	  return    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
918	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  isDirectoryEntry(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasUTF8Flag  &&  isDirectoryEntry(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  isDirectoryEntry(ze);	  return    hasUTF8Flag    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
919	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(e);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
920	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFieldsFor(entry);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
921	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entriesZip64);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entriesZip64);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(entriesZip64);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
922	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(e);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(e);	  return    ZipUtil.canHandleEntryData(ae)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
923	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(e);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(e);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
924	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsUnicodeExtraFields(entry);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
925	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.canReadEntryData()  ||  supportsUnicodeExtraFields(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsUnicodeExtraFields(ze);	  return    ze.canHandleEntryData()    &&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
926	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry,  ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
927	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry);  }  else  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(entry);  }  else  {  return  true;  }	  if(ze    instanceof    ZipArchiveEntry)    {    return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    }    else    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
928	[BUG]  [BUGGY]  return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
929	[BUG]  [BUGGY]  return  ze!=  null  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze!=  null  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze!=  null  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
930	[BUG]  [BUGGY]  return  ze  ==  null  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  ze  ==  null  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze  ==  null  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    ||    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
931	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  return  hasDataDescriptor  &&  ze.canHandleEntryData(entry);  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ze.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    zipEncoding.canHandleEntryData(entry);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
932	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ ")||  entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
933	[BUG]  [BUGGY]  &&  entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  &&  entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  entry.getName().endsWith( "/ "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
934	[BUG]  [BUGGY]  if(entry.getName().endsWith( ".js "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( ".js "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( ".js "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
935	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( ".zip "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( ".zip "))  {  return  false;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName().endsWith( "/ ")||  ze.getName().endsWith( ".zip "))  {  return  false;  }	  if(ze!=    null)    {    if(entry.getName().endsWith(   "/   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
936	[BUG]  [BUGGY]  if(ze.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(ze.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
937	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;      [BUGGY]  if(entry.getName()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]      &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getName()!=  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	  if(entry.getValue()    ==    null)    {    for(int    i    =    0,    len    =    entry.length;    i    <    len;    ++i)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
