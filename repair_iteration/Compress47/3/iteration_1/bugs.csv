bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  hasDataDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]    [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	  	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64For(ze);	return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
