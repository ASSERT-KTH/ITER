bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze,  entry);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  return  hasEntryDataDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasEntryDataDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDataDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  return  hasDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  return  hasValueDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasValueDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasValueDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsZip64For(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry,  ae)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsZip64For(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag  &&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  return  entry.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  entry.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entry.canHandleEntryData()  &&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsFieldDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  &&  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFunctionDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  final  String  encoding  =  ze.getEncoding();  if(encoding!=  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  Inflater  inf  =  ze.getInputStream();  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  ze.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValue())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  entry.getValues())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0,  len  =  entry.length;  i  <  len;  ++i)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(entry.getValue()  ==  null)  {  for(ArchiveEntry  ze  :  ze.getValue())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsZip64For(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsZip64For(ze);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ae)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  true;  }	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  }  else  {  return  false;  }	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  zipEncoding.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ae)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze  instanceof  ZipArchiveEntry)  {  return  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  }  else  {  return  true;  }	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
76	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(ze)&&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(zipEncoding)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsUnicodeExtraFieldsFor(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  entryEncoding.canHandleEntryData(ze)&&  supportsZip64For(ze);	  return    zipEncoding.canHandleEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  return  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canReadEntryData()  ||  supportsDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  hasUTF8Flag;  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  hasUTF8Flag;	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canReadEntryData(ze)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  return  hasZip64  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasZip64  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasZip64  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  return  hasFlag  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasFlag  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  return  hasEntryDescriptor  &&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasEntryDescriptor  &&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasEntryDescriptor  &&  supportsDataDescriptorFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  supportsUseUnicodeExtraFieldsFor(ze);	  return    hasDataDescriptor    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canHandleEntryData(entry)&&  supportsDataDescriptorFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  zipEncoding.canHandleEntryData(entry);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().equals(zipEncoding))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.hasDataDescriptor())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.canRead())  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.canRead())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().startsWith( "/ "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
106	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().endsWith( "/ "))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
108	[BUG]  [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  ||  ZipUtil.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData(entry)&&  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
110	[BUG]  [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasUTF8Flag  &&  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
111	[BUG]  [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasFlag  &&  ZipUtil.canHandleEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasFlag  &&  ZipUtil.canHandleEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
112	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadEntryData(ze)||  supportsDataDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
113	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsFileDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(entry)||  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)||  supportsUnicodeExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
116	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  canStoredEntriesWithDataDescriptorFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
117	[BUG]  [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ze.canHandleEntryData()  &&  supportsUnicodeExtraFieldsFor(ze);	  return    ze.canHandleEntryData()    &&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
118	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)||  supportsDescriptorFor(ze);	  return    ZipUtil.canReadEntryData(ze)||    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
119	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
120	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsZip64;	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
121	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(entry)&&  supportsFileExtraFieldsFor(ze);	  return    ZipUtil.canHandleEntryData(entry)&&    supportsUnicodeExtraFieldsFor(ze);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
122	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "Archive "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().endsWith( "Archive "))  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().endsWith( "Archive "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  int  pos  =  entryEncoding.indexOf(ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  int  pos  =  entryEncoding.indexOf(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	int  pos  =  entryEncoding.indexOf(ze);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
124	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.UTF8)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getMethod()  ==  ZipEncoding.DEFAULT)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
126	[BUG]  [BUGGY]  if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	if(ze!=  null)  {  if(entry.getName().length()  ==  0)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canHandleEntryData(ze)&&  supportsFileExtraFields(ze);	  return    ZipUtil.canHandleEntryData(ze)&&    supportsUnicodeExtraFields(ze);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
128	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsUnicodeExtraFields(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
129	[BUG]  [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  ZipUtil.canReadEntryData(ze)&&  supportsZip64For(ze);	  return    ZipUtil.canReadEntryData(ze)&&    supportsDataDescriptorFor(ze);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
130	[BUG]  [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;    [BUGGY]  return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);  [BUGGY]    &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	414	415	1	replace	return  hasDataDescriptor  &&  ZipUtil.canReadArchiveEntryData(ze);	  return    hasDataDescriptor    &&    ZipUtil.canHandleEntryData(ze);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
