bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.close())  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  Inflater  bis  =  inf.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  inf.close();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.close();	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(in.close())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.close())  {  inf.flush();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.flush();  }	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.close());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.close());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.close());	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf);	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getValue());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getInputStream();	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
11	[BUG]  [BUGGY]  when(in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  when(in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  when(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  Inflater  bis  =  inf.end();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  inf.end();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.end();	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  InputStream  bis  =  in.getInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  in.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.getInputStream();	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
15	[BUG]  [BUGGY]  Inflater  bis  =  inf.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  inf.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.getInputStream();	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
16	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  when(in.isEnabled())  {  inputStream.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length);	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length());	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length);	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  1);	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  if(in.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled())  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inf.close();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {  inf.end();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  Inflater  inf  =  in.isEnabled();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  in.isEnabled();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  in.isEnabled();	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
26	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.getInputStream();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  if(in.isInputStream())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream())  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream())  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  inf.defaultWriteEncoding();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf.defaultWriteEncoding();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultWriteEncoding();	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  inf.defaultReader();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf.defaultReader();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultReader();	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  inf.write('n');  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf.write('n');  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write('n');	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  inf.defaultWriteStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf.defaultWriteStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultWriteStream();	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  inf!=  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf!=  null)  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null)  {  inf.end();  }	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  inf!=  null  &&  inf.end();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf!=  null  &&  inf.end();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.end();	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf!=  null)  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getInputStream();	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  Inflater  inf  =  in.isInput();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  in.isInput();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  in.isInput();	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  InputStream  bis  =  inf.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  inf.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inf.getInputStream();	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  InputStream  bis  =  in.isInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  in.isInput();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isInput();	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  InputStream  bis  =  in.readInput();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  in.readInput();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readInput();	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  InputStream  bis  =  in.readInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  in.readInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readInputStream();	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding);	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes());	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  entryEncoding.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.getInputStream();	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding);	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.openInputStream();	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
63	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes());	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
65	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  if(in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled())  {  in.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  in.close();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
71	[BUG]  [BUGGY]  Inflater  bis  =  in.getInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  in.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.getInputStream();	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  Inflater  bis  =  in.readIn();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  in.readIn();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.readIn();	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer());	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read());	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getValue());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getValue());	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf);	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  if(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
79	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.end()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.end()  :  null;  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.end()  :  null;	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
80	[BUG]  [BUGGY]  Inflater  bis  =  inf.getInput();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  inf.getInput();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.getInput();	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  if(in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled())  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
82	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.close())  {  in.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  in.close();  }	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry:n "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry:n "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry:n "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
85	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
92	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  return;  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValue()))  {  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  if(in.isInput())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput())  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput())  {  inf.close();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read());  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read());	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  in.flush();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(in);  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  ze.close();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  ze.close();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.close();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.flush();  }	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  inf.getInputStream();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  inf.getInputStream();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inf.getInputStream();	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
104	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
105	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
106	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry!=  null)  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.end();  }	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
109	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.end();  }	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
110	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isInputStream())  {  inf.end();  }	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
111	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.end();  }	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
112	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.end();  }	  if(in.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.close();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  Inflater  inf  =  inputStream.close();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inputStream.close();	  if(in.close())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
114	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.end();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
115	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.end();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
116	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.end();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
117	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.end();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
118	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.end();  }	  if(in.isInput())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
119	[BUG]  [BUGGY]  closeEntry();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  closeEntry();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	closeEntry();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
120	[BUG]  [BUGGY]  inf.closeEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  inf.closeEntry();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.closeEntry();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
122	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
124	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  &&  inf.length  >  0)  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.length  >  0)  {  inf.close();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
125	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( "/ "))  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.endsWith( "/ "))  {  inf.close();  }	  if(in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
128	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
130	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
131	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
132	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
133	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
134	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.end();  }	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
135	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.end();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.end();  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.end();	  if(inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
136	[BUG]  [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
137	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }	  if(inf!=    null)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
138	[BUG]  [BUGGY]  if(inf!=  null)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf!=  null)  {  inputStream.flush();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inputStream.flush();  }	  if(inf!=    null)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  while(inf!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  while(inf!=  null)  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
140	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
141	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf.length  >  0)  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
142	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inf.close();  }	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
143	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf.length  >  0)  {  inputStream.flush();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inputStream.flush();  }	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
144	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(inf.length  >  0)  {  inf.flush();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inf.flush();  }  else  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
145	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
146	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
147	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
148	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
149	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
150	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
151	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
152	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
153	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {    [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
