bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  in.read());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  in.read());	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
2	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  zipEncoding.read());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  zipEncoding.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  zipEncoding.read());	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
3	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  closed);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  closed);	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
4	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  buffer);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  buffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  buffer);	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
5	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
6	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getBytes());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getBytes());	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
7	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  closed);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  closed);	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
8	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getVersion());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getVersion());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getVersion());	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
9	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  inputStream);	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
10	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  encoding);	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
11	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
12	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
13	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
14	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.openEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.openEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.openEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
15	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.isEnabled())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.isEnabled())  {  inf.end();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {  inf.close();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
17	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {  inf.flush();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
18	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {  inf.start();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  in.close();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
21	[BUG]  [BUGGY]  if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
22	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
23	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  inf.close();  }  else  {  Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.close();  }  else  {  Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
24	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
25	[BUG]  [BUGGY]  while(in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  in.close();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
26	[BUG]  [BUGGY]  while(in.isEnabled())  {  in.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  in.close();	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
27	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
28	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.end())  {  inf.close();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  when(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  when(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.end())  {  inputStream.close();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UsageUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
37	[BUG]  [BUGGY]  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
38	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
39	[BUG]  [BUGGY]  SecureZipArchiveEntry  bis  =  new  SecureZipArchiveEntry(entryEncoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  SecureZipArchiveEntry  bis  =  new  SecureZipArchiveEntry(entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	SecureZipArchiveEntry  bis  =  new  SecureZipArchiveEntry(entryEncoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
40	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
41	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
42	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JavaArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
44	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JipArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
45	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
46	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
47	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
48	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
49	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
50	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
51	[BUG]  [BUGGY]  InputStream  bis  =  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.read();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
52	[BUG]  [BUGGY]  InputStream  bis  =  zipEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  zipEncoding.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  zipEncoding.getInputStream();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
53	[BUG]  [BUGGY]  InputStream  bis  =  this.inf.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.inf.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.inf.getInputStream();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
54	[BUG]  [BUGGY]  InputStream  bis  =  in.readLine();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.readLine();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readLine();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
55	[BUG]  [BUGGY]  InputStream  bis  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  entryEncoding.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  entryEncoding.getInputStream();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
56	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
57	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
58	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
59	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
60	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
61	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
62	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Can    not    close    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
63	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Can    not    close    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
64	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  closed);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  closed);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  encoding);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inputStream);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  buf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  buf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  buf);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  in.read());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  in.read());	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  open);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  open);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  open);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
72	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
73	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
74	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
75	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
76	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  curr.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
77	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  continue;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  continue;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
78	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   ")Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
79	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   ")Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
80	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
81	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
82	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
83	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
84	[BUG]  [BUGGY]  if(in!=  null)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  inputStream.flush();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
85	[BUG]  [BUGGY]  while(in!=  null)  {  inputStream.flush();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  inputStream.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  inputStream.flush();	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
86	[BUG]  [BUGGY]  if(in!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
87	[BUG]  [BUGGY]  while(in!=  null)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  inputStream.flush();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
88	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Thread.currentThread().interrupt();	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
89	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.getInputStream();	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
90	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.read());	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
91	[BUG]  [BUGGY]  Inflater  inf  =  this.in.isInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.in.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.in.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
92	[BUG]  [BUGGY]  Inflater  inf  =  entry.isInput();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
93	[BUG]  [BUGGY]  Inflater  inf  =  current.isInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  current.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  current.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
94	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.isInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  inputStream.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inputStream.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
95	[BUG]  [BUGGY]  Inflater  inf  =  ze.isInput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  ze.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  ze.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
96	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.isInput();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  currentEntry.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  currentEntry.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
97	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream.isInput();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  openInputStream.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  openInputStream.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
98	[BUG]  [BUGGY]  Inflater  inf  =  current.isEnabled();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  current.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  current.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  Inflater  inf  =  this.in.isEnabled();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.in.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.in.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
100	[BUG]  [BUGGY]  Inflater  inf  =  entry.isEnabled();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
101	[BUG]  [BUGGY]  Inflater  inf  =  ze.isEnabled();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  ze.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  ze.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
102	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.isEnabled();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  currentEntry.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  currentEntry.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.isEnabled();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
104	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.isEnabled();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  inputStream.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inputStream.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  if(in.length  >  0)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.length  >  0)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.length  >  0)  {  inputStream.flush();  }	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
106	[BUG]  [BUGGY]  if(in.length  >  0)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.length  >  0)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.length  >  0)  {  inputStream.close();  }	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
107	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.flush();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.flush();	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
108	[BUG]  [BUGGY]  Inflater  bis  =  inf.open();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.open();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.open();	  if(in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
109	[BUG]  [BUGGY]  Inflater  bis  =  in.isEnabled();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.isEnabled();	  if(in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
110	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
111	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
112	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  zipEncoding.read());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  zipEncoding.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf,  zipEncoding.read());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
113	[BUG]  [BUGGY]  Inflater  bis  =  zipEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  zipEncoding.openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  zipEncoding.openInputStream();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
114	[BUG]  [BUGGY]  Inflater  bis  =  in.openInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.openInputStream();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
115	[BUG]  [BUGGY]  Inflater  bis  =  this.entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.entryEncoding.openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.entryEncoding.openInputStream();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
116	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.close();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
117	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.closeInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.closeInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.closeInputStream();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
118	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream(true);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream(true);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.openInputStream(true);	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
119	[BUG]  [BUGGY]  if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
120	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
121	[BUG]  [BUGGY]  Inflater  bis  =  in.read();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.read();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
122	[BUG]  [BUGGY]  Inflater  bis  =  in.getInput();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
123	[BUG]  [BUGGY]  Inflater  bis  =  this.inf.getInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.inf.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.inf.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
124	[BUG]  [BUGGY]  Inflater  bis  =  this.in.getInput();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
125	[BUG]  [BUGGY]  Inflater  bis  =  current.getInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  current.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  current.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
126	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
127	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "null ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "null ");  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "null ");	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
128	[BUG]  [BUGGY]  Inflater  inf  =  bis.getInput();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.getInput();	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
129	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
130	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "n ");  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "n ");  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "n ");	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
131	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInput();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.openInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.openInput();	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
132	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
133	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
134	[BUG]  [BUGGY]  if(in  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
135	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
136	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
137	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
138	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getVersion());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getVersion());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getVersion());	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
139	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in);	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
140	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in,  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in,  entryEncoding);	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
141	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getEncoding());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getEncoding());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.getEncoding());	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
142	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.readLine());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.readLine());	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
143	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(encoding);	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
144	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getVersion());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getVersion());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.getVersion());	  InputStream    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
145	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.length  >  0)  {  inf.close();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
146	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf!=  null  ||  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf!=  null  ||  inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf!=  null  ||  inf.length  >  0)  {  inf.close();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
147	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf!=  null)  {  inf.close();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
148	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.length  >  0)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.length  >  0)  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.length  >  0)  {  inf.flush();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
149	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.length  <  =  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.length  <  =  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.length  <  =  0)  {  inf.close();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
150	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
151	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  in.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
152	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalStateException( " ");  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
153	[BUG]  [BUGGY]  if(in.isEnabled())  {  closeEntry();  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  closeEntry();  }  else  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  closeEntry();  }  else  {  in.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
154	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
155	[BUG]  [BUGGY]  if(in.isEnabled())  {  closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  closeEntry();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
156	[BUG]  [BUGGY]  ze.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.closeEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
157	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
158	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( ")UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
159	[BUG]  [BUGGY]  InputStream  bis  =  this.in.isInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
160	[BUG]  [BUGGY]  InputStream  bis  =  zipEncoding.isInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  zipEncoding.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  zipEncoding.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
161	[BUG]  [BUGGY]  InputStream  bis  =  entryEncoding.isInput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  entryEncoding.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  entryEncoding.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
162	[BUG]  [BUGGY]  InputStream  bis  =  ze.isInput();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  ze.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  ze.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
163	[BUG]  [BUGGY]  InputStream  bis  =  in.close();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.close();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
164	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
165	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
166	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.start();  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
167	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
168	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
169	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.cloneEntry());  entry.cloneEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.cloneEntry());  entry.cloneEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.cloneEntry());  entry.cloneEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
170	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entries.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entries.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entries.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
171	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  2);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  2);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
172	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
173	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  4);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  4);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  4);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
174	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  *  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  *  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  *  1);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  3);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  3);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
176	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  1  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
177	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
178	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
179	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
180	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(Exception  e)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
181	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getLength());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getLength());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getLength());	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
182	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
183	[BUG]  [BUGGY]  InputStream  bis  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  getOutputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getOutputStream();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
184	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(in.readLine());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  getInputStream(in.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getInputStream(in.readLine());	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
185	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  getInputStream(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getInputStream(in);	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
186	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(),  in.readLine());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  getInputStream(),  in.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getInputStream(),  in.readLine());	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
187	[BUG]  [BUGGY]  InputStream  bis  =  this.in.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.close();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
188	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  getInputStream(in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  getInputStream(in.read());	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
189	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  in.end()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  in.end()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  in.end()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
190	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  zipEncoding.end()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  zipEncoding.end()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  zipEncoding.end()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
191	[BUG]  [BUGGY]  Inflater  bis  =  inf.enabled()?  entryEncoding.end()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.enabled()?  entryEncoding.end()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.enabled()?  entryEncoding.end()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
192	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.close()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.close()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.close()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
193	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  in.close()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  in.close()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  in.close()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
194	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.start()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.start()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.start()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
195	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.openStream()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.openStream()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.openStream()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
196	[BUG]  [BUGGY]  if(inf!=  null)  {  entryEncoding.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  entryEncoding.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  entryEncoding.end();  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.end();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.end();	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
198	[BUG]  [BUGGY]  if(inf!=  null)  {  entryEncoding  =  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  entryEncoding  =  null;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  entryEncoding  =  null;  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
199	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getKey());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getKey());	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
200	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getValue()  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
201	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  in.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  in.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  in.getValue());	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
202	[BUG]  [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
203	[BUG]  [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ex)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ex)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ex)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
204	[BUG]  [BUGGY]  FileInputStream  bis  =  new  FileInputStream(in.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  FileInputStream  bis  =  new  FileInputStream(in.getAbsolutePath());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	FileInputStream  bis  =  new  FileInputStream(in.getAbsolutePath());	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
205	[BUG]  [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
206	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
207	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
208	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
209	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
210	[BUG]  [BUGGY]  Inflater  inf  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  null;	  if(inf!=    null)    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
211	[BUG]  [BUGGY]  inf.write(encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.write(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write(encoding);	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
212	[BUG]  [BUGGY]  inf.write('n',  encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.write('n',  encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write('n',  encoding);	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
213	[BUG]  [BUGGY]  inf.write('0');  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.write('0');  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write('0');	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
214	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
215	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  entry  =  new  Entry(inf);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  entry  =  new  Entry(inf);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
216	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
217	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
218	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
219	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
220	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
221	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
222	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
223	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
224	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
225	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
226	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
227	[BUG]  [BUGGY]  while(in!=  null  &&  in.length()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.length()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.length()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
228	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
229	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
231	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
232	[BUG]  [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "/   "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "/   "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "/   "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
233	[BUG]  [BUGGY]  InputStream  inf  =  bis.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  bis.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  bis.getInputStream();	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
234	[BUG]  [BUGGY]  InputStream  inf  =  new  ZipInputStream(bis.getBytes());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  new  ZipInputStream(bis.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  new  ZipInputStream(bis.getBytes());	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
235	[BUG]  [BUGGY]  inf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.endsWith( "/   "))  {  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.endsWith( "/   "))  {	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
236	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
237	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
238	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
239	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
240	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
241	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
242	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
243	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.finish();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.finish();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.finish();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
244	[BUG]  [BUGGY]  while(in!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
245	[BUG]  [BUGGY]  while(in!=  null)  {  inputStream.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  inputStream.close();	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
246	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.close();	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
247	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding.getEncoding());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding.getEncoding());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  entryEncoding.getEncoding());	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
248	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getCharset());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getCharset());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getCharset());	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
249	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEntry());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEntry());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEntry());	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
250	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  entryEncoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  entryEncoding);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
251	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  in);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  in);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
252	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inputStream);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inputStream);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
253	[BUG]  [BUGGY]  Inflater  inf  =  bis.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.getInputStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
254	[BUG]  [BUGGY]  Inflater  inf  =  entry.getAsInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.getAsInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.getAsInputStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
255	[BUG]  [BUGGY]  Inflater  inf  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.getEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.getEntry();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
256	[BUG]  [BUGGY]  Inflater  inf  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.getValue();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
257	[BUG]  [BUGGY]  Inflater  inf  =  entry.openStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.openStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.openStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
258	[BUG]  [BUGGY]  Inflater  inf  =  entry.getAsIO();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.getAsIO();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.getAsIO();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
259	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
260	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "TipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "TipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "TipExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
261	[BUG]  [BUGGY]  Inflater  inf  =  inf.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inf.close();	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
262	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isInputStream())  {  inf.close();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
263	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isInputStream())  {  inf.flush();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
264	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.flush();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
265	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isOutputStream())  {  inf.close();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
266	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isInputStream())  {  inf.release();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
267	[BUG]  [BUGGY]  when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
268	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
269	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
270	[BUG]  [BUGGY]  when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
271	[BUG]  [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
272	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
273	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length  -  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length  -  1);	  Inflater    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
274	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf,  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
275	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf);	  Inflater    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
276	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.flush();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
277	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
278	[BUG]  [BUGGY]  while(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
279	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "- "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "- "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "- "))  {  inputStream.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
280	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
281	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "xml "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "xml "))  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "xml "))  {  inputStream.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
282	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
283	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
284	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
285	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
286	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
287	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  closed);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  closed);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
288	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  ze);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  ze);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
289	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  open);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  open);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  open);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
290	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(entry);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(entry);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
291	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  inputStream);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
292	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entriesRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entriesRead);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  entriesRead);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
293	[BUG]  [BUGGY]  Inflater  bis  =  this.in.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.getInputStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
294	[BUG]  [BUGGY]  Inflater  bis  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  current.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  current.getInputStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
295	[BUG]  [BUGGY]  Inflater  bis  =  zipEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  zipEncoding.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  zipEncoding.getInputStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
296	[BUG]  [BUGGY]  Inflater  bis  =  inf.openStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.openStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.openStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
297	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  inf.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
298	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.flush();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
299	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isInput())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isInput())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isInput())  {  inf.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
300	[BUG]  [BUGGY]  while(in.length  >  0)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.length  >  0)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.length  >  0)  {  inputStream.close();  }	  if(inf.length    >    0)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
301	[BUG]  [BUGGY]  while(in.length  >  0)  {  inputStream.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.length  >  0)  {  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.length  >  0)  {  inputStream.close();	  if(inf.length    >    0)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
302	[BUG]  [BUGGY]  if(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
303	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
304	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
305	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inputStream.flush();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
306	[BUG]  [BUGGY]  inf.writeEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.writeEncoding(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.writeEncoding(encoding);	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
307	[BUG]  [BUGGY]  openZipEncoding();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  openZipEncoding();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	openZipEncoding();	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
308	[BUG]  [BUGGY]  inf.defaultWriteEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.defaultWriteEncoding(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultWriteEncoding(encoding);	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
309	[BUG]  [BUGGY]  inf.writeEncode(encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.writeEncode(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.writeEncode(encoding);	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
310	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  inf.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
311	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  inf.start();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
312	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.finish();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.finish();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.finish();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
313	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  openInputStream();	  inf.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
314	[BUG]  [BUGGY]  if(inf!=  null)  {  entry.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  entry.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  entry.end();  }	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
315	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
316	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(entry.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(entry.getValue());	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
317	[BUG]  [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
318	[BUG]  [BUGGY]  InputStream  inf  =  new  ZipInputStream(bis.getBytes(),  bis.endsWith( "- "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  new  ZipInputStream(bis.getBytes(),  bis.endsWith( "- "));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  new  ZipInputStream(bis.getBytes(),  bis.endsWith( "- "));	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
319	[BUG]  [BUGGY]  Inflater  im  =  inf.close();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  im  =  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  im  =  inf.close();	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
320	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled())  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
321	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  in.close();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled())  {  in.close();	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
322	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  current.getInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
323	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  inputStream.getInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
324	[BUG]  [BUGGY]  Inflater  inf  =  this.in.getInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.in.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.in.getInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
325	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  currentEntry.getInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
326	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buf);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
327	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buffer);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  buffer);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
328	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.length());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.length());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.length());	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
329	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buf);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
330	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buffer);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  buffer);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
331	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getByteBuffer(),  in.read());	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
332	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
333	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
334	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
335	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getVal  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getVal	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
336	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
337	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
338	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
339	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
340	[BUG]  [BUGGY]  Inflater  bis  =  in.end();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.end();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
341	[BUG]  [BUGGY]  Inflater  bis  =  in.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.close();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
342	[BUG]  [BUGGY]  Inflater  bis  =  this.in.end();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.end();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
343	[BUG]  [BUGGY]  Inflater  bis  =  inf.start();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.start();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.start();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
344	[BUG]  [BUGGY]  in.defaultWriteStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  in.defaultWriteStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	in.defaultWriteStream();	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
345	[BUG]  [BUGGY]  inf.defaultWriteStream(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.defaultWriteStream(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultWriteStream(encoding);	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
346	[BUG]  [BUGGY]  inf.defaultWriteStream(outputStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.defaultWriteStream(outputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.defaultWriteStream(outputStream);	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
347	[BUG]  [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
348	[BUG]  [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "zip   "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "zip   "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isInputStream()  &&  bis.endsWith( "zip   "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
349	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.getCurrentSize()  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.getCurrentSize()  :  0;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.getCurrentSize()  :  0;	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
350	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.length()  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.length()  :  0;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.length()  :  0;	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
351	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "));	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
352	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.toString()  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.toString()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding,  bis.endsWith( ".zip "))?  inf.toString()  :  null;	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
353	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
354	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
355	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
356	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.start();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
357	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
358	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.flush();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
359	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.start();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
360	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.release();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
361	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.setLength(0);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "- "))  {  inf.setLength(0);  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
362	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closed);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
363	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
364	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  ze);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
365	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
366	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  close);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
367	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  open);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  open);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  open);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
368	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  closed);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  closed);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
369	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
370	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  close);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  close);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  close);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
371	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes()  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
372	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  max);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  max);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  max);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
373	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  open);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  open);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  open);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
374	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.close();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
375	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.flush();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
376	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.finish();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
377	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.start();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.start();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.start();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
378	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.setLength(0);	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
379	[BUG]  [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  inf.end();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  inf.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  ||  inf.length  >  0)  {  inf.end();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
380	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  closed);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  closed);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
381	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  buffer);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
382	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  close);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  close);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  close);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
383	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
384	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getBytes(),  closed);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getBytes(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getBytes(),  closed);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
385	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes()  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
386	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "UnicodeExtraFields  closed ");	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
387	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "UnicodeExtraFields  closed. ");  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "UnicodeExtraFields  closed. ");	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
388	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "UnicodeExtraFields  closed: "  +  encoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
389	[BUG]  [BUGGY]  inf!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null)  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null)  {  inf.flush();  }	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
390	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  new  Inflater(inf.read());	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
391	[BUG]  [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
392	[BUG]  [BUGGY]  FileInputStream  bis  =  new  FileInputStream(encoding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  FileInputStream  bis  =  new  FileInputStream(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	FileInputStream  bis  =  new  FileInputStream(encoding);	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
393	[BUG]  [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  try  {  in.close();  }  catch(Exception  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
394	[BUG]  [BUGGY]  Inflater  bis  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  currentEntry.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  currentEntry.getInputStream();	  Inflater    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
395	[BUG]  [BUGGY]  Inflater  bis  =  openInputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  openInputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  openInputStream.getInputStream();	  Inflater    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
396	[BUG]  [BUGGY]  Inflater  bis  =  inf.openInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.openInputStream();	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
397	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
398	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length()  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
399	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.length()  -  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.length()  -  1);	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
400	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.getBytes());	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
401	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
402	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
403	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
404	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(encoding.getBytes());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(encoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(encoding.getBytes());	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
405	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes( "UTF-8 "));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes( "UTF-8 "));	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
406	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.close());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.close());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.close());	  InputStream    bis    =    new    ZipInputStream(inf.close());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
407	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getMethod());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getMethod());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getMethod());	  InputStream    bis    =    new    ZipInputStream(inf.close());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
408	[BUG]  [BUGGY]  inf!=  null  &&  inf.start();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.start();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.start();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
409	[BUG]  [BUGGY]  inf!=  null  &&  inf.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.close();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
410	[BUG]  [BUGGY]  inf!=  null  ||  inf.end();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  ||  inf.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  ||  inf.end();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
411	[BUG]  [BUGGY]  inf!=  null  &&  inf.finish();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.finish();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.finish();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
412	[BUG]  [BUGGY]  inf  ==  null  &&  inf.end();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  ==  null  &&  inf.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  ==  null  &&  inf.end();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
413	[BUG]  [BUGGY]  while(in.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.close())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.close())  {  in.close();  }	  if(in.close())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
414	[BUG]  [BUGGY]  while(in.close())  {  in.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.close())  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.close())  {  in.close();	  if(in.close())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
415	[BUG]  [BUGGY]  InputStream  bis  =  this.in.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.getInputStream();	  InputStream    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
416	[BUG]  [BUGGY]  InputStream  bis  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  currentEntry.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  currentEntry.getInputStream();	  InputStream    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
417	[BUG]  [BUGGY]  InputStream  bis  =  openInputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  openInputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  openInputStream.getInputStream();	  InputStream    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
418	[BUG]  [BUGGY]  InputStream  bis  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  current.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  current.getInputStream();	  InputStream    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
419	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
420	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
421	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
422	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
423	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
424	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
425	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
426	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.initCurrentSegment()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.initCurrentSegment()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "/   ")?  inf.initCurrentSegment()  :  null;	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
427	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.input()  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.input()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "/   ")?  inf.input()  :  null;	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
428	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.getInputStream()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "/   ")?  inf.getInputStream()  :  null;	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
429	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.clone()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "/   ")?  inf.clone()  :  null;	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
430	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.init()  :  null;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "/   ")?  inf.init()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "/   ")?  inf.init()  :  null;	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
431	[BUG]  [BUGGY]  while(in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
432	[BUG]  [BUGGY]  when(in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
433	[BUG]  [BUGGY]  while(in.isEnabled())  {  inputStream.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  inputStream.close();	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
434	[BUG]  [BUGGY]  InputStream  bis  =  in.isEnabled();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isEnabled();	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
435	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  entryEncoding.getBytes());	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
436	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  in);	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
437	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(encoding.getBytes());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(encoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(encoding.getBytes());	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
438	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(encoding));	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
439	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  closed);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(),  closed);	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
440	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
441	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getKey());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
442	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
443	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
444	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
445	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(in.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(in.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  Entry(in.getValue());  entry.closeEntry();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
446	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.close();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
447	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.flush();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
448	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.start();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
449	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.finish();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.finish();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.finish();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
450	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.getBytes());    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
451	[BUG]  [BUGGY]  InputStream  inf  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.getBytes());    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
452	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.getBytes());    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
453	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
454	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read(),  in.read());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read(),  in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.read(),  in.read());	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
455	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.readLine());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.readLine());	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
456	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read()  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
457	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.read());	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
458	[BUG]  [BUGGY]  ze.flush();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.flush();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
459	[BUG]  [BUGGY]  ze.closeEntry(in);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.closeEntry(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.closeEntry(in);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
460	[BUG]  [BUGGY]  ze.closeAllFiles();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.closeAllFiles();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.closeAllFiles();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
461	[BUG]  [BUGGY]  ze.closeAllEntries();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.closeAllEntries();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.closeAllEntries();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
462	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  getInputStream(bis);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getInputStream(bis);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
463	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
464	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  closeInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  closeInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
465	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getInputStream(bis.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
466	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.inputStream;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.inputStream;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
467	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  getInputStream(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getInputStream(in);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
468	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entry.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entry.getValue());	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
469	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipArchiveEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipArchiveEntry(entry.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipArchiveEntry(entry.getValue());	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
470	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
471	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entry.getBytes());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entry.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entry.getBytes());	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
472	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( "/   "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( "/   "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.endsWith( "/   "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
473	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( ".zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( ".zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.endsWith( ".zip "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
474	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.startsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.startsWith( "/ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.startsWith( "/ "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
475	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( ".zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( ".zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.endsWith( ".zip "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
476	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.close());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.close());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.close());	  if(in.close())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
477	[BUG]  [BUGGY]  Inflater  inf  =  in.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  in.close();	  if(in.close())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
478	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getKey());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getKey());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getKey());	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
479	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getEnd());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getEnd());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getEnd());	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
480	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getValue()  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
481	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  in.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  in.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf,  in.getValue());	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
482	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.openStream());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.openStream());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.openStream());	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
483	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
484	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
485	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInput()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInput()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInput()  :  null;	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
486	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInputStream()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "zip   ")?  inf.getInputStream()  :  null;	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
487	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( ".zip   ")?  inf.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( ".zip   ")?  inf.getInputStream()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( ".zip   ")?  inf.getInputStream()  :  null;	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
488	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "zip   "))  {  inf.start();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
489	[BUG]  [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.input()  :  null;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.endsWith( "zip   ")?  inf.input()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.endsWith( "zip   ")?  inf.input()  :  null;	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
490	[BUG]  [BUGGY]  Inflater  bis  =  this.in.readIn();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
491	[BUG]  [BUGGY]  Inflater  bis  =  openInputStream.readIn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  openInputStream.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  openInputStream.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
492	[BUG]  [BUGGY]  Inflater  bis  =  in.readFully();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.readFully();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.readFully();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
493	[BUG]  [BUGGY]  Inflater  bis  =  ze.readIn();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  ze.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  ze.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
494	[BUG]  [BUGGY]  Inflater  bis  =  open.readIn();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  open.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  open.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
495	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
496	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
497	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
498	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
499	[BUG]  [BUGGY]  InputStream  bis  =  this.in.readInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.readInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
500	[BUG]  [BUGGY]  InputStream  bis  =  in.readFully();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.readFully();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readFully();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
501	[BUG]  [BUGGY]  InputStream  bis  =  zipEncoding.readInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  zipEncoding.readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  zipEncoding.readInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
502	[BUG]  [BUGGY]  InputStream  bis  =  in.readFile();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.readFile();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readFile();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
503	[BUG]  [BUGGY]  InputStream  bis  =  in.readUTF();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.readUTF();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.readUTF();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
504	[BUG]  [BUGGY]  InputStream  bis  =  openInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  openInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
505	[BUG]  [BUGGY]  Inflater  inf  =  bis.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
506	[BUG]  [BUGGY]  Inflater  inf  -=  inputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  -=  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  -=  inputStream.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
507	[BUG]  [BUGGY]  Inflater  inf  =  bis.closeInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.closeInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.closeInputStream();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
508	[BUG]  [BUGGY]  InputStream  inf  =  bis.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  bis.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  bis.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
509	[BUG]  [BUGGY]  while(in!=  null)  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  bis.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  bis.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
510	[BUG]  [BUGGY]  while(in  ==  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in  ==  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in  ==  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
511	[BUG]  [BUGGY]  while(in!=  null)  {  if(in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  if(in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  if(in.isEnabled())  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
512	[BUG]  [BUGGY]  while(in  >=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in  >=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in  >=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
513	[BUG]  [BUGGY]  if(in!=  null)  {  in.flush();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.flush();  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
514	[BUG]  [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.flush();  }  else  {  inputStream.close();  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
515	[BUG]  [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.flush();  }  else  {  out.close();  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
516	[BUG]  [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.flush();  }  else  {  closed  =  true;  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
517	[BUG]  [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.flush();  }  else  {  close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.flush();  }  else  {  close();  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
518	[BUG]  [BUGGY]  Inflater  bis  =  this.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.entryEncoding.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.entryEncoding.getInputStream();	  Inflater    bis    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
519	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.openStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.openStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.openStream();	  Inflater    bis    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
520	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  entryEncoding);	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
521	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(encoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(encoding);	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
522	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getEncoding());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getEncoding());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getEncoding());	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
523	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(zipEncoding);	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
524	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getCharset());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getCharset());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getCharset());	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
525	[BUG]  [BUGGY]  inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  ==  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  ==  null)  {  inf.close();  }	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
526	[BUG]  [BUGGY]  inf  >>  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  >>  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  >>  null)  {  inf.close();  }	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
527	[BUG]  [BUGGY]  inf  >=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  >=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  >=  null)  {  inf.close();  }	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
528	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
529	[BUG]  [BUGGY]  when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
530	[BUG]  [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
531	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entry.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  entry.getValue());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
532	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getKey());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getKey());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
533	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  in.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  in.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  in.getValue());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
534	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  entryEncoding.getValue());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
535	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  entryEncoding);	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
536	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  closed);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  closed);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  closed);	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
537	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getValue()  +  1);	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
538	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.next().length()  >  0)  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.next().length()  >  0)  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.next().length()  >  0)  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
539	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( ".zip "))  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( ".zip "))  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( ".zip "))  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
540	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "n "))  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
541	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "xmlns "))  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "xmlns "))  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "xmlns "))  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
542	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "/ "))  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith( "/ "))  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith( "/ "))  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
543	[BUG]  [BUGGY]  InputStream  bis  =  this.in.readInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
544	[BUG]  [BUGGY]  InputStream  bis  =  zipEncoding.readInput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  zipEncoding.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  zipEncoding.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
545	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.readInput();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
546	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }  else  {  closed  =  true;  }	  if(in!=    null)    {    in.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
547	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  closed  =  false;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  closed  =  false;  }	  if(in!=    null)    {    in.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
548	[BUG]  [BUGGY]  while(in!=  null)  {  bis.close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  bis.close();  }  else  {  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  bis.close();  }  else  {  closed  =  true;  }	  if(in!=    null)    {    in.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
549	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
550	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
551	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JAVAExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JAVAExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.end();  }  else  {  System.err.println( "JAVAExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "JavaExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
552	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
553	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
554	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
555	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
556	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
557	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
558	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
559	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
560	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
561	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
562	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  in.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
563	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
564	[BUG]  [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  outputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
565	[BUG]  [BUGGY]  Inflater  bis  =  this.in.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.close();	  Inflater    bis    =    inf.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
566	[BUG]  [BUGGY]  Inflater  bis  =  ze.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  ze.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  ze.close();	  Inflater    bis    =    inf.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
567	[BUG]  [BUGGY]  Inflater  bis  =  inf.release();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.release();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.release();	  Inflater    bis    =    inf.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
568	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
569	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
570	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
571	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
572	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
573	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
574	[BUG]  [BUGGY]  this.entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  this.entryEncoding.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	this.entryEncoding.closeEntry();	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
575	[BUG]  [BUGGY]  in.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  in.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	in.closeEntry();	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
576	[BUG]  [BUGGY]  Inflater  inf  =  bis.isInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
577	[BUG]  [BUGGY]  Inflater  inf  =  ze.inputInput();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  ze.inputInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  ze.inputInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
578	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.release();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.release();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.release();	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
579	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( ". ");  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
580	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
581	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
582	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  ze);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  ze);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
583	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  out);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  out);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  out);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
584	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  close);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  close);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  close);	  InputStream    bis    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
585	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  inf.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  inf.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  inf.getValue());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
586	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
587	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  ze.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  ze.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  ze.getValue());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
588	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.isInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
589	[BUG]  [BUGGY]  InputStream  bis  =  in.isRead();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  in.isRead();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  in.isRead();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
590	[BUG]  [BUGGY]  if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
591	[BUG]  [BUGGY]  if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
592	[BUG]  [BUGGY]  if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  ==  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
593	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.getByteBuffer());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.getByteBuffer());	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
594	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(in.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(in.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(in.getValue());	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
595	[BUG]  [BUGGY]  if(in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
596	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
597	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
598	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
599	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getBytes());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inf.getBytes());	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
600	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(closed));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(closed));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(closed));	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
601	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(encoding));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes(encoding));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes(encoding));	  InputStream    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
602	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
603	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.canClose())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.canClose())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.canClose())  {  inputStream.close();  }	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
604	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.isEnabled();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.isEnabled();	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
605	[BUG]  [BUGGY]  InputStream  bis  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  ze.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  ze.getInputStream();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
606	[BUG]  [BUGGY]  InputStream  bis  =  inf.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inf.close();	  InputStream    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
607	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
608	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
609	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "JSC_Failed  to  close  entry.   ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "JSC_Failed  to  close  entry.   ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "JSC_Failed  to  close  entry.   ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
610	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
611	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
612	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
613	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
614	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
615	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
616	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
617	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  in.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
618	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
619	[BUG]  [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  closeEntry();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
620	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   ")Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
621	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.close();  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
622	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.finish();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  inf.finish();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {  inf.finish();  }	  if(in.isEnabled()    ||    inf.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
623	[BUG]  [BUGGY]  while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
624	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
625	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
626	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  this.inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
627	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.close();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length);  inputStream.close();	  if(inf.length    >    0)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
628	[BUG]  [BUGGY]  InputStream  bis  =  ze.readInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  ze.readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  ze.readInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
629	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.readInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.readInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
630	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
631	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(entry!=  null)  {  inf.end();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
632	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.close());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.close());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.close());	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
633	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding,  in);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding,  in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding,  in);	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
634	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(encoding));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(encoding));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(encoding));	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
635	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
636	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf,  inf.getBytes());	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
637	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.open());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.open());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.open());	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
638	[BUG]  [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.read()  >  0)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
639	[BUG]  [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  in.close();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.read()  >  0)  {  in.close();	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
640	[BUG]  [BUGGY]  if(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  in.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
641	[BUG]  [BUGGY]  if(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  inputStream.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
642	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
643	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.flush();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
644	[BUG]  [BUGGY]  if(in.isInputStream()  ||  in.endsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  in.endsWith( "/ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  in.endsWith( "/ "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
645	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.start();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
646	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
647	[BUG]  [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  &&  bis.endsWith( "- "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
648	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "- "))  {  inf.flush();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
649	[BUG]  [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( "-- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( "-- "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  &&  bis.endsWith( "-- "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
650	[BUG]  [BUGGY]  if(in.isInputStream()  ||  in.endsWith( "- "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  in.endsWith( "- "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  in.endsWith( "- "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
651	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(zipEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(zipEncoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(zipEncoding.getBytes());	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
652	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
653	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
654	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Can    not    close    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
655	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "Can  not  close  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Can    not    close    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
656	[BUG]  [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }	  if(inf.length    >    0)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
657	[BUG]  [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(inf.length  >  0)  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
658	[BUG]  [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(inf.length  >  0)  {  inf.close();  }  else  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
659	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.flush();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
660	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.start();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
661	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/ "))  {  inf.release();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
662	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".js "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".js "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( ".js "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
663	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
664	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.flush();  }	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
665	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.start();  }	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
666	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.finish();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.finish();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.finish();  }	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
667	[BUG]  [BUGGY]  zipEncoding.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  zipEncoding.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	zipEncoding.close();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
668	[BUG]  [BUGGY]  ze.close(in);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ze.close(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ze.close(in);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
669	[BUG]  [BUGGY]  Inflater  bis  =  inf.next();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.next();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.next();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
670	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
671	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getValue(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
672	[BUG]  [BUGGY]  if(in.isInputStream()  &&  bis.isInputStream())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  &&  bis.isInputStream())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  &&  bis.isInputStream())  {  inf.end();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
673	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isInputStream())  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isInputStream())  {  inf.start();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
674	[BUG]  [BUGGY]  inf!=  null  &&  inf.flush();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.flush();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
675	[BUG]  [BUGGY]  Inflater.this.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater.this.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater.this.close();	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
676	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
677	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
678	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
679	[BUG]  [BUGGY]  when(in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  in.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
680	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.endsWith(zipEncoding))  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.endsWith(zipEncoding))  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.endsWith(zipEncoding))  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
681	[BUG]  [BUGGY]  when(in.isEnabled())  {  bis.end();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled())  {  bis.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled())  {  bis.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
682	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
683	[BUG]  [BUGGY]  inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.length  >  0)  {  inf.close();  }	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
684	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
685	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getValu	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
686	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.getVal	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
687	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
688	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
689	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.clone());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
690	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  16);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  16);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  16);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
691	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
692	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
693	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
694	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
695	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
696	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( ".js "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.endsWith( ".js "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.endsWith( ".js "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
697	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( "./ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inf.endsWith( "./ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inf.endsWith( "./ "))  {  inf.close();  }	  if(in.isEnabled()    &&    inf.endsWith(   "/   "))    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
698	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isVersion())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isVersion())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isVersion())  {  in.close();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
699	[BUG]  [BUGGY]  if(in.isEnabled())  {  in.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled())  {  in.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled())  {  in.flush();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
700	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
701	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
702	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
703	[BUG]  [BUGGY]  if(in.isInput()  &&  bis.endsWith( "- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  bis.endsWith( "- "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  bis.endsWith( "- "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
704	[BUG]  [BUGGY]  if(in.isInput()  &&  bis.endsWith( "-- "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  bis.endsWith( "-- "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  bis.endsWith( "-- "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
705	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf  ==  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf  ==  null)  {  inf.close();  }	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
706	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.release();  }	  while(inf!=    null    &&    inf.length    >    0)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
707	[BUG]  [BUGGY]  InputStream  bis  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  this.in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  this.in.read();	  InputStream    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
708	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
709	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
710	[BUG]  [BUGGY]  InputStream  bis  =  ze.readInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  ze.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  ze.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
711	[BUG]  [BUGGY]  if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
712	[BUG]  [BUGGY]  if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
713	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
714	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
715	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.getBytes());    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
716	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValu  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValu	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
717	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
718	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
719	[BUG]  [BUGGY]  Inflater  bis  =  inf.closeInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.closeInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.closeInputStream();	  Inflater    bis    =    inf.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
720	[BUG]  [BUGGY]  inf  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  =  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  =  null;	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
721	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  =  new  ZipInputStream(in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  =  new  ZipInputStream(in.read());	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
722	[BUG]  [BUGGY]  inf  =  new  ZipInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  =  new  ZipInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  =  new  ZipInputStream();	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
723	[BUG]  [BUGGY]  if(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
724	[BUG]  [BUGGY]  inputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inputStream.close();	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
725	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getChars());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getChars());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getChars());	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
726	[BUG]  [BUGGY]  Inflater  bis  =  in.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.closeEntry();	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
727	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
728	[BUG]  [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
729	[BUG]  [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  try  {  in.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  try  {  in.close();  }  catch(Exception  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
730	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
731	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
732	[BUG]  [BUGGY]  if(in.isInput()  &&  bis.endsWith( "n   "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  bis.endsWith( "n   "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  bis.endsWith( "n   "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
733	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
734	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "z "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "z "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "z "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
735	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "n "))  {  inf.start();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
736	[BUG]  [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  &&  bis.endsWith( ".zip "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
737	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
738	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
739	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( ".zip "))  {  inf.start();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
740	[BUG]  [BUGGY]  if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in  =  new  ZipArchiveEntry();  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
741	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inputStream.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inputStream.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inputStream.length);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
742	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read(),  inputStream);	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
743	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.readFully());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.readFully());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.readFully());	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
744	[BUG]  [BUGGY]  Inflater.this.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater.this.closeEntry(inf,  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater.this.closeEntry(inf,  entryEncoding);	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
745	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.open();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.open();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.open();	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
746	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(entry  ==  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
747	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(entry  ==  null)  {  inf.end();  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
748	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.length);	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
749	[BUG]  [BUGGY]  inf.write('n',  'n');  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.write('n',  'n');  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write('n',  'n');	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
750	[BUG]  [BUGGY]  inf.write('n',  '-');  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.write('n',  '-');  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.write('n',  '-');	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
751	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  inputStream.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in);  inputStream.close();	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
752	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read());  inputStream.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.read());  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.read());  inputStream.close();	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
753	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.close());  inputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in.close());  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(in.close());  inputStream.close();	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
754	[BUG]  [BUGGY]  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
755	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.inflate(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.inflate(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.inflate(inf);	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
756	[BUG]  [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
757	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
758	[BUG]  [BUGGY]  Inflater  bis  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  ze.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  ze.getInputStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
759	[BUG]  [BUGGY]  int  inputStream.length  >  0)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  int  inputStream.length  >  0)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	int  inputStream.length  >  0)  {  inputStream.flush();  }	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
760	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
761	[BUG]  [BUGGY]  while(in  <  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in  <  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in  <  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
762	[BUG]  [BUGGY]  while(in.read()!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.read()!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.read()!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
763	[BUG]  [BUGGY]  Inflater  bis  =  inputStream.readIn();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inputStream.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inputStream.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
764	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.readIn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
765	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.open());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.open());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.open());	  InputStream    bis    =    new    ZipInputStream(inf.close());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
766	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.close(),  inf.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.close(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.close(),  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.close());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
767	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.close());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.close());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  zipEncoding.close());	  InputStream    bis    =    new    ZipInputStream(inf.close());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
768	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
769	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
770	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inside.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inside.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inside.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
771	[BUG]  [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
772	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.close();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
773	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.flush();  }	  if(in.isEnabled()    ||    bis.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
774	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream(in);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.openInputStream(in);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.openInputStream(in);	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
775	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.closeEntry();	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
776	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
777	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
778	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  ze);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  ze);	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
779	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  in.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in,  in.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in,  in.read());	  Inflater    bis    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
780	[BUG]  [BUGGY]  Inflater  inf  =  entry.open();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.open();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.open();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
781	[BUG]  [BUGGY]  Inflater  inf  =  entry.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entry.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entry.close();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
782	[BUG]  [BUGGY]  Inflater  inf  =  bis.closeInput();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.closeInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.closeInput();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
783	[BUG]  [BUGGY]  Inflater  bis  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inputStream.getInputStream();	  Inflater    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
784	[BUG]  [BUGGY]  Inflater  bis  =  zipEncoding.enabled()?  inf.end()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  zipEncoding.enabled()?  inf.end()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  zipEncoding.enabled()?  inf.end()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
785	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.open()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.open()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.open()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
786	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.release()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  inf.release()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  inf.release()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
787	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "z "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "z "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "z "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
788	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.start();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
789	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "js "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "js "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "js "))  {  inf.end();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
790	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  in.available());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  in.available());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  in.available());	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
791	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read()  +  1);	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
792	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read()  -  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read()  -  1);	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
793	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
794	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
795	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer()  +  1);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getByteBuffer()  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.getByteBuffer());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
796	[BUG]  [BUGGY]  if(in.isInput()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  bis.endsWith( ".zip "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  bis.endsWith( ".zip "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
797	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
798	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.start();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
799	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( ".zip "))  {  inf.flush();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
800	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
801	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
802	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
803	[BUG]  [BUGGY]  Inflater  inf  =  bis.isEnabled();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
804	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  ze.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  ze.getInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
805	[BUG]  [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.getOutputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
806	[BUG]  [BUGGY]  Inflater  inf  =  bis.nextInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  bis.nextInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  bis.nextInputStream();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
807	[BUG]  [BUGGY]  Inflater  bis  =  in.isInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  in.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  in.isInput();	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
808	[BUG]  [BUGGY]  if(in.isInput()  &&  in.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  in.isEnabled())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  in.isEnabled())  {  inf.end();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
809	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  inf.release();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
810	[BUG]  [BUGGY]  if(in.isInput()  &&  inf.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  &&  inf.isEnabled())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  &&  inf.isEnabled())  {  inf.end();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
811	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
812	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  if(entry!=  null)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
813	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
814	[BUG]  [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  if(in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
815	[BUG]  [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null)  {  if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null)  {  if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
816	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
817	[BUG]  [BUGGY]  inputStream.end();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inputStream.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inputStream.end();	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
818	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
819	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  bis);	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
820	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  inf.length);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
821	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  closing);  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
822	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(zipEncoding);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
823	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inputStream);	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
824	[BUG]  [BUGGY]  inputStream.flush();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inputStream.flush();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inputStream.flush();	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
825	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "JavaExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
826	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "JavaExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
827	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
828	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UsageUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
829	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UsageUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
830	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(zipEncoding.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(zipEncoding.getBytes());	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
831	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(in));	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
832	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(entryEncoding.getBytes(closed));	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
833	[BUG]  [BUGGY]  Inflater  bis  =  ze.getInput();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  ze.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  ze.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
834	[BUG]  [BUGGY]  Inflater  bis  =  inputStream.getInput();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inputStream.getInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inputStream.getInput();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
835	[BUG]  [BUGGY]  Inflater  bis  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entry.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entry.getInputStream();	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
836	[BUG]  [BUGGY]  if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  entry.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
837	[BUG]  [BUGGY]  if(in.read()  >  0)  {  inputStream.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  inputStream.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  inputStream.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
838	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
839	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
840	[BUG]  [BUGGY]  if(in!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  inf.close();  }	  if(in.close())    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
841	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
842	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith(zipEncoding))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
843	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf.length  >  0)  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inputStream.close();  }  else  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
844	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.isEnabled())  {  inf.close();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
845	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.isEnabled())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.isEnabled())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.isEnabled())  {  inf.flush();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
846	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isEnabled())  {  in.close();  }	  if(in.isInput()    ||    in.isEnabled())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
847	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
848	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  entry.closeEntry();	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
849	[BUG]  [BUGGY]  if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
850	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
851	[BUG]  [BUGGY]  if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  else  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  else  {  in.close();  }	  final    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
852	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.read());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes(),  inf.read());	  Inflater    bis    =    new    ZipInputStream(inf.getBytes());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
853	[BUG]  [BUGGY]  Entry  <  K,  V>  entryEncoding  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  K,  V>  entryEncoding  =  entryEncoding.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  K,  V>  entryEncoding  =  entryEncoding.getValue();	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
854	[BUG]  [BUGGY]  Entry  <  ZipEncoding,  ZipEncoding>  entryEncoding  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipEncoding,  ZipEncoding>  entryEncoding  =  entry.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipEncoding,  ZipEncoding>  entryEncoding  =  entry.getValue();	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
855	[BUG]  [BUGGY]  Entry  <  ZipEncoding>  entryEncoding  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipEncoding>  entryEncoding  =  entryEncoding.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipEncoding>  entryEncoding  =  entryEncoding.getValue();	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "UseUnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
856	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "zip   "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "zip   "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "zip   "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
857	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/.zip "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   ".zip   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
858	[BUG]  [BUGGY]  if(in.isInputStream()  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
859	[BUG]  [BUGGY]  if(in.isInputStream()  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  inf.close();  }	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
860	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
861	[BUG]  [BUGGY]  if(in.isInputStream()  ||  in.isVersion())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  in.isVersion())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  in.isVersion())  {  inf.close();  }	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
862	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isEnabled(ZipArchiveEntry.DEFAULT_SIZE))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isEnabled(ZipArchiveEntry.DEFAULT_SIZE))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isEnabled(ZipArchiveEntry.DEFAULT_SIZE))  {  inf.close();  }	  if(in.isInputStream())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
863	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.start();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.start();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
864	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.start();  }  else  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  entry.closeEntry();  }	  if(inf!=    null)    {    inf.start();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
865	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  inputStream.close();  }	  inf.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
866	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in);  entry.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in);  entry.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in);  entry.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
867	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.closeEntry();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
868	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.readLine());  entry.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.readLine());  entry.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.readLine());  entry.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
869	[BUG]  [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  closeEntry();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(in.getValue());  entry.close();  }	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
870	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
871	[BUG]  [BUGGY]  while(in!=  null  &&  bis.next().length  >  0)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  bis.next().length  >  0)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  bis.next().length  >  0)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
872	[BUG]  [BUGGY]  if(inf!=  null)  {  entry.start();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  entry.start();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  entry.start();  }	  if(entry!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
873	[BUG]  [BUGGY]  Inflater  bis  =  inf.read();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.read();	  Inflater    bis    =    inf.getInput();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
874	[BUG]  [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
875	[BUG]  [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
876	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
877	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inner.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
878	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
879	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
880	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entryEncoding  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entryEncoding  =  entryEncoding.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entryEncoding  =  entryEncoding.getValue();	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "ZipArchiveEntry    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
881	[BUG]  [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  bis.isEnabled())  {  inputStream.flush();  }  else  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
882	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.encode(zipEncoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.encode(zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.encode(zipEncoding);	  Inflater    bis    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
883	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
884	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
885	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
886	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
887	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
888	[BUG]  [BUGGY]  while(in.read()  >  0)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.read()  >  0)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.read()  >  0)  {  inputStream.flush();  }	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
889	[BUG]  [BUGGY]  if(inf.length  >  0)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf.length  >  0)  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  in.close();  }	  if(inf.length    >    0)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
890	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.openInputStream();	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
891	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getOutputFile();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.getOutputFile();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.getOutputFile();	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
892	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipBuffer);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipBuffer);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.encode(zipBuffer);	  inf.defaultWriteEncoding();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
893	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  K,  V>  entry  =  entryEncoding.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  K,  V>  entry  =  entryEncoding.getValue();	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   "Current    entry:n   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
894	[BUG]  [BUGGY]  inf  >>  null  &&  inf.close();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  >>  null  &&  inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  >>  null  &&  inf.close();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
895	[BUG]  [BUGGY]  inf!=  null  &&  bis.end();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  bis.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  bis.end();	  inf!=    null    &&    inf.end();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
896	[BUG]  [BUGGY]  if(in.isInput()  ||  in.endsWith( "/ "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.endsWith( "/ "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.endsWith( "/ "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
897	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.isInput())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.isInput())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.isInput())  {  inf.close();  }	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
898	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isVersion())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isVersion())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isVersion())  {  inf.close();  }	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
899	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isOutput())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isOutput())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isOutput())  {  inf.close();  }	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
900	[BUG]  [BUGGY]  if(in.isInput()  ||  in.isInput())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.isInput())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.isInput())  {  inf.close();  }	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
901	[BUG]  [BUGGY]  if(in.isInput())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput())  {  in.close();  }	  if(in.isInput())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
902	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in  ==  null)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in!=    null)    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
903	[BUG]  [BUGGY]  inf!=  null)  {  this.inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null)  {  this.inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null)  {  this.inf.close();  }	  inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
904	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  out.read());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(in.read(),  out.read());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(in.read(),  out.read());	  Inflater    bis    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
905	[BUG]  [BUGGY]  while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
906	[BUG]  [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.read()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
907	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  out.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    out.close();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
908	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
909	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf);  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf);  entry.closeEntry();	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
910	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getName());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getName());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.getName());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
911	[BUG]  [BUGGY]  inf  ==  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf  ==  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf  ==  null)  {  inf.end();  }	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
912	[BUG]  [BUGGY]  inf!=  null  &&  inf.length  >  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf!=  null  &&  inf.length  >  0);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf!=  null  &&  inf.length  >  0);	  inf!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
913	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0,  0);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0,  0);	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
914	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	this.entryEncoding  =  entryEncoding.encode(zipBuffer,  0);	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
915	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.close();  }	  if(entry    ==    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
916	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  closeEntry();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
917	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in.readLine());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  getInputStream(in.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  getInputStream(in.readLine());	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
918	[BUG]  [BUGGY]  inf.endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  inf.endsWith( "- "))  {  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	inf.endsWith( "- "))  {	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
919	[BUG]  [BUGGY]  InputStream  inf  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  inputStream.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  inputStream.getInputStream();	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
920	[BUG]  [BUGGY]  InputStream  inf  =  inputStream.openStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  inf  =  inputStream.openStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  inf  =  inputStream.openStream();	  if(in.isInputStream()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
921	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf,  inf.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf,  inf.getValue());	  Inflater    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
922	[BUG]  [BUGGY]  while(inputStream!=  null)  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inputStream!=  null)  {  bis.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inputStream!=  null)  {  bis.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
923	[BUG]  [BUGGY]  while(inputStream!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inputStream!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inputStream!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
924	[BUG]  [BUGGY]  while(inStream!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inStream!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inStream!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
925	[BUG]  [BUGGY]  while(intainer!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(intainer!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(intainer!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
926	[BUG]  [BUGGY]  while(inferred!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inferred!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inferred!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
927	[BUG]  [BUGGY]  while(inported!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inported!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inported!=  null)  {  inputStream.close();  }	  while(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
928	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inf.getValue());	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
929	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.openStream());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.openStream());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.openStream());	  InputStream    bis    =    new    ZipInputStream(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
930	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.isEnabled()?  in.close()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  inputStream.isEnabled()?  in.close()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  inputStream.isEnabled()?  in.close()  :  null;	  if(in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
931	[BUG]  [BUGGY]  if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
932	[BUG]  [BUGGY]  if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
933	[BUG]  [BUGGY]  Inflater  bis  =  this.inf.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.inf.getInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.inf.getInputStream();	  Inflater    bis    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
934	[BUG]  [BUGGY]  if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  <  =  0)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
935	[BUG]  [BUGGY]  if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.read()  >  0)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(in.read()    >    0)    {    inf.flush();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
936	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
937	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
938	[BUG]  [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding  ==  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding  ==  null)  {  inf.end();  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
939	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(zipEncoding!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(zipEncoding!=  null)  {  inf.close();  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
940	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  entryEncoding.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  entryEncoding.close();  }	  if(entryEncoding!=    null)    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
941	[BUG]  [BUGGY]  when(in.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.close())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.close())  {  in.close();  }	  if(in.close())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
942	[BUG]  [BUGGY]  if(in.isInput()  ||  in.endsWith( "- "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  in.endsWith( "- "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  in.endsWith( "- "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "-   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
943	[BUG]  [BUGGY]  InputStream  bis  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  readInputStream();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
944	[BUG]  [BUGGY]  InputStream  bis  =  createInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  createInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  createInputStream();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
945	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.close())  {  this.inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.close())  {  this.inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.close())  {  this.inf.close();  }	  if(in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
946	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.close())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  inf.close())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  inf.close())  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
947	[BUG]  [BUGGY]  Inflater  inf  =  immutableAndCloseUnicodeExtraFields.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  immutableAndCloseUnicodeExtraFields.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  immutableAndCloseUnicodeExtraFields.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
948	[BUG]  [BUGGY]  Inflater  inf  =  immutableAndCloseInputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  immutableAndCloseInputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  immutableAndCloseInputStream.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
949	[BUG]  [BUGGY]  Inflater  inf  =  immutableAndCloseFileInputStream.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  immutableAndCloseFileInputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  immutableAndCloseFileInputStream.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
950	[BUG]  [BUGGY]  Inflater  inf  =  up.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  up.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  up.close();	  Inflater    inf    =    inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
951	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inputStream!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inputStream!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
952	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inputStream!=  null)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inputStream!=  null)  {  inputStream.flush();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
953	[BUG]  [BUGGY]  while(inputStream!=  null)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inputStream!=  null)  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inputStream!=  null)  {  inputStream.flush();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
954	[BUG]  [BUGGY]  if(intainer!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(intainer!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(intainer!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
955	[BUG]  [BUGGY]  while(inputStream!=  null)  {  inputStream.close();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inputStream!=  null)  {  inputStream.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inputStream!=  null)  {  inputStream.close();	  if(inf!=    null)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
956	[BUG]  [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  in.getBytes());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  in.getBytes());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  in.getBytes());  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
957	[BUG]  [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
958	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
959	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValue())  {  return	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
960	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.next();  if(entry.getValue()  ==  entry.getValu	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
961	[BUG]  [BUGGY]  Inflater  bis  =  this.inf.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.inf.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.inf.close();	  Inflater    bis    =    inf.close();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
962	[BUG]  [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }  else  {  inputStream.close();  }	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
963	[BUG]  [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.defaultWriteStream();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.defaultWriteStream();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.defaultWriteStream();  }	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
964	[BUG]  [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream  =  null;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream  =  null;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream  =  null;  }	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
965	[BUG]  [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.writeFileName(encoding);  }	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
966	[BUG]  [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  inf.close();  }  else  {  inputStream.close();  }	  inf.defaultWriteStream();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
967	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  out.write('n');  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	out.write('n');	  inf.write('n');    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
968	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(inf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.encode(inf);	  if(in.isEnabled()    &&    inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
969	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  System.err.println( "Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.close();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
970	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.close();    }    else    {    System.err.println(   "Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
971	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  in.close();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
972	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {  out.close();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
973	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  this.in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  this.in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  this.in.close();  }	  if(in.isEnabled())    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
974	[BUG]  [BUGGY]  if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  if(inf!=    null)    {    inf.close();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
975	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  bis.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  bis.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  bis.close();	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
976	[BUG]  [BUGGY]  if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in  =  new  ZipInputStream(in.read());  }  else  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    in.close();    }    else    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
977	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
978	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
979	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipArchiveEntry  closed: "  +  entryEncoding);  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
980	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  entryEncoding);  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
981	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
982	[BUG]  [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
983	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  close();  }  else  {  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  close();  }  else  {  closed  =  true;  }	  if(in!=    null)    {    in.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
984	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.isEnabled();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.isEnabled();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.entryEncoding.isEnabled();	  Inflater    inf    =    in.isEnabled();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
985	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(outputStream.getBytes());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(outputStream.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(outputStream.getBytes());	  Inflater    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
986	[BUG]  [BUGGY]  CloseEntry  entry  =  new  CloseEntry(in.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  CloseEntry  entry  =  new  CloseEntry(in.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	CloseEntry  entry  =  new  CloseEntry(in.getValue());  entry.closeEntry();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
987	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(in.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  entry  =  new  Entry(in.getValue());  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  entry  =  new  Entry(in.getValue());  entry.closeEntry();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
988	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
989	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  in  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  in  =  entry.getValue();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  in  =  entry.getValue();	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
990	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entryEncoding.encode(in.getValue());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entryEncoding.encode(in.getValue());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entryEncoding.encode(in.getValue());	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(in.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
991	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.close());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf.close());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf.close());	  Inflater    bis    =    new    ZipArchiveEntry(inf.getValue());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
992	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(outputStream.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(outputStream.getBytes());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(outputStream.getBytes());	  InputStream    bis    =    new    ZipInputStream(entryEncoding.getBytes());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
993	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
994	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inputStream.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  inputStream.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  inputStream.isEnabled())  {  inf.close();  }  else  {  inputStream.close();  }	  if(in.isEnabled())    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
995	[BUG]  [BUGGY]  if(entry  ==  null)  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry  ==  null)  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry  ==  null)  {  inf.end();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf);    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
996	[BUG]  [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  i++)  {  current.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  i++)  {  current.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
997	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  zipEncoding);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
998	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  this);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  this);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getEncoding(),  this);	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
999	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getEncoding());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.getEncoding());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inf.getEncoding());	  InputStream    bis    =    new    ZipInputStream(inf.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
1000	[BUG]  [BUGGY]  SecureFileInputStream  bis  =  new  SecureFileInputStream(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  SecureFileInputStream  bis  =  new  SecureFileInputStream(zipEncoding);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	SecureFileInputStream  bis  =  new  SecureFileInputStream(zipEncoding);	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1001	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }	  if(in!=    null)    {    in.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1002	[BUG]  [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.enabled)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  closed  =  true;  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1003	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clon  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clon  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clon	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1004	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone()  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone()  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone()	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1005	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1006	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  closed  =  true	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1007	[BUG]  [BUGGY]  while(in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled())  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
1008	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	final  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());	  if(inf!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1009	[BUG]  [BUGGY]  in.isInput()  &&  bis.endsWith( "null "))  {  inf.end();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  in.isInput()  &&  bis.endsWith( "null "))  {  inf.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	in.isInput()  &&  bis.endsWith( "null "))  {  inf.end();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1010	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "next "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "next "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "next "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1011	[BUG]  [BUGGY]  if(in.isInput()  ||  bis.endsWith( "null "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInput()  ||  bis.endsWith( "null "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInput()  ||  bis.endsWith( "null "))  {  inf.close();  }	  if(in.isInput()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1012	[BUG]  [BUGGY]  while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.length  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1013	[BUG]  [BUGGY]  while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.size()  >  0)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1014	[BUG]  [BUGGY]  if(inStream!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inStream!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inStream!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1015	[BUG]  [BUGGY]  if(infactory!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(infactory!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(infactory!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1016	[BUG]  [BUGGY]  if(intainer  ==  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(intainer  ==  null)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(intainer  ==  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1017	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.close())  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1018	[BUG]  [BUGGY]  System.err.println( "Failed  to  close  entry.   ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  System.err.println( "Failed  to  close  entry.   ");  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	System.err.println( "Failed  to  close  entry.   ");	  if(in.close())    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1019	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1020	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1021	[BUG]  [BUGGY]  while(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(inf!=  null)  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(inf!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1022	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry(inf);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  new  ZipArchiveEntry(inf);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
1023	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  entry);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  entry);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
1024	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  closing);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf,  closing);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf,  closing);	  Inflater    bis    =    new    ZipArchiveEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
1025	[BUG]  [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1026	[BUG]  [BUGGY]  while(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled()  &&  bis.isEnabled())  {  inputStream.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1027	[BUG]  [BUGGY]  when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  in.isEnabled())  {  inputStream.flush();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1028	[BUG]  [BUGGY]  when(in.isEnabled()  &&  bis.canClose())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  &&  bis.canClose())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  &&  bis.canClose())  {  inputStream.end();  }	  when(in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1029	[BUG]  [BUGGY]  InputStream  bis  =  current.readInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  current.readInputStream();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  current.readInputStream();	  InputStream    bis    =    in.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1030	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  this.inf.end()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  this.inf.end()  :  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  this.inf.end()  :  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1031	[BUG]  [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  ZipEncoding.end(inf):  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  entryEncoding.enabled()?  ZipEncoding.end(inf):  null;  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  entryEncoding.enabled()?  ZipEncoding.end(inf):  null;	  Inflater    bis    =    entryEncoding.enabled()?    inf.end()    :    null;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1032	[BUG]  [BUGGY]  Inflater  inf  =  in.read();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  in.read();	  Inflater    inf    =    inf.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1033	[BUG]  [BUGGY]  while(in.close())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.close())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.close())  {  inf.flush();  }	  if(in.close())    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1034	[BUG]  [BUGGY]  when(in.close())  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.close())  {  inf.flush();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.close())  {  inf.flush();  }	  if(in.close())    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1035	[BUG]  [BUGGY]  when(in.close())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.close())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.close())  {  inf.close();  }	  if(in.close())    {    inf.flush();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1036	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.isInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  entryEncoding.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  entryEncoding.isInput();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1037	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  inf  =  this.in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  inf  =  this.in.read();	  Inflater    inf    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1038	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1039	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.get	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1040	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1041	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in.clone();  if(entry.getValue().equals(entry.	  if(in!=    null)    {    for(int    i    =    0;    i    <    in.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)in.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1042	[BUG]  [BUGGY]  Inflater  bis  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  this.in.read();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  this.in.read();	  Inflater    bis    =    in.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1043	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1,  inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1,  inf.length);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  1,  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1044	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  *  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  *  2);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  *  2);	  InputStream    bis    =    new    ZipInputStream(inf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1045	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1046	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.readLine());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.readLine());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.readLine());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1047	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.release());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.release());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.release());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1048	[BUG]  [BUGGY]  Inflater  bis  =  current.readIn();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  current.readIn();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  current.readIn();	  Inflater    bis    =    in.readIn();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1049	[BUG]  [BUGGY]  zipEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  zipEncoding.closeEntry();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	zipEncoding.closeEntry();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1050	[BUG]  [BUGGY]  while(in.read()  >  0)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.read()  >  0)  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.read()  >  0)  {  inputStream.close();  }	  if(inf.length    >    0)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1051	[BUG]  [BUGGY]  InputStream  bis  =  current.isInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  current.isInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  current.isInput();	  InputStream    bis    =    in.isInput();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1052	[BUG]  [BUGGY]  if(in.isEnabled()  ||  im.isEnabled())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isEnabled()  ||  im.isEnabled())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isEnabled()  ||  im.isEnabled())  {  inf.close();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
1053	[BUG]  [BUGGY]  if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1054	[BUG]  [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1055	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  catch(IOException  ioe)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1056	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isAbsolute())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isAbsolute())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isAbsolute())  {  inf.close();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
1057	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.isRead())  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.isRead())  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.isRead())  {  inf.close();  }	  if(in.isInputStream()    ||    bis.isInputStream())    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
1058	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inputStream.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf.length  >  0)  {  inputStream.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf.length  >  0)  {  inputStream.flush();  }  else  {  inputStream.close();  }	  if(inf.length    >    0)    {    inf.flush();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1059	[BUG]  [BUGGY]  InputStream  bis  =  entryEncoding.readInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  entryEncoding.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  entryEncoding.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1060	[BUG]  [BUGGY]  InputStream  bis  =  current.readInput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  current.readInput();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  current.readInput();	  InputStream    bis    =    in.readInput();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1061	[BUG]  [BUGGY]  if(entry.enabled)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry.enabled)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry.enabled)  {  inf.end();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1062	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entry!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entry!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf,  entry.closeEntry());  entry.closeEntry();  }	  if(entry!=    null)    {    inf.end();    }    else    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf,    entry.closeEntry());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1063	[BUG]  [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  when(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	when(in.isEnabled()  ||  bis.isEnabled())  {  inf.end();  }  else  {  inputStream.close();  }	  when(in.isEnabled())    {    inf.end();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
1064	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());	  InputStream    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1065	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());	  InputStream    bis    =    new    ZipInputStream(inf.length());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1066	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.flush();  }  else  {  System.err.println( ")Current  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   ")Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1067	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipArchive  entry: "  +  entryEncoding);  }	  if(entryEncoding!=    null)    {    inf.end();    }    else    {    System.err.println(   ")Current    entry:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1068	[BUG]  [BUGGY]  Inflater  bis  =  inf.finish();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  inf.finish();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  inf.finish();	  Inflater    bis    =    inf.end();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1069	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.release();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.release();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "/ "))  {  inf.release();  }	  if(in.isInputStream()    ||    bis.endsWith(   "/   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1070	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  out.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  out.close();  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1071	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Current  entry  is  closed ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Current  entry  is  closed ");  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Current  entry  is  closed ");  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1072	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.exit(0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.exit(0);  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.exit(0);  }	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1073	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "null "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1074	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "n "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1075	[BUG]  [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "next "))  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in.isInputStream()  ||  bis.endsWith( "next "))  {  inf.close();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in.isInputStream()  ||  bis.endsWith( "next "))  {  inf.close();  }	  if(in.isInputStream()    ||    bis.endsWith(   "n   "))    {    inf.end();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1076	[BUG]  [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  }	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1077	[BUG]  [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in.isEnabled()  &&  in.isEnabled())  {  inputStream.end();	  if(in.isEnabled()    ||    in.isEnabled())    {    inputStream.end();    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1078	[BUG]  [BUGGY]  if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null  &&  in!=  null)  {  try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1079	[BUG]  [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.read()  >  0)  {  try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1080	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(in!=  null)  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1081	[BUG]  [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  while(in!=  null  &&  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	while(in!=  null  &&  in.isEnabled())  {  try  {  in.close();  }  catch(IOException  e)  {  }	  if(in!=    null)    {    try    {    in.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1082	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1083	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(outputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(outputStream);  [BUGGY]      }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	554	554	1	replace	Inflater  bis  =  new  ZipInputStream(outputStream);	  Inflater    bis    =    new    ZipInputStream(entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
