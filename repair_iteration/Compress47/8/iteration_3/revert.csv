projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=in.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("JavaExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("UsageUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultWriteEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultReader();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write('n');
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultWriteStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=in.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("Currententry:n"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println(")Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.start();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getValue())){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getValue())){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getValue())){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554in.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith(".zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isInputStream()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("-")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("n")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(".zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("n")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("Cannotcloseentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf=newZipInputStream(inf.getBytes());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inf.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,zipEncoding.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getVersion());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.openEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.isEnabled()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.isEnabled()){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.close();}else{Entryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf.clone());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=getZipArchiveEntry();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.end()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.end()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){in.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.end()){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("UsageUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("ZipArchiveEntryclosed:"+entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){in.close();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554SecureZipArchiveEntrybis=newSecureZipArchiveEntry(entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){in.close();}else{System.err.println("JavaArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("JavaArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("JipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=zipEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readLine();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("Cannotcloseentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,buf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,open);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(current!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(current!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(current!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(current!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(current!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(current!=null){for(inti=0;i<in.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(current!=null){for(inti=0;i<in.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println(")Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){inputStream.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Thread.currentThread().interrupt();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.in.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=current.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inputStream.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=ze.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=currentEntry.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=openInputStream.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=current.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.in.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=ze.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=currentEntry.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inputStream.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.length>0){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.length>0){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length);inputStream.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf,zipEncoding.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=zipEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.openInputStream(true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.inf.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=current.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("null");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("n");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in==null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("Failedtocloseentry.n");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("Failedtocloseentry..");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getVersion());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.getEncoding());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.getVersion());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf!=null||inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.length>0){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.length<=0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){closeEntry();}else{in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println(")UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=zipEncoding.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=entryEncoding.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=ze.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.finish();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.setLength(0);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.cloneEntry());entry.cloneEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entries.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-4);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length*1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-3);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-1+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}else{try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{try{bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{try{bis.close();}catch(Exceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getLength());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getInputStream(in.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getInputStream(),in.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=getInputStream(in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?in.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?zipEncoding.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.enabled()?entryEncoding.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.close():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?in.close():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.start():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.openStream():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){entryEncoding.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){entryEncoding=null;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getKey());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getValue()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){try{in.close();}catch(IOExceptionex){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554FileInputStreambis=newFileInputStream(in.getAbsolutePath());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){try{in.close();}catch(Exceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{thrownewIllegalStateException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write('n',encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write('0');
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,closed);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entryentry=newEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entryentry=newZipArchiveEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,close);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,ze);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.length()>0){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<inputStream.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<out.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<out.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isInputStream()&&bis.endsWith("/")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=bis.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=newZipInputStream(bis.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.endsWith("/")){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.clone());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.end();}else{ZipArchiveEntryentry=getZipArchiveEntry();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.finish();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,entryEncoding.getEncoding());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getCharset());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEntry());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.getAsInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.getEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.getAsIO();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("TipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isInputStream()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isInputStream()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isOutputStream()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isOutputStream()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isInputStream()){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||bis.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.length+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.length-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("-")){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("n")){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("xml")){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){in.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,open);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,entriesRead);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=current.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=zipEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isInput()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.length>0){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.length>0){inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.writeEncoding(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554openZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultWriteEncoding(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.writeEncode(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.finish();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){entry.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<K,V>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isInputStream()&&bis.endsWith("-")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=newZipInputStream(bis.getBytes(),bis.endsWith("-"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterim=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled()){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=current.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.in.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=currentEntry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer(),buf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getByteBuffer(),in.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getByteBuffer(),buf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getByteBuffer(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getByteBuffer(),in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValue()){return
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("JavaExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554in.defaultWriteStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultWriteStream(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.defaultWriteStream(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isInputStream()&&bis.endsWith(".zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isInputStream()&&bis.endsWith("zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding,bis.endsWith(".zip"))?inf.getCurrentSize():0;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding,bis.endsWith(".zip"))?inf.length():0;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding,bis.endsWith(".zip"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding,bis.endsWith(".zip"))?inf.toString():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.start();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.start();}else{ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.start();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("-")){inf.setLength(0);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,closed);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,ze);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,inf.length);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,close);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,open);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),close);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),max);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),open);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.finish();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.setLength(0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null||inf.length>0){inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),close);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getBytes(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("UnicodeExtraFieldsclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("UnicodeExtraFieldsclosed.");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("UnicodeExtraFieldsclosed:"+encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=newInflater(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554FileInputStreambis=newFileInputStream(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){try{in.close();}catch(Exceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=currentEntry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=openInputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.length()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in,entryEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes(encoding));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes(),in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(encoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getMethod());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null||inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.finish();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf==null&&inf.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.close()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.close()){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=currentEntry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=openInputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=current.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("/")?inf.initCurrentSegment():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("/")?inf.input():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("/")?inf.getInputStream():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("/")?inf.clone():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("/")?inf.init():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,entryEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes(),in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(encoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes(encoding));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){zipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZIPArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entry=newEntry(in.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.finish();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.read(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.read(),in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.read()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,zipEncoding.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.closeEntry(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.closeAllFiles();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.closeAllEntries();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getInputStream(bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.inputStream;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipArchiveEntry(entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entry.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.endsWith(".zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.startsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.endsWith(".zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getKey());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getEnd());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getValue()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf,in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.openStream());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}else{try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("zip")?inf.getInput():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("zip")?inf.getInputStream():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith(".zip")?inf.getInputStream():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("zip")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.endsWith("zip")?inf.input():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=openInputStream.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.readFully();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=ze.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=open.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){entry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readFully();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=zipEncoding.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.readUTF();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf-=inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=bis.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in==null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){if(in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in>=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.flush();}else{out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.flush();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.flush();}else{close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getEncoding());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getCharset());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf>>null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf>=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||bis.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getKey());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,entryEncoding.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getValue(),entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getValue(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getValue()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.next().length()>0){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith(".zip")){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("n")){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("xmlns")){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith("/")){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=zipEncoding.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){bis.close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{thrownewIllegalArgumentException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.end();}else{System.err.println("JAVAExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.length();++i){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){for(inti=0;i<in.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.release();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry==null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554this.entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554in.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=ze.inputInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.release();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{thrownewIllegalStateException(".");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,out);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,close);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.getValue(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,ze.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=in.isRead();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()==0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){entry.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()==0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.getByteBuffer());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(closed));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getBytes(encoding));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.canClose()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("Failedtocloseentry.n");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("Failedtocloseentry."+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("JSC_Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getValue(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getValue(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{closeEntry();}catch(IOExceptionioe){thrownewIOException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println(")Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.isEnabled()){inf.finish();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.length>0){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}else{ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length);inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=ze.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(entry!=null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding,in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(encoding));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf,inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.open());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.read()>0){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.read()>0){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){in.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/")){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||in.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("-")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()&&bis.endsWith("-")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("-")){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()&&bis.endsWith("--")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||in.endsWith("-")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(zipEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes(in));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(entryEncoding.getBytes(closed));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("Cannotcloseentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("Cannotcloseentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(inf.length>0){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(inf.length>0){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/")){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/")){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(".js")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.finish();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554zipEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ze.close(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.next();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getValue(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getValue(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()&&bis.isInputStream()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isInputStream()){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflater.this.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.clone());closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.endsWith(zipEncoding)){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()){bis.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.clone());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-16);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.start();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=out.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.endsWith(".js")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inf.endsWith("./")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isVersion()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()){in.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&bis.endsWith("-")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&bis.endsWith("--")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null&&inf.length>0){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=this.in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,bis);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,closing);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=ze.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in=newZipInputStream(in.read());}else{try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in=newZipArchiveEntry();}else{try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.end();}else{ZipArchiveEntryentry=newZIPArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf==null){inf=newZipInputStream(inf.getBytes());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf=newZipInputStream(in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf=newZipInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&bis.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getChars());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){if(in!=null){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){try{in.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&bis.endsWith("n")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("n")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("z")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("n")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()&&bis.endsWith(".zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith(".zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith(zipEncoding)){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith(".zip")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in=newZipArchiveEntry();}else{try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inputStream.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.read(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.readFully());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflater.this.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(entry==null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(entry==null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write('n','n');
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.write('n','-');
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in);inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.read());inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(in.close());inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.inflate(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed:");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554intinputStream.length>0){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in<null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.read()!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inputStream.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.open());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.close(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,zipEncoding.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<out.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.length();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inside.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||bis.isEnabled()){inputStream.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.openInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in,in.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entry.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.closeInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=zipEncoding.enabled()?inf.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.open():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?inf.release():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("z")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("null")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("js")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),in.available());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getByteBuffer()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&bis.endsWith(".zip")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(".zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(".zip")){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(".zip")){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=bis.nextInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=in.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&in.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()&&inf.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){if(entry!=null){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){if(in!=null){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null){if(in!=null){in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inputStream.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,bis);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,inf.length);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf,closing);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inputStream.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("JavaExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("JavaExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}else{System.err.println("UsageUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println("UsageUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(zipEncoding.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes(in));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(entryEncoding.getBytes(closed));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=ze.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inputStream.getInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){entry.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){inputStream.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<out.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<inner.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("/.zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith(zipEncoding)){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.isEnabled()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){finalZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){finalZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}else{in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.getBytes(),inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<K,V>entryEncoding=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipEncoding,ZipEncoding>entryEncoding=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipEncoding>entryEncoding=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/.zip")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||in.isEnabled(Feature.QUOTE_FIELD_NAMES)){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||in.isVersion()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isEnabled(ZipArchiveEntry.DEFAULT_SIZE)){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.start();}else{ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{ZipArchiveEntryentry=newZipArchiveEntry(in);entry.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{ZipArchiveEntryentry=newZipArchiveEntry(in.readLine());entry.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){closeEntry();}else{ZipArchiveEntryentry=newZipArchiveEntry(in.getValue());entry.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in==null){in.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&bis.next().length>0){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){entry.start();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){try{inf.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inner.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entryEncoding=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||bis.isEnabled()){inputStream.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.encode(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.read()>0){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.getOutputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.encode(zipBuffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<K,V>entry=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf>>null&&inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&bis.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.endsWith("/")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.isInput()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isVersion()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isOutput()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.isInput()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in==null){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null){this.inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(in.read(),out.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.size()>0){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.read()>0){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(!closed){for(inti=0;i<in.length();++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entry=newEntry(inf);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.getName());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf==null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf!=null&&inf.length>0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554this.entryEncoding=entryEncoding.encode(zipBuffer,0,0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554this.entryEncoding=entryEncoding.encode(zipBuffer,0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=getInputStream(in.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554inf.endsWith("-")){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreaminf=inputStream.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf,inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inputStream!=null){bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inputStream!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inStream!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(intainer!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inferred!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inported!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.openStream());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=inputStream.isEnabled()?in.close():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()<=0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){in.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()<=0){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.read()>0){in.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding==null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(zipEncoding!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.close()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||in.endsWith("-")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=createInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.close()){this.inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&inf.close()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=immutableAndCloseUnicodeExtraFields.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=immutableAndCloseInputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=immutableAndCloseFileInputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=up.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inputStream!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inputStream!=null){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inputStream!=null){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(intainer!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inputStream!=null){inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){System.err.println("UnicodeExtraFieldsclosed:"+in.getBytes());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(closed){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValue()){return
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.next();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.writeFileName(encoding);}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.defaultWriteStream();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.close();}else{inputStream=null;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.writeFileName(encoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554out.write('n');
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.encode(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){System.err.println("Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){System.err.println("ZipArchiveentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()&&in.isEnabled()){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){this.in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){bis.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in=newZipInputStream(in.read());}else{try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled(Feature.AUTO_CLOSE_SOURCE)){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("ZipArchiveEntryclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("JavaExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){inf.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.entryEncoding.isEnabled();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(outputStream.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554CloseEntryentry=newCloseEntry(in.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entryentry=newEntry(in.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entry=entry.getValue();entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>in=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Entry<ZipArchiveEntry>entry=entryEncoding.encode(in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(outputStream.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||in.isEnabled()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||inputStream.isEnabled()){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry==null){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){for(inti=0;i<in.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.getEncoding(),this);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf,inf.getEncoding());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554SecureFileInputStreambis=newSecureFileInputStream(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("Failedtocloseentry..");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.enabled){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone()
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(in!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();closed=true
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554finalZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554in.isInput()&&bis.endsWith("null")){inf.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("next")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInput()||bis.endsWith("null")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.length>0){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.size()>0){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inStream!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(infactory!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(intainer==null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.close()){in.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554System.err.println("Failedtocloseentry.");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipArchiveEntry(inf,closing);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()&&in.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()&&bis.isEnabled()){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&in.isEnabled()){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()&&bis.canClose()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=current.readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?this.inf.end():null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=entryEncoding.enabled()?ZipEncoding.end(inf):null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.close()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.close()){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.close()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=entryEncoding.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterinf=this.in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(zipEncoding!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)zipEncoding.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)in.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=this.in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length-1,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length*2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read(),inf.getCharset());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(inf.read(),inf.release());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=current.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554zipEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.read()>0){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=current.isInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isEnabled()||im.isEnabled()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null&&in!=null){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.read()>0){try{in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isAbsolute()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.isRead()){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf.length>0){inputStream.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=entryEncoding.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=current.readInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry.enabled){inf.end();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entry!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf,entry.closeEntry());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554when(in.isEnabled()||bis.isEnabled()){inf.end();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.read(),inf.getCharset());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554InputStreambis=newZipInputStream(inf.length(),inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.flush();}else{System.err.println(")Currententry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(entryEncoding!=null){inf.close();}else{System.err.println("ZipArchiveentry:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=inf.finish();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("/")){inf.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.err.println("Currententryisclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}else{System.exit(0);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("null")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("n")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in.isInputStream()||bis.endsWith("next")){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()&&in.isEnabled()){inputStream.end();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in.isEnabled()&&in.isEnabled()){inputStream.end();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null&&in!=null){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.read()>0){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(in!=null){in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554while(in!=null&&in.isEnabled()){try{in.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554if(inf!=null){inf=newZipInputStream(inf.read());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java554Inflaterbis=newZipInputStream(outputStream);
