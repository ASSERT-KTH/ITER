bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  false;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  false;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  entry.getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  entry.getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
10	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  [Delete]  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  [Delete]  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  [Delete]  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
11	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
12	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
13	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
14	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
15	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
16	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
17	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
18	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
20	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  getClass())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()  ==  getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
21	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
22	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
23	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
24	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  true);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  true);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  true);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
25	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  entryEncoding);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  entryEncoding);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae,  entryEncoding);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
26	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  canHandleEntryData((  ZipArchiveEntry)ae);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  return  canHandleEntryData((  ZipArchiveEntry)ae);  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  return  canHandleEntryData((  ZipArchiveEntry)ae);  }	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
27	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
28	[BUG]  [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
29	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  else  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  else  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  else  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
30	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZIPArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
31	[BUG]  [BUGGY]  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    If(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
32	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    If(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
33	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
34	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
35	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false&&  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false&&  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false&&  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
36	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
37	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  {  if(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(e    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
38	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  &&  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  &&  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  &&  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
48	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  null)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
49	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
50	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  null)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
51	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
52	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
54	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  hasDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
55	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(z))  {  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(z))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(z))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
56	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    &&    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
57	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ae))  {	  if(ae    instanceof    ZipArchiveEntry    &&    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
58	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
61	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryData(ze))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryData(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryData(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFieldDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFieldDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFieldDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  supportsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  ==  null)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    >=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
68	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry!=  null)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    >=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
69	[BUG]  [BUGGY]  if(a  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(a  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(a  instanceof  ZipArchiveEntry)  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
70	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
71	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
72	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
73	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
74	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
75	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
76	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
77	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  canHandleEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
78	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  canHandleEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
79	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  containsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
80	[BUG]  [BUGGY]  if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(Ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
81	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
82	[BUG]  [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
83	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptorFor(ae)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  allowStoredEntriesWithDataDescriptorFor(ae)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	allowStoredEntriesWithDataDescriptorFor(ae)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
84	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
85	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
86	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
87	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
88	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
89	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
90	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
91	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
92	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!ZipUtil.canHandleEntryData(ae))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!ZipUtil.canHandleEntryData(ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!ZipUtil.canHandleEntryData(ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZipArchiveEntry    ||!   "(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
93	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!this.allowStoredEntriesWithDataDescriptor)  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!this.allowStoredEntriesWithDataDescriptor)  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZipArchiveEntry    ||!   "(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
94	[BUG]  [BUGGY]  if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(e    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
95	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
96	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
97	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
98	[BUG]  [BUGGY]  if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
99	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  false;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  false;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
100	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  null)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
101	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
102	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
103	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
104	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
105	[BUG]  [BUGGY]  if(ae!=  null  ||!ae.getClass().isArray())  {  if(!canReadEntryData(ae))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!ae.getClass().isArray())  {  if(!canReadEntryData(ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!ae.getClass().isArray())  {  if(!canReadEntryData(ae))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(?!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
106	[BUG]  [BUGGY]  if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(Ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
107	[BUG]  [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||  a  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||  a  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(a  instanceof  ZipArchiveEntry  ||  a  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZIPArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  isDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  isDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  isDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
109	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
111	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
112	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
113	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
114	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
115	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
116	[BUG]  [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  ||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	||  ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
117	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
118	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(hasUTF8Flag)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(hasUTF8Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(hasUTF8Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
119	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
120	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
121	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry  <?>)ae))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry  <?>)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry  <?>)ae))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
122	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry  ==  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry  ==  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
125	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  false;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
126	[BUG]  [BUGGY]  if(ae  instancesof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instancesof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instancesof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  true)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
128	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
129	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    &&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
130	[BUG]  [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    &&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
131	[BUG]  [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    &&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
132	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    &&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
133	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
134	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  if(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
135	[BUG]  [BUGGY]  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	If(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
136	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
137	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
138	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(a  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZIPArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
141	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  FileArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  FileArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  FileArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    FileArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
142	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    FileArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
143	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  K,  V>)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  K,  V>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  K,  V>)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    FileArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
144	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
145	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  (ZipArchiveEntry>))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  (ZipArchiveEntry>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =  (ZipArchiveEntry>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
146	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
147	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
148	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry>))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  (ZipArchiveEntry>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
149	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
150	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
151	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
152	[BUG]  [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
153	[BUG]  [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae!=    null    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
154	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(ae!=    null    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
155	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(ae!=    null    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
156	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
157	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
158	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
159	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
160	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  true)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
161	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
162	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
163	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
164	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
165	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
166	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "./ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "./ "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
167	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
168	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
169	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  isDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
170	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
171	[BUG]  [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    ==    null    ||!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
172	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    ==    null    ||!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
173	[BUG]  [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(item  instanceof  ZipArchiveEntry))  {	  if(ae    ==    null    ||!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
174	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
175	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
176	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
177	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
178	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.next();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.next();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.next();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    If(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
181	[BUG]  [BUGGY]  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    If(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
182	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.clone();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.clone();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.clone();	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
183	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTree();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTree();	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
184	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getValue();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getValue();	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
185	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.data;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.data;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.data;	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
186	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTarget();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.cloneTarget();	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
187	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getData();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getData();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae.getData();	  final    ZipArchiveEntry    <    K,    V>    ze    =(ZipArchiveEntry    <    K,    V>)ae;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
188	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
189	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
190	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
191	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
192	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   ".zip   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
193	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "zip   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "zip   "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "zip   "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   ".zip   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
194	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  hasUTF8Flag)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  hasUTF8Flag)  {	  if(!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
195	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
196	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  (ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  (ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  ==  (ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
197	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =(ZipArchiveEntry>)ae)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =(ZipArchiveEntry>)ae)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  =(ZipArchiveEntry>)ae)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    (ZipArchiveEntry>))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
198	[BUG]  [BUGGY]  if(ae!=  null)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    If(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
199	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/   "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
200	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
201	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
202	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  false;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  false;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
203	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
204	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
205	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    If(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
206	[BUG]  [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(a  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(a  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae    instancesof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
207	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
208	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
209	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
210	[BUG]  [BUGGY]  if(ae!=  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null)  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
211	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  >  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  >  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZipArchiveEntry    ||?!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
212	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
213	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
214	[BUG]  [BUGGY]  if(!(a  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(a  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(a  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
215	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  Serializable))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
216	[BUG]  [BUGGY]  if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
217	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  ae  instanceof  ZipArchiveEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  ae  instanceof  ZipArchiveEntry)  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
218	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  entryEncoding!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  entryEncoding!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)&&  entryEncoding!=  null)  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
219	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  true)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  true)  {	  if(ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
220	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
221	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
222	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  zipEncoding!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  zipEncoding!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae)||  zipEncoding!=  null)  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
223	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  supportsZip64(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
224	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
225	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
226	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  null  ||  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    >=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
227	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  hasUTF8Flag)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze)||  hasUTF8Flag)  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
228	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDirectoryDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDirectoryDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDirectoryDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
229	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(zipEncoding))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
230	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
231	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
232	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
233	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;  }	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
234	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae);  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
235	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  return  true;	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
236	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  FileArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry))  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   ".zip   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
238	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryFor(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsHandleEntryFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
239	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsFileDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    supportsDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
240	[BUG]  [BUGGY]  if(a  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(a  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(a  instanceof  ZipArchiveEntry)  {  If(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
241	[BUG]  [BUGGY]  if(ae!=  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
242	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
243	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
244	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
245	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
246	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
247	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(entry  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(entry  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&(entry  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
248	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(item  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(item  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&(item  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
249	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  <?>))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  <?>))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry  <?>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
250	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
251	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry!=  null)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
252	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasUTF8Flag)  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
253	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasUseUnicodeExtraFields(ze))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasUseUnicodeExtraFields(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasUseUnicodeExtraFields(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
254	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasHandleEntryDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasHandleEntryDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasHandleEntryDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
255	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
256	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
257	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
258	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isFunctionDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
259	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadHandleEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
260	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadFileData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadFileData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadFileData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
261	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae)||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
262	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
263	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >>  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
264	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >>  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
265	[BUG]  [BUGGY]  if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
266	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryFor(ze))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
267	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryData(ze))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryData(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasHandleEntryData(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
268	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
269	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >  0))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry  >  0))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
270	[BUG]  [BUGGY]  if(ae  ==  null  ||!ae.getClass().isArray())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||!ae.getClass().isArray())  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!ae.getClass().isArray())  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(e    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
271	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null    ||    ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
272	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getName().endsWith(   ".zip   "))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
273	[BUG]  [BUGGY]  if(ae  ==  null  ||  ae.getClass()!=  ZipArchiveEntry.class)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||  ae.getClass()!=  ZipArchiveEntry.class)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||  ae.getClass()!=  ZipArchiveEntry.class)  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae    instanceof    ZIPArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
274	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  1)  {  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  1)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  1)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
275	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  <  0)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <  0  ||  ae  instanceof  ZipArchiveEntry  <  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <    0)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
276	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  isFileDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  isFileDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  isFileDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptor((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
277	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFileDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isFileDataDescriptorFor(ze))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isFileDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&    isDataDescriptorFor(ze))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
278	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF7Flag)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF7Flag)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF7Flag)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    if(!hasUTF8Flag)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
279	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >>  false  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
280	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  }  &&  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  }  &&  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  }  &&  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
281	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>|  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>|  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>|  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
282	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <  null)  {	  if(ae    instanceof    ZipArchiveEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
283	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
284	[BUG]  [BUGGY]  if(ae  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae    instanceof    ZIPArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
285	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
286	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    ==    true)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
287	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  FileArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  FileArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  FileArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    FileArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
288	[BUG]  [BUGGY]  If(ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  If(ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	If(ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    If(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
289	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  ae  instanceof  ZipArchiveEntry)  {	  if(!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
290	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  )  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  )  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  )  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    >)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
291	[BUG]  [BUGGY]  if(ae!=  null  &&  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
292	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
293	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  canReadArchiveEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  canReadArchiveEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)  &&  canReadArchiveEntryData((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry)&&    canReadEntryData((    ZipArchiveEntry)ae))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
294	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getClass()!=    entry.getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
295	[BUG]  [BUGGY]  if(ae!=  null)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  }	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
296	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
297	[BUG]  [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
298	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
299	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!(ze  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ze);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!(ze  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ze);  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!(ze  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ze);  }	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
300	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  canHandleEntryData(ze);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  canHandleEntryData(ze);  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  canHandleEntryData(ze);  }	  if(!(ae    instanceof    ZipArchiveEntry)&&    canHandleEntryData((    ZipArchiveEntry)ae);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
301	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >>  false)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >>  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >>  false)  {	  if(ae    instanceof    ZipArchiveEntry    <?>||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
302	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
303	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
304	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
305	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
306	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>,  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>,  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>,  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
307	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
308	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||    ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
309	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.canRead())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
310	[BUG]  [BUGGY]  if(ae  ==  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  ==  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null)  {  If(!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
311	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
312	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&  getDataDescriptorFor(ze)!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&  getDataDescriptorFor(ze)!=  null)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry)&&  getDataDescriptorFor(ze)!=  null)  {	  if(ae    instanceof    ZipArchiveEntry    <?>    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
313	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
314	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze)||  isEnabled(ZipArchiveEntry.class))  {	  if(!(ae    instanceof    ZipArchiveEntry)||    hasDataDescriptorFor(ze))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
315	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    }    &&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
316	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >>  false  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
317	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  {  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  {  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  {  false  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
318	[BUG]  [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(entry  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }	  if(ae    instanceof    ZipArchiveEntry)    {    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    if(entry.getValue()!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
319	[BUG]  [BUGGY]  if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae    instancesof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
320	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
321	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
322	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >=  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false    ||    ae    instanceof    ZipArchiveEntry!=    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
323	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]      final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
