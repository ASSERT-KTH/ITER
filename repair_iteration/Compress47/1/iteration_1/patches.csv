bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  supportsDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  >>  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  >>  false)  {	  if(ae    instanceof    ZipArchiveEntry    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()  ==  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  entry.getClass())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getValue()!=  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getClass()!=  getClass())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry!=  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  (ZipArchiveEntry>))  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
25	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  If(!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    If(!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
26	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instanceof  ZIPArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instanceof  ZIPArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae  instanceof  ZIPArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
27	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instancesof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(ae  instancesof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(ae  instancesof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
28	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(e  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(!(e  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    if(!(e  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
29	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
30	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    If(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
31	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZIPArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZIPArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZIPArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
32	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae  instancesof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
33	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZIPArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(ae  instanceof  ZIPArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(ae  instanceof  ZIPArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
34	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(Ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
35	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
39	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    If(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
40	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||?!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||?!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instanceof  ZipArchiveEntry  ||?!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
41	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZIPArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZIPArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZIPArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
42	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instancesof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instancesof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instancesof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
43	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZIPArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZIPArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instanceof  ZIPArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
44	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  hasDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  canReadEntryData((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptorFor(ze))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&  isDataDescriptor((  ZipArchiveEntry)ae))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >=  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>||  ae  instanceof  ZipArchiveEntry  >=  false)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null)  {	  if(ae    instanceof    ZipArchiveEntry    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)||  hasDataDescriptorFor(ze))  {	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  if(!hasUTF8Flag)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  false  ||  ae  instanceof  ZipArchiveEntry  ==  true)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry!=  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry!=  false)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  0)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  0)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <  0)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(e  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  if(e  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    if(e  instanceof  ZipArchiveEntry  ||  ae  instanceof  ZipArchiveEntry)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
65	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(e  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
66	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(Ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
67	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  }  &&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  }  &&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  }  &&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae);  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae  instanceof  ZipArchiveEntry)&&  canHandleEntryData((  ZipArchiveEntry)ae);	  if(!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||! "(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry))  {  if(ae  instanceof  ZipArchiveEntry  ||! "(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    if(ae  instanceof  ZipArchiveEntry  ||! "(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
72	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae;  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	final  ZipArchiveEntry  <  K,  V>  ze  =(ZipArchiveEntry  <  K,  V>)ae;	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( "/ "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.canRead())  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry)  {  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  if(entry.getName().endsWith( ".zip "))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  [Delete]  false)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  [Delete]  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  [Delete]  false)  {	  if(ae    instanceof    ZipArchiveEntry    >=    false)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(?!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(!(ae  instanceof  ZipArchiveEntry))  {  if(?!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(!(ae    instanceof    ZipArchiveEntry))    {    if(?!(ae  instanceof  ZipArchiveEntry))  {	  	non-compiled	[CE]  <identifier>  expected	3	None	add
78	[BUG]  [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  &&!(ae  instanceof  ZipArchiveEntry)||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae!=  null  ||!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry)  {  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||  ae  instanceof  FileArchiveEntry)  {	  if(ae    instanceof    ZipArchiveEntry    ||    ae    instanceof    ZipArchiveEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
82	[BUG]  [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  ==  null  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(!(ae    instanceof    ZipArchiveEntry)&&!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ==  null  ||  ae  instanceof  ZipArchiveEntry  ==  false)  {	  if(ae    instanceof    ZipArchiveEntry    ==    false)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  <?>)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  null)  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  <?>  ||  ae  instanceof  ZipArchiveEntry  >=  null)  {	  if(ae    instanceof    ZipArchiveEntry    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {    [BUGGY]  if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {  [BUGGY]    final  ZipArchiveEntry  ze  =  (ZipArchiveEntry)  ae;  return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(ae  instanceof  ZipArchiveEntry  ||!(ae  instanceof  ZipArchiveEntry)&&!(ae  instanceof  ZipArchiveEntry))  {	  if(ae    instanceof    ZipArchiveEntry    ||!(ae    instanceof    ZipArchiveEntry))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
