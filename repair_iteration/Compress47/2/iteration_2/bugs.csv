bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.clone();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.cloneTree();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =(ZipArchiveEntry)ae.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  Inflater  inf  =  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  Inflater  inf  =  ae.getInputStream();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  ze  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =  entry.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =(ZipArchiveEntry)ae;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.cloneTarget();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTarget();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTarget();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTarget();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  int  zeLen  =  ae.getLength();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  int  zeLen  =  ae.getLength();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getLength();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneFile();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {    [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneFile();  [BUGGY]    return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneFile();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
