bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(1);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(1);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(2);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(2);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(5);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(5);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(5);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree(0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree(0);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.cloneTree(0);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  ArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ArchiveEntry  ze  =(ZipArchiveEntry)ae.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTarget();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.clonePath();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.clonePath();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.clonePath();	  ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  entry  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =(ZipArchiveEntry)ae.cloneTree();	  ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.clonePosition();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.clonePosition();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.clonePosition();	  ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
12	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
13	[BUG]  [BUGGY]  ArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
14	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition()  +  1;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clonePosition();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
15	[BUG]  [BUGGY]  Entry  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Entry  entry  =(ZipArchiveEntry)ae;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Entry  entry  =(ZipArchiveEntry)ae;	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
16	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getLastChild();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getLastChild();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.nextEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.nextEntry();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.nextEntry();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[0].clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[0].clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[0].clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
19	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[1].clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[1].clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[1].clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
20	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getValue();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
21	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[1].clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[1].clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.data[1].clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
22	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copy();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copy();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copy();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
23	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)a;	  ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCurrentEntry();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getTarget();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getKey();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getKey();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getKey();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
28	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getNext();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getNext();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getTarget();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  int  zeLen  =  ae.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getLength()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getLength()  +  1;	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
30	[BUG]  [BUGGY]  int  zeLen  =  ae.getLength()  *  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getLength()  *  2;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getLength()  *  2;	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
31	[BUG]  [BUGGY]  int  zeLen  =  entryEncoding.getLength();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  entryEncoding.getLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  entryEncoding.getLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
32	[BUG]  [BUGGY]  int  zeLen  =  ae.getLength()  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getLength()  +  2;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getLength()  +  2;	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
33	[BUG]  [BUGGY]  int  zeLen  =  entry.getLength();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  entry.getLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  entry.getLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
34	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getRawDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getRawDataDescriptor();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getRawDataDescriptor();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
35	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.dataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.dataDescriptor;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.dataDescriptor;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
36	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey()  +  1;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  *  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  *  1;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  entry  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =(ZipArchiveEntry)ae.cloneTarget();	  ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneFile();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneFile();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.cloneFile();	  ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  ze  =  ae.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =  ae.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =  ae.getValue();	  ze    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  entry  =  ae.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =  ae.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =  ae.getValue();	  ze    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  Entry  entry  =  ae.getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Entry  entry  =  ae.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Entry  entry  =  ae.getValue();	  ze    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
44	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
45	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
46	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.getValue();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  entry  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =(ZipArchiveEntry)ae.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =(ZipArchiveEntry)ae.clone();	  ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)a.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)a.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)a.clone();	  ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTree(0);	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataInputStream();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
53	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataImpl();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
54	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataBytes();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a.clone();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
57	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getKey();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
58	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue()  +  1;	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
59	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePath()  +  1;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clonePath();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)a;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTarget();	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
62	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getValue();	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
63	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTree();	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
64	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae;	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
65	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
66	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.getKey();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.getKey();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.getKey();	  ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  entry  =(ZipArchiveEntry)ae.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =(ZipArchiveEntry)ae.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =(ZipArchiveEntry)ae.getValue();	  ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.getValue()  +  1;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.getValue()  +  1;	  ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  null  :  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  null  :  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  null  :  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  Inflater  inf  =  ae!=  null?  null  :  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae!=  null?  null  :  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae!=  null?  null  :  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  entry.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  Inflater  inf  =  ae.getEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae.getEntry();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae.getEntry();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  Inflater  inf  =  ae.getEntryInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae.getEntryInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae.getEntryInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.clonePosition();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTarget();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
77	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
78	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0];  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0];	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)a;	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
80	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getAncestor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getAncestor();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getAncestor();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataResolver().clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataResolver().clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataResolver().clone();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.getData();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.getData();	  ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getPosition();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getPosition();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getPosition();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clonePosition();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
84	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].get();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].get();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].get();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
85	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getData();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getData();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getData();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
86	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getName();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getName();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getName();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
87	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copyInto(this);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copyInto(this);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].copyInto(this);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.data[0].clone();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
88	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getObject();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
89	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTree(0);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.cloneTree(0);	  ze    =(ZipArchiveEntry)ae.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSource();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSource();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSource();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getTarget();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
91	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.getValue();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.getValue();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)a.getValue();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue(0);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getValue(0);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.cloneTree(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
93	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)e.clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)a.clone();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
94	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)a;	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
95	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data;	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getKey();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
96	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(zipArchiveEntry)a;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(zipArchiveEntry)a;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(zipArchiveEntry)a;	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)a;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
97	[BUG]  [BUGGY]  entry  =(ZipArchiveEntry)ae;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  entry  =(ZipArchiveEntry)ae;  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	entry  =(ZipArchiveEntry)ae;	  ze    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();	  static    final    ZipArchiveEntry    entry    =(ZipArchiveEntry)ae;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
99	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSize();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSize();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getSize();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor(0);  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataDescriptor(0);	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  int  zeLen  =  ae.getZipLength();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getZipLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getZipLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
102	[BUG]  [BUGGY]  int  zeLen  =  ae.getHeaderLength();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getHeaderLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getHeaderLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipUtil.getInputStream(ae):  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipUtil.getInputStream(ae):  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  ZipUtil.getInputStream(ae):  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
104	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipEncoding.getInstance()  :  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipEncoding.getInstance()  :  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  ZipEncoding.getInstance()  :  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipEncoding.getInputStream(ae):  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  ZipEncoding.getInputStream(ae):  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  ZipEncoding.getInputStream(ae):  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.data[0].clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.data[0].clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.data[0].clone();	  ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
107	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getData();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
108	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
109	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.getData();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.getValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
110	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataId();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataId();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataId();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
111	[BUG]  [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataReference();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataReference();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	static  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataReference();	  static    final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
112	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTwin();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTwin();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.cloneTwin();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.clonePath();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCrc();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCrc();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getCrc();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getObject();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
114	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getElement();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getElement();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getElement();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getObject();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
115	[BUG]  [BUGGY]  int  zeLen  =  ae.getEntryLength();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getEntryLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getEntryLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
116	[BUG]  [BUGGY]  int  zeLen  =  ae.getFileLength();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  int  zeLen  =  ae.getFileLength();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  zeLen  =  ae.getFileLength();	  int    zeLen    =    ae.getLength();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
117	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.clone();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)a.clone();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
118	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.getDataRef();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getData();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
119	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTwin();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTwin();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ZipArchiveEntry  entry  =(ZipArchiveEntry)ae.cloneTwin();	  ZipArchiveEntry    entry    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
120	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  false  :  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  false  :  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  false  :  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
121	[BUG]  [BUGGY]  Inflater  inf  =  ae  ==  null?  getInputStream()  :  ae.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  Inflater  inf  =  ae  ==  null?  getInputStream()  :  ae.getInputStream();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	Inflater  inf  =  ae  ==  null?  getInputStream()  :  ae.getInputStream();	  Inflater    inf    =    ae.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
122	[BUG]  [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getKey();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getKey();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	final  ZipArchiveEntry  ze  =(ZipArchiveEntry)ae.data[0].getKey();	  final    ZipArchiveEntry    ze    =(ZipArchiveEntry)ae.getKey();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
123	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTwin();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  boolean  canReadEntryData(final  ArchiveEntry  ae)  {  if  (ae  instanceof  ZipArchiveEntry)  {      [BUGGY]  ze  =(ZipArchiveEntry)ae.cloneTwin();  [BUGGY]      return  ZipUtil.canHandleEntryData(ze)  &&  supportsDataDescriptorFor(ze);  }  return  false;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  canReadEntryData  [RETURN_TYPE]  boolean  ArchiveEntry  ae  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  ArchiveEntry  ae  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	ze  =(ZipArchiveEntry)ae.cloneTwin();	  ze    =(ZipArchiveEntry)ae.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
