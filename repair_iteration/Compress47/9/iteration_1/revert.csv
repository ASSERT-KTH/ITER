projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&current.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&current.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
