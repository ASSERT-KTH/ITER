projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getValue())){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&current.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&current.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(in!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(in!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(in!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entriesRead.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inputStream.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entryEncoding.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<K,V>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){break;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(ent
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length()+1;i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current==null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.getLength());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length+2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.getMethod());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeOutputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.getEntry());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null||inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){this.inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<this.inputStream.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555this.inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getName());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getSize());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=newEntry<ZipArchiveEntry>(inf.getKey());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getRawClass());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length-1;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null||inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>1){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMetho
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMethod
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMetho
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMeth
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterinf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterim=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterinf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=newEntry<ZipArchiveEntry>(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=1;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&bis!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inputStream.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entryEncoding.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entriesRead.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entryEncoding.append('N');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<out.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<in.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){entry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555System.err.println("Failedtocloseentry.");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.n");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry..");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()!=entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf=newZipArchiveEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalArgumentException(".");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("".toString());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionio
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<current.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<currentEntry.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf==null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current==null){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){if(current!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(closed){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(in==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<current.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<currentEntry.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<in.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<in.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<this.inputStream.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){this.inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.length>0){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<in.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(outputStream!=null){for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(outputStream!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<inf.getLength();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<inf.getValue();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<in.read();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.hasNext()){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(infer!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=newEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<Zip>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=entry.getValue();entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(ent
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<?>entry=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterinf=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=entry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){entry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<zipArchiveEntry.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<out.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEnt
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu==
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(outputStream!=null){for(inti=0;i<inf.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(outputStream!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=entry.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=entry.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<out.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(curr!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<current.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<curr.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<out.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.size();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newBoundedInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newBoundedInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=getInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.length(),inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterinf=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(ZipArchiveEntryentry:inf.entrySet()){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.getLength();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(ZipArchiveEntryentry:inf.values()){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),inf.length);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getKey());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue()+1);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),closed);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),close);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),this);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length()>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(infer!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(current!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<this.current.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555System.err.println("UnicodeExtraFieldsclosed:"+entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){System.err.println("UnicodeExtraFieldsclosed:"+inputStream);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length-1;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length-2;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length()>0){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closeInputStream(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<stream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone()
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555System.err.println("UnicodeExtraFieldsclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(curr!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(curr!=null&&current.length>0){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<current.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<out.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();++i){closed.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{thrownewIllegalStateException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf=newZipArchiveEntry();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(out!=null){for(inti=0;i<in.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<in.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(out!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null||current.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<out.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue()+1);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.hasNext()){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.hasMoreElements()){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue(),inf.length);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue()+1);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf,inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.read());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<current.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<currentHeaderOffset.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()!=entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()>=entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<current.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<current.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<currentHeaderOffset.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(ent
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(out!=null){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<in.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<in.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){buffer.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555System.err.println("UnicodeExtraFieldsclosed:"+inf.getName());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){System.err.println("UnicodeExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{System.err.println("JavaExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.length>0){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<in.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<in.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(i!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(infer!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=(ZipArchiveEntry)entry.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.clone());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValue()){return
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){entriesRead.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inputStream.length;++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){break;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){open();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<zipArchiveEntry.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryzipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntrynewZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(!closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf==null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(inf!=null){for(inti=0;i<current.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current==null){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){if(current!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(closed){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<stream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()!=entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()>=entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current==null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{out.write(buffer,0,inf.length);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length()+1;++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=1;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(!closed){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){close(inf.next());}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(!closed){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){close(inf.next());}return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=entry.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)in
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555entry.getValue()=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length-1;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<entriesRead.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(ZipArchiveEntryentry:inf.values()){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entries.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null||current.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()!=entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inputStream.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();i++){curr.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){currentEntry.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null&&current.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()!=entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<files.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inputStream.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){closure();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.getLength();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.clone());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<outf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<inf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<current.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Throwableioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null&&inf.length>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length;++i){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(outputStream!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){if(inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(entry.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<img.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionio
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(in!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionio
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead==null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<filesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inputStream.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(curr!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){currentEntry.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null&&inf.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){close(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getValue()+1);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){close(inf.getNext());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getParent());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){close(inf.getNext()+1);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(i!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.size();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){inf.close();}else{System.err.println("UseUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){inf.close();}else{System.err.println("UsageUnicodeExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(intainer!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){closeInputStream(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry==null){for(inti=0;i<inf.length;++i){zipArchiveEntry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(closed){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newBoundedInputStream(in,inputStream.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newBoundedInputStream(in,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.clone());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!allowStoredEntriesWithDataDescriptor){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEnt
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(intainer!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.getValue(),bis);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newZipArchiveEntry(inf.next());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone()
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){this.outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){this.inputStream.release();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&hasDataDescriptor){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(!closed){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){closure();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){attempt{bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entries.length();++i){entryEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entriesEncoding.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&hasDataDescriptor){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){if(!closed){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length<2){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)ze.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=inf.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:"+inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entries.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<out.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length();++i){entryEncoding.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555ZipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZIPArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newzipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<in.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryLen==0){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<inf.getLength();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<inf.getValue();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream==null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZIPArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.close();}else{inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inputStream.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),inputStream);entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.next());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.getValue(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(ent
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.length();i++){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf==null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.length>0){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry==null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionio
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(outputStream!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null&&current.length>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(current!=null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current==null){for(inti=0;i<inf.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){if(current!=null){for(inti=0;i<inf.length();++i){continue;}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(out!=null){for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<out.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(out!=null){for(inti=0;i<in.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<out.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){zipEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){entriesEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Inflaterbis=newZipInputStream(inf.length()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){current.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inf.length;++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(out!=null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=this.zipArchiveEntry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry()
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.getMet
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555(ZipArchiveEntry)inf.clon;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.enabled){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getName().endsWith("/")){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getName().endsWith("/")){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&inf.length>0){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getMethod()==ZipArchiveEntry.DEFAULT){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry()
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<outf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipArchiveEntry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.size>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)zipEncoding.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)zipEncoding.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length;++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&bis.length>0){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entries!=null){for(inti=0;i<entries.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<in.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inputStream!=null){for(inti=0;i<inputStream.length();++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){for(inti=1;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<inf.length;++i){entriesToFront.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length();++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<outf.length();i++){continue;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<out.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.getValue();if(entry.getMethod().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.size();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getRawClass());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<current.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555InputStreambis=newZipInputStream(inf.getChars());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){try{inf.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getData());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getLocation());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<img.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(this.inputStream!=null){for(inti=0;i<inf.length;++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entriesRead!=null){for(inti=0;i<entriesCount;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){for(inti=0;i<entriesRead;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555For(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<out.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf=newZipInputStream(inf.getBytes());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.size()>0){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)enf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)zipEncoding.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){close(inf.getImpl());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inputStream.size();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.size()>0){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.size()>0){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555intcurrentHeaderOffset>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)ze.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.length>0){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&bis.length>0){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getVal==null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getVal==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&outf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inferred!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();i++){curr.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.length==0){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.length==0){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue()+entry.length);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();i++){closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(this.inputStream!=null){for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){if(inf!=null){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length();++i){closed=true;}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length();++i){closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555inti=0;i<current.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()||entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.next();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.size>0){for(inti=0;i<inputStream.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.length;++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.length>0){for(inti=0;i<inputStream.length;++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf==null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=1;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inf.length();++i){closeInf(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entryentry=newEntry(inf.read());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue==null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue!=null){if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(in!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.next()>0){for(inti=0;i<inf.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length();++i){closeInf(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getKey()==entry.getVal
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry==null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getKey()==entry.getValue()){return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getName()!=null){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(this.current!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(this.entryEncoding!=null){for(inti=0;i<inf.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<this.current.length();++i){this.current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clo
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)zipEncoding.clone();if(entry.getValue().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(zipEncoding!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)ze.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inputStream.length();++i){close(inf.next());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){for(inti=0;i<outf.length();i++){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(entry);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length>0){if(closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555entry.getValue()){if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clon
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entryEncoding.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555Entry<ZipArchiveEntry>entry=entries.get(i);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555intcurrentHeaderOffset>0){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entryEncoding!=null){inf.close();}else{System.err.println("ZipExtraFieldsclosed:"+entryEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<out.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)out.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.size();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){if(closed){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.size>0){for(inti=0;i<inf.length();i++){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inferred!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inf.length>0){for(inti=0;i<inf.length;++i){try{bis.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(ze){if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=out.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(ze,inf.clone());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.enabled){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValue()==entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf!=null){System.err.println("UnicodeExtraFieldsclosed:"+inf.toString());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555for(inti=0;i<inf.length;++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inputStream!=null){for(inti=0;i<inputStream.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inputStream.size();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(closed){if(inf!=null){for(inti=0;i<inf.length;++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null){for(inti=0;i<inf.length();++i){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(outputStream!=null){for(inti=0;i<inf.length;++i){out.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<innerf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=findZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555ZipArchiveEntryentry=getZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){if(inf!=null){for(inti=0;i<inf.length;++i){attempt{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(current!=null){for(inti=0;i<inf.size();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(current!=null&&current.length>0){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555While(current!=null){if(inf!=null){for(inti=0;i<inf.length();++i){current.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry.getValue()!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();if(entry.getValu
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null&&inputStream.size()>0){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555while(inf!=null){for(inti=0;i<inputStream.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry();if(entry.getValue()==entry.getValue()||entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=newZipArchiveEntry(entry.getName());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){for(inti=0;i<inf.length();++i){try{bis.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){for(inti=0;i<inf.length();++i){try{bis.close();}catch(IOExceptione){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(inf.length()>0){for(inti=0;i<inf.length();++i){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(!closed){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java555if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();if(entry.getValue()==entry.getValue()
