bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
2	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
3	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
4	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
5	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
6	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
7	[BUG]  [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
8	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
9	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
10	[BUG]  [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
11	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
12	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
13	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
14	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
15	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
16	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
17	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
18	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
19	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  break;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  break;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
20	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
26	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length()  +  1;  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length()  +  1;  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length()  +  1;  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
28	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
29	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
30	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
31	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
32	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
33	[BUG]  [BUGGY]  while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
34	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
36	[BUG]  [BUGGY]  While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  1);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  +  1);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
39	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  -  1);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  -  1);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
40	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes());	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
41	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length,  inf.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length,  inf.length);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length,  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
42	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getLength());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getLength());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getLength());	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
43	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf,  inf.length);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf,  inf.length);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
44	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length  +  2);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length  +  2);	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
45	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
52	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
53	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getMethod());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getMethod());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getMethod());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
54	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeOutputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeOutputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeOutputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
55	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
56	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getEntry());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getEntry());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getEntry());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
57	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
58	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
59	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
60	[BUG]  [BUGGY]  While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
61	[BUG]  [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
62	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
63	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
64	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
65	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
66	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
67	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
68	[BUG]  [BUGGY]  this.inputStream.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  this.inputStream.close();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	this.inputStream.close();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
69	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  throw  new  IllegalStateException( " ");  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
72	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
74	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
76	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
77	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
78	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
79	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
80	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
81	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
82	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getSize());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getSize());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getSize());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
83	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getKey());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getKey());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getKey());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
84	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getRawClass());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getRawClass());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getRawClass());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
85	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
89	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
90	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
91	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
93	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
94	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
96	[BUG]  [BUGGY]  if(inf!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
97	[BUG]  [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  ||  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
98	[BUG]  [BUGGY]  While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
99	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  1)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  1)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  1)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
100	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
101	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
102	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
103	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
104	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMetho	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
105	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMeth  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMeth  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMeth	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
106	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
107	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
108	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
109	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
111	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
112	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
115	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  inf  =  getInputStream();	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
116	[BUG]  [BUGGY]  Inflater  im  =  inf.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  im  =  inf.close();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  im  =  inf.close();	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  Inflater  inf  =  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  inf  =  null;  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  inf  =  null;	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
118	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length());	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
119	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
120	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
121	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  Entry  <  ZipArchiveEntry>(inf.getValue());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
122	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  false;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
128	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
129	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
130	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
131	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
132	[BUG]  [BUGGY]  while(inf!=  null  &&  bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
133	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
134	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
135	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
136	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
137	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
138	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
139	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
140	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
141	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
142	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
143	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
144	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.append('n');  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesRead.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
145	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('N');  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('N');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('N');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
146	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
147	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
148	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  in.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
149	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf);	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
150	[BUG]  [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
151	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
152	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
153	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
154	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
155	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
156	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
157	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
158	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
159	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
160	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
161	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
162	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
163	[BUG]  [BUGGY]  While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
164	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
165	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
166	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
167	[BUG]  [BUGGY]  System.err.println( "Failed  to  close  entry.   ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  System.err.println( "Failed  to  close  entry.   ");  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	System.err.println( "Failed  to  close  entry.   ");	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
168	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
169	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
170	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
171	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
172	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
173	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
174	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
175	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
176	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
177	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  return;  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
178	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
179	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
180	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
181	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
182	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
183	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
185	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
186	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
187	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
188	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
189	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
190	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
191	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
192	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
193	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
194	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
195	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
196	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
197	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
199	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
200	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
201	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
202	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
203	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
204	[BUG]  [BUGGY]  while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
205	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
206	[BUG]  [BUGGY]  while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
207	[BUG]  [BUGGY]  while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
208	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
209	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
210	[BUG]  [BUGGY]  if(closed)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
211	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
212	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
213	[BUG]  [BUGGY]  if(closed)  {  if(in  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(in  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(in  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
214	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
215	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
216	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
217	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
218	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
219	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
222	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
224	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
225	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
226	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
227	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
228	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  currentEntry.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
229	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
230	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
231	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
232	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
233	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
234	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
235	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
236	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  this.inputStream.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
237	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
238	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
239	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
240	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
241	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
242	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
243	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
244	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
245	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
246	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
247	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
248	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
249	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(Exception    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
250	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(Exception    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
251	[BUG]  [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
252	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
253	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
254	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
255	[BUG]  [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
256	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
257	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
258	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
259	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
260	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
261	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
262	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  in.read();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  in.read();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  in.read();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
263	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
264	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
265	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
266	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
267	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
268	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
269	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
270	[BUG]  [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
271	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  Entry(inf.getValue());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
272	[BUG]  [BUGGY]  Entry  <  Zip>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  Zip>  entry  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  Zip>  entry  =  entry.getValue();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
273	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
274	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
275	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
276	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
277	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
278	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
279	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  entry.getValue();	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
280	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <?>  entry  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <?>  entry  =  entry.getValue();	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
281	[BUG]  [BUGGY]  Inflater  inf  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  inf  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  inf  =  entry.getValue();	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
282	[BUG]  [BUGGY]  Inflater  bis  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  entry.getValue();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  entry.getValue();	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
283	[BUG]  [BUGGY]  Inflater  bis  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  entry.getInputStream();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  entry.getInputStream();	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
284	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
285	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
286	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
287	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
288	[BUG]  [BUGGY]  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
289	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
290	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
291	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
292	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
293	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
294	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
295	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
296	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
297	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
298	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
299	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
300	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
301	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
302	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
303	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  false;  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
304	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
305	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
306	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
307	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
308	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
309	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
310	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
311	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
312	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
313	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
314	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
315	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  ==  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  ==  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  ==	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
316	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
317	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
318	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
319	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
320	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
321	[BUG]  [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
322	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
323	[BUG]  [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
324	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
325	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
326	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
327	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
328	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
329	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
330	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
331	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
332	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
333	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
334	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
335	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
336	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
337	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
338	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
339	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
340	[BUG]  [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
341	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
342	[BUG]  [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clon	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
343	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
344	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
345	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
346	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
347	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
348	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
349	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
350	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
351	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
352	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
353	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
354	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
356	[BUG]  [BUGGY]  while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
357	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
358	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  curr.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  curr.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  curr.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
359	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
360	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
361	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
362	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
363	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
364	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
365	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  getInputStream();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  getInputStream();	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
366	[BUG]  [BUGGY]  InputStream  bis  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  inputStream.getInputStream();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  inputStream.getInputStream();	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
367	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(inf.length());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  BoundedInputStream(inf.length());	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
368	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.read());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.read());	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
369	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(inf.read());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  BoundedInputStream(inf.read());	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
370	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  getInputStream(inf);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  getInputStream(inf);	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
371	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length()  >  0)  {  inf.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  inf.flush();  }	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
372	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length()  -  1);	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
373	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length(),  inf.length());	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
374	[BUG]  [BUGGY]  Inflater  inf  =  inf.close();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  inf  =  inf.close();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  inf  =  inf.close();	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
375	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
376	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
377	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
378	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
379	[BUG]  [BUGGY]  for(ZipArchiveEntry  entry  :  inf.entrySet())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(ZipArchiveEntry  entry  :  inf.entrySet())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(ZipArchiveEntry  entry  :  inf.entrySet())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
380	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
381	[BUG]  [BUGGY]  for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
382	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inf.length);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inf.length);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  inf.length);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
383	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getKey());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getKey());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getKey());  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
384	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue()  +  1);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue()  +  1);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue()  +  1);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
385	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  closed);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  closed);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  closed);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
386	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  close);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  close);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  close);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
387	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  this);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  this);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  this);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
388	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
389	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
390	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
391	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
392	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
393	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
394	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
395	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
396	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
397	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
398	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
399	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
400	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
401	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
402	[BUG]  [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
403	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
405	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
406	[BUG]  [BUGGY]  if(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
407	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
408	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
409	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
410	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
411	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
412	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
413	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
414	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
415	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
416	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  2;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  2;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length  -  2;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
419	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
421	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
422	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
423	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
424	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
425	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
426	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
427	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
428	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
429	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
430	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
431	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
432	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
433	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
434	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	System.err.println( "UnicodeExtraFields  closed ");	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
435	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
436	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
437	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
438	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
439	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
440	[BUG]  [BUGGY]  while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
441	[BUG]  [BUGGY]  while(curr!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(curr!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(curr!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
442	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
443	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
444	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
445	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
446	[BUG]  [BUGGY]  while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
447	[BUG]  [BUGGY]  while(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
448	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
449	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
450	[BUG]  [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
451	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
452	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
453	[BUG]  [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(out!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
454	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
455	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
456	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
457	[BUG]  [BUGGY]  while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
458	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
459	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
460	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
461	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchive  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchive  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchive  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
463	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
464	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.hasNext())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
465	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.hasMoreElements())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.hasMoreElements())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.hasMoreElements())  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
466	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
467	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
468	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  1);  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
469	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf,  inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf,  inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf,  inf.getValue());  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
470	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  inf.length);	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
471	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.read());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.read());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.read());  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
472	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
473	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
474	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
475	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
476	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
477	[BUG]  [BUGGY]  if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
478	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
479	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
480	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
481	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
482	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
483	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
484	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
485	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
486	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
487	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
488	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
489	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
490	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
491	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
492	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
493	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
494	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
495	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
496	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
497	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
498	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
499	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
500	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  currentHeaderOffset.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
501	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
502	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
503	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
504	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
505	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
506	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
507	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
508	[BUG]  [BUGGY]  while(current!=  null)  {  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
509	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
510	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
511	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
512	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inStream.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inStream.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inStream.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
513	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
514	[BUG]  [BUGGY]  if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
515	[BUG]  [BUGGY]  if(inf!=  null)  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  buffer.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
516	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	System.err.println( "UnicodeExtraFields  closed: "+inf.getName());	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "+inf.getName());    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
517	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "+inf.getName());    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
518	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "+inf.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "+inf.getName());  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "+inf.getName());    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
519	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "+inf.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "JavaExtraFields  closed: "+inf.getName());  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "+inf.getName());    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
520	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
521	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
522	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
523	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
524	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
525	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  inf.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  inf.flush();  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
526	[BUG]  [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
527	[BUG]  [BUGGY]  while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
528	[BUG]  [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(infer!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
529	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
530	[BUG]  [BUGGY]  Entry  entry  =(ZipArchiveEntry)entry.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =(ZipArchiveEntry)entry.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =(ZipArchiveEntry)entry.clone();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
531	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.clone());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
532	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
533	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
534	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
535	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
536	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
537	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
538	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
539	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
540	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesRead.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesRead.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesRead.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
541	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
542	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  break;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  break;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  break;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
543	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  open();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  open();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  open();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
544	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
545	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  zipArchiveEntry.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
546	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
547	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
548	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  newZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  newZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  newZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
549	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
550	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
551	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
552	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
553	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
554	[BUG]  [BUGGY]  while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
555	[BUG]  [BUGGY]  while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
556	[BUG]  [BUGGY]  while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
557	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
558	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
559	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
560	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
561	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
562	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
563	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
565	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
566	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
567	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
568	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getKey());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
569	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
570	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
571	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
572	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
573	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
574	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
575	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
576	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  >=  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
577	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
578	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
579	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
580	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
581	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
582	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
583	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
584	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
585	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
586	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
587	[BUG]  [BUGGY]  while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
588	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
589	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
590	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
591	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
592	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  out.write(buffer,  0,  inf.length);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  out.write(buffer,  0,  inf.length);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  out.write(buffer,  0,  inf.length);  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
593	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
594	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
595	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
596	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
597	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
598	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
599	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  ++i)  {  close(inf.next());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
600	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length()  +  1;  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length()  +  1;  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length()  +  1;  ++i)  {  close(inf.next());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
601	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
602	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
603	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
604	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
605	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
606	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
607	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
608	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
609	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
610	[BUG]  [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
611	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
612	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  return;  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
613	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
614	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
615	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clo  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  entry.clo	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
616	[BUG]  [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
617	[BUG]  [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)in	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
618	[BUG]  [BUGGY]  entry.getValue()  =  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  entry.getValue()  =  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	entry.getValue()  =  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
619	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
620	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length  -  1;  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
621	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
622	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
623	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
624	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
625	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
626	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
627	[BUG]  [BUGGY]  for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(ZipArchiveEntry  entry  :  inf.values())  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
628	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entries.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entries.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entries.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
629	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
630	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
631	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
632	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
633	[BUG]  [BUGGY]  while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  ||  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
634	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
635	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
636	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
637	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
638	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
639	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
640	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
641	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
642	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
643	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
644	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
645	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
646	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
647	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
648	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
649	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
650	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
651	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
652	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
653	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
654	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
655	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
656	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
657	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.flush();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
658	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  currentEntry.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  currentEntry.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  currentEntry.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
659	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
660	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
661	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
662	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
663	[BUG]  [BUGGY]  While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
664	[BUG]  [BUGGY]  Inflater  bis  =  inf.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  inf.close();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  inf.close();	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
665	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry(inf);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  new  ZipArchiveEntry(inf);	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
666	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
667	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
668	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
669	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
670	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
671	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
672	[BUG]  [BUGGY]  if(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
673	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
674	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
675	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
676	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
677	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
678	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
679	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
680	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
681	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
682	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()!=  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
683	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
684	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
685	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
686	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
687	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
688	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
689	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
690	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
691	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
692	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
693	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  files.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  files.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  files.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
694	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
695	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
696	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
697	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
698	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closure();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closure();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closure();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
699	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  closed  =  true;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
700	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
701	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
702	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
703	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
704	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
705	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
706	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
707	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
708	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
709	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
710	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
711	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
712	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
713	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
714	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
715	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
716	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
717	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
718	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
719	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
720	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
721	[BUG]  [BUGGY]  if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
722	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
723	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
724	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
725	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
726	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
727	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
728	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
729	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
730	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
731	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
732	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(Exception    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
733	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Throwable  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Throwable  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Throwable  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(Exception    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
734	[BUG]  [BUGGY]  if(current!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
735	[BUG]  [BUGGY]  While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
736	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
737	[BUG]  [BUGGY]  while(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
738	[BUG]  [BUGGY]  while(inf!=  null)  {  if(inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  if(inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  if(inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
739	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
740	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
741	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
742	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
743	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
744	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
745	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
746	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(entry.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(entry.getValue());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
747	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
748	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
749	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
750	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
751	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
752	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
753	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
754	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
755	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
756	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
757	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
758	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
759	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
760	[BUG]  [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead  ==  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
761	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
762	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
763	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
764	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  filesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  filesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  filesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
765	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
766	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
767	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
768	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
769	[BUG]  [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(curr!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
770	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  currentEntry.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  currentEntry.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  currentEntry.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
771	[BUG]  [BUGGY]  While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
772	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
773	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
774	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue()  +  1);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue()  +  1);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue()  +  1);  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
775	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
776	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getParent());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getParent());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getParent());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
777	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext()  +  1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext()  +  1);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext()  +  1);  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.getNext());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
778	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
779	[BUG]  [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
780	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
781	[BUG]  [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
782	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
783	[BUG]  [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
784	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
785	[BUG]  [BUGGY]  if(closed)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  inf.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  inf.flush();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
786	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
787	[BUG]  [BUGGY]  while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(i!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
788	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
789	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
790	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UseUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
791	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "UsageUnicodeExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
792	[BUG]  [BUGGY]  while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
793	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
794	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
795	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closeInputStream(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
796	[BUG]  [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
797	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
798	[BUG]  [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
799	[BUG]  [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
800	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
801	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(in);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(in);	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
802	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(in,  inputStream.length());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(in,  inputStream.length());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  BoundedInputStream(in,  inputStream.length());	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
803	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(in,  inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(in,  inputStream);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  BoundedInputStream(in,  inputStream);	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
804	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
805	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
806	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
807	[BUG]  [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
808	[BUG]  [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
809	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
810	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.clone());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
811	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
812	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
813	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
814	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
815	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
816	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
817	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
818	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
819	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
820	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEnt	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
821	[BUG]  [BUGGY]  while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(intainer!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
822	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
823	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  bis);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  bis);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue(),  bis);  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
824	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.next());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.next());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.next());  entry.closeEntry();	  Entry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
825	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
826	[BUG]  [BUGGY]  while(current!=  null  &&  inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
827	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
828	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
829	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
830	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
831	[BUG]  [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone()	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
832	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
833	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
834	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
835	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.release();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.release();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.release();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
836	[BUG]  [BUGGY]  while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
837	[BUG]  [BUGGY]  while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
838	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
839	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
840	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closure();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closure();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closure();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
841	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
842	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
843	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
844	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
845	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
846	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesEncoding.append('n');  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entriesEncoding.append('n');  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
847	[BUG]  [BUGGY]  while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  hasDataDescriptor)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
848	[BUG]  [BUGGY]  while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
849	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
850	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
851	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
852	[BUG]  [BUGGY]  if(entry!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
853	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  <  2)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  <  2)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  <  2)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
854	[BUG]  [BUGGY]  while(inf  ==  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
855	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
856	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
857	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)ze.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)ze.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)ze.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
858	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length);	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
859	[BUG]  [BUGGY]  Inflater  bis  =  inf.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  inf.getInputStream();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  inf.getInputStream();	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
860	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
861	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
862	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
863	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "+inf.getName());    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
864	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
865	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entries.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
866	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
867	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
868	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
869	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
870	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZIPArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZIPArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZIPArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
871	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  zipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  zipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  zipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZIPArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
872	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
873	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
874	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
875	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
876	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  close(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
877	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
878	[BUG]  [BUGGY]  if(entryLen  ==  0)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryLen  ==  0)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryLen  ==  0)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
879	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getLength();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
880	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
881	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  inf.getValue();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
882	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
883	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
884	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
885	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
886	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
887	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
888	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  inputStream.flush();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
889	[BUG]  [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inputStream.close();  }  else  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
890	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inputStream);  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inputStream);  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  inputStream);  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
891	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.next());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.next());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.next());  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
892	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.getValue(),  inf.length);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue(),  inf.length);	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
893	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
894	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
895	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
896	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(ent	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
897	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
898	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
899	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
900	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
901	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
902	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValu	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
903	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
904	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
905	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
906	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
907	[BUG]  [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
908	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
909	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  return;  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
910	[BUG]  [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
911	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
912	[BUG]  [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
913	[BUG]  [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
914	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
915	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
916	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  io	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
917	[BUG]  [BUGGY]  while(outputStream!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(outputStream!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(outputStream!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
918	[BUG]  [BUGGY]  While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
919	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
920	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
921	[BUG]  [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
922	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
923	[BUG]  [BUGGY]  if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
924	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
925	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
926	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
927	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
928	[BUG]  [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
929	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
930	[BUG]  [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(out!=  null)  {  for(int  i  =  0;  i  <  in.length();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
931	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
932	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
933	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
934	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
935	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
936	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length());	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
937	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length()  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.length()  -  1);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Inflater  bis  =  new  ZipInputStream(inf.length()  -  1);	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
938	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
939	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.flush();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
940	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
941	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.flush();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
942	[BUG]  [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(out!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
943	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
944	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
945	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
946	[BUG]  [BUGGY]  int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
947	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
948	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
949	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
950	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
951	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
952	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
953	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
954	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  this.zipArchiveEntry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  this.zipArchiveEntry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  this.zipArchiveEntry.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
955	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
956	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
957	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
958	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
959	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
960	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry()  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry()  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry()	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
961	[BUG]  [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
962	[BUG]  [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
963	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
964	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
965	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
966	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
967	[BUG]  [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getVal	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
968	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
969	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
970	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMet  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMet  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMet	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
971	[BUG]  [BUGGY]  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	(ZipArchiveEntry)inf.clon	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
972	[BUG]  [BUGGY]  (ZipArchiveEntry)inf.clon;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  (ZipArchiveEntry)inf.clon;  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	(ZipArchiveEntry)inf.clon;	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
973	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
974	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
975	[BUG]  [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.enabled)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
976	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
977	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
978	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
979	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
980	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  return;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
981	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
982	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
983	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getName().endsWith( "/ "))  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
984	[BUG]  [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
985	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
986	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
987	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry()  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry()  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFAULT)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry()	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
988	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
989	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
990	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
991	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
992	[BUG]  [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipArchiveEntry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    zipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
993	[BUG]  [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
994	[BUG]  [BUGGY]  while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
995	[BUG]  [BUGGY]  if(entry.getValue!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
996	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
997	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
998	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
999	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
1000	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1001	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1002	[BUG]  [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1003	[BUG]  [BUGGY]  while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
1004	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
1005	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getVal    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1006	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1007	[BUG]  [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entries!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1008	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1009	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  this.inputStream.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1010	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  in.length();  ++i)  {  inputStream.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1011	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  outputStream.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1012	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }	  if(inputStream!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1013	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1014	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesToFront.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesToFront.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entriesToFront.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1015	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1016	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1017	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1018	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  continue;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  continue;  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
1019	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  out.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  out.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  out.size();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    out.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1020	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1021	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.getValue();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1022	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1023	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1024	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1025	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1026	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getRawClass());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getRawClass());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getRawClass());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
1027	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  current.size();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    current.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1028	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getChars());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getChars());  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getChars());	  InputStream    bis    =    new    ZipInputStream(inf.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1029	[BUG]  [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1030	[BUG]  [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  try  {  inf.close();  }  catch(IOException  e)  {  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1031	[BUG]  [BUGGY]  if(inf.length  >  0)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  closed  =  true;  }	  if(inf.length    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1032	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getData());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getData());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getData());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1033	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getLocation());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getLocation());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getLocation());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getKey());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1034	[BUG]  [BUGGY]  if(entry.getValue  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(entry!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
1035	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  img.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    entryEncoding.close();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1036	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getName());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
1037	[BUG]  [BUGGY]  if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1038	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1039	[BUG]  [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1040	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1041	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1042	[BUG]  [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesCount;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesCount;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entriesRead!=  null)  {  for(int  i  =  0;  i  <  entriesCount;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1043	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entriesRead;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1044	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  e)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
1045	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  For(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	For(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
1046	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  out.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  out.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
1047	[BUG]  [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1048	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1049	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1050	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
1051	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1052	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.size()  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.size()  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.size()  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1053	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1054	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1055	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)enf.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)enf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)enf.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1056	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1057	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1058	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1059	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1060	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getImpl());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getImpl());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getImpl());  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
1061	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1062	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1063	[BUG]  [BUGGY]  if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1064	[BUG]  [BUGGY]  if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.size()  >  0)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1065	[BUG]  [BUGGY]  if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValu    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
1066	[BUG]  [BUGGY]  int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
1067	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1068	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1069	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(Exception    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
1070	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1071	[BUG]  [BUGGY]  while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  bis.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1072	[BUG]  [BUGGY]  if(entry.getVal  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getVal  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getVal  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1073	[BUG]  [BUGGY]  if(entry.getVal  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getVal  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getVal  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getVal    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1074	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    out.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1075	[BUG]  [BUGGY]  while(inf!=  null  &&  outf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  outf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  outf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1076	[BUG]  [BUGGY]  while(inferred!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inferred!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inferred!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  while(inf!=    null    &&    inf.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1077	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1078	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1079	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1080	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1081	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1082	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  }	  if(entry.getValue()    ==    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1083	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1084	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    curr.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1085	[BUG]  [BUGGY]  if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1086	[BUG]  [BUGGY]  if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.length  ==  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1087	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.length);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.length);  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.length);  entry.closeEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1088	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
1089	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1090	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  this.current.close();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1091	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  closeEntry();  }	  for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1092	[BUG]  [BUGGY]  if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(this.inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1093	[BUG]  [BUGGY]  While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1094	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1095	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  }	  if(closed)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1096	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeEntry();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
1097	[BUG]  [BUGGY]  int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
1098	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1099	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
1100	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.next();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
1101	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
1102	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.size  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.size  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.size  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1103	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1104	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.length  >  0)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inf.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1105	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1106	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    attempt    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1107	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  1;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  1;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1108	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }	  if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1109	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(closed)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1110	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
1111	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.read());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  entry  =  new  Entry(inf.read());  entry.closeEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.read());  entry.closeEntry();	  Entry    entry    =    new    Entry(inf.getValue());    entry.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1112	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1113	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1114	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(entry.getValue());    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1115	[BUG]  [BUGGY]  if(entry.getValue  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue  ==  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
1116	[BUG]  [BUGGY]  if(entry.getValue!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue!=  null)  {  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValu    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
1117	[BUG]  [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(closed)    {    if(in!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
1118	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.next()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.next()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.next()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1119	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInf(inf.next());  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1120	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1121	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getVal  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1122	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1123	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1124	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getKey()  ==  entry.getValue())  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1125	[BUG]  [BUGGY]  if(entry.getName()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getName()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getName()!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getKey()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1126	[BUG]  [BUGGY]  if(this.current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(this.current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(this.current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1127	[BUG]  [BUGGY]  if(this.entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(this.entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(this.entryEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1128	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  this.current.length();  ++i)  {  this.current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    this.current.close();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1129	[BUG]  [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1130	[BUG]  [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1131	[BUG]  [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clo    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1132	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)zipEncoding.clone();  if(entry.getValue().equals(entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
1133	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1134	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(zipEncoding!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)ze.clone();  if(entry.getValue()  ==  entry	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1135	[BUG]  [BUGGY]  if(inf.length  >  0)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1136	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
1137	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1138	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  i++)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1139	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  }	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1140	[BUG]  [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1141	[BUG]  [BUGGY]  if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(closed)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1142	[BUG]  [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(entry.getValue()    ==    entry.getValue())    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clon    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1143	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entryEncoding.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1144	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(i);  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(i);	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1145	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entries.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1146	[BUG]  [BUGGY]  int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	int  currentHeaderOffset  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(inf!=    null    &&    current.length    >    0)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1147	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entryEncoding!=  null)  {  inf.close();  }  else  {  System.err.println( "ZipExtraFields  closed: "  +  entryEncoding);  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    entryEncoding);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)out.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)out.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  out.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)out.clone();  }	  for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1149	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  i++)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1150	[BUG]  [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1151	[BUG]  [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1152	[BUG]  [BUGGY]  while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.size  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  while(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1153	[BUG]  [BUGGY]  while(inferred!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inferred!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inferred!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1154	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1155	[BUG]  [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1156	[BUG]  [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(ze)  {  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(entry    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.get    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1157	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "Failed  to  close  entry.   ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  System.err.println( "Failed  to  close  entry.   ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  System.err.println( "Failed  to  close  entry.   ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  out.clone();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(ze,  inf.clone());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(ze,  inf.clone());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(ze,  inf.clone());  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1160	[BUG]  [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.enabled)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.enabled)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
1161	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
1162	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1163	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inf.toString());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inf.toString());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed: "  +  inf.toString());  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }	  for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1165	[BUG]  [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1166	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1167	[BUG]  [BUGGY]  while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1168	[BUG]  [BUGGY]  while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1169	[BUG]  [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1170	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  if(!closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1171	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
1172	[BUG]  [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(outputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  out.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1173	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  innerf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  innerf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  innerf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1174	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  findZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  findZipArchiveEntry();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  findZipArchiveEntry();  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1175	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  getZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  ZipArchiveEntry  entry  =  getZipArchiveEntry();  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	ZipArchiveEntry  entry  =  getZipArchiveEntry();	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1176	[BUG]  [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  e)  {  }	  if(closed)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    e)    {    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1177	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  current.close();  }	  if(current!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1178	[BUG]  [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null  &&  current.length  >  0)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1179	[BUG]  [BUGGY]  While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	While(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  while(current!=    null)    {    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1180	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.get    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1181	[BUG]  [BUGGY]  while(inf!=  null  &&  inputStream.size()  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null  &&  inputStream.size()  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inputStream.size()  >  0)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1182	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }	  while(inf!=    null)    {    for(int    i    =    0;    i    <    inputStream.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1183	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
1184	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  ||  entry.	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
1185	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getName());  }	  if(entry!=    null)    {    for(int    i    =    0;    i    <    entry.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)entry.clone();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
1186	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1187	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1188	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1189	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  }  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  }	  if(inf.length()    >    0)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1190	[BUG]  [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1191	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()  [BUGGY]      }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue()	  if(entry!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    getZipArchiveEntry();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
